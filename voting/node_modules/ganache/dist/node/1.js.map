{"version":3,"file":"1.js","mappings":"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","sources":["webpack://Ganache/../../chains/ethereum/address/lib/index.js","webpack://Ganache/../../chains/ethereum/block/lib/index.js","webpack://Ganache/../../chains/ethereum/block/lib/src/block-params.js","webpack://Ganache/../../chains/ethereum/block/lib/src/block.js","webpack://Ganache/../../chains/ethereum/block/lib/src/runtime-block.js","webpack://Ganache/../../chains/ethereum/block/lib/src/serialize.js","webpack://Ganache/../../chains/ethereum/block/lib/src/snapshots.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/index.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/api.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/blockchain.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/connector.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/data-managers/account-manager.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/data-managers/block-manager.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/data-managers/blocklog-manager.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/data-managers/manager.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/data-managers/transaction-manager.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/data-managers/transaction-receipt-manager.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/database.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/cache.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/deferred.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/fork.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/handlers/base-handler.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/handlers/http-handler.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/handlers/provider-handler.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/handlers/ws-handler.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/lexicographic-key-codec.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/persistent-cache/ancestry.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/persistent-cache/helpers.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/persistent-cache/persistent-cache.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/persistent-cache/tree.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/rate-limiter/limit-counter.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/rate-limiter/rate-limiter.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/state-manager.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/forking/trie.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/hdkey.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/helpers/assert-arg-length.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/helpers/bufferify.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/helpers/filter-parsing.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/helpers/gas-estimator.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/helpers/precompiles.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/helpers/trie.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/miner/miner.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/miner/replace-from-heap.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/provider-events.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/provider.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/transaction-pool.js","webpack://Ganache/../../chains/ethereum/ethereum/lib/src/wallet.js","webpack://Ganache/../../chains/ethereum/options/lib/index.js","webpack://Ganache/../../chains/ethereum/options/lib/src/chain-options.js","webpack://Ganache/../../chains/ethereum/options/lib/src/database-options.js","webpack://Ganache/../../chains/ethereum/options/lib/src/fork-options.js","webpack://Ganache/../../chains/ethereum/options/lib/src/helpers.js","webpack://Ganache/../../chains/ethereum/options/lib/src/index.js","webpack://Ganache/../../chains/ethereum/options/lib/src/logging-options.js","webpack://Ganache/../../chains/ethereum/options/lib/src/miner-options.js","webpack://Ganache/../../chains/ethereum/options/lib/src/wallet-options.js","webpack://Ganache/../../chains/ethereum/transaction/lib/index.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/access-lists.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/base-transaction.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/eip1559-fee-market-transaction.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/eip2930-access-list-transaction.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/hardfork.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/legacy-transaction.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/params.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/raw.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/rpc-transaction.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/runtime-transaction.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/signing.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/transaction-factory.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/transaction-receipt.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/transaction-types.js","webpack://Ganache/../../chains/ethereum/transaction/lib/src/vm-transaction.js","webpack://Ganache/../../chains/ethereum/utils/lib/index.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/errors/abort-error.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/errors/call-error.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/errors/coded-error.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/errors/errors.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/errors/runtime-error.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/index.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/things/account.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/things/blocklogs.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/things/tags.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/things/trace-data.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/things/trace-storage-map.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/debug-storage.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/extract-values-from-types.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/filters.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/hex-datatypes.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/shh.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/subscriptions.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/trace-transaction.js","webpack://Ganache/../../chains/ethereum/utils/lib/src/types/tuple-from-union.js","webpack://Ganache/../../chains/filecoin/options/lib/index.js","webpack://Ganache/../../chains/filecoin/options/lib/src/chain-options.js","webpack://Ganache/../../chains/filecoin/options/lib/src/database-options.js","webpack://Ganache/../../chains/filecoin/options/lib/src/helpers.js","webpack://Ganache/../../chains/filecoin/options/lib/src/index.js","webpack://Ganache/../../chains/filecoin/options/lib/src/logging-options.js","webpack://Ganache/../../chains/filecoin/options/lib/src/miner-options.js","webpack://Ganache/../../chains/filecoin/options/lib/src/wallet-options.js","webpack://Ganache/../colors/lib/index.js","webpack://Ganache/../colors/lib/src/index.js","webpack://Ganache/../core/lib/index.js","webpack://Ganache/../core/lib/src/connector-loader.js","webpack://Ganache/../core/lib/src/options/index.js","webpack://Ganache/../core/lib/src/options/server-options.js","webpack://Ganache/../core/lib/src/server.js","webpack://Ganache/../core/lib/src/servers/http-server.js","webpack://Ganache/../core/lib/src/servers/utils/content-types.js","webpack://Ganache/../core/lib/src/servers/utils/http-response-codes.js","webpack://Ganache/../core/lib/src/servers/utils/websocket-close-codes.js","webpack://Ganache/../core/lib/src/servers/ws-server.js","webpack://Ganache//home/runner/work/ganache/ganache/src/packages/core/node_modules/@trufflesuite/uws-js-unofficial/binaries|sync|/^\\.\\/uws_.*\\.node$/","webpack://Ganache/../flavors/lib/index.js","webpack://Ganache/../flavors/lib|sync","webpack://Ganache/./webpack/polyfills/debug.ts","webpack://Ganache/../options/lib/index.js","webpack://Ganache/../options/lib/src/base.js","webpack://Ganache/../options/lib/src/constants.js","webpack://Ganache/../options/lib/src/create.js","webpack://Ganache/../options/lib/src/definition.js","webpack://Ganache/../options/lib/src/exclusive.js","webpack://Ganache/../promise-queue/lib/index.js","webpack://Ganache/../promise-queue/lib/src/entry.js","webpack://Ganache/../rlp/lib/index.js","webpack://Ganache/../secp256k1/lib/index.js","webpack://Ganache/../utils/lib/index.js","webpack://Ganache/../utils/lib/src/common.js","webpack://Ganache/../utils/lib/src/things/json-rpc/json-rpc-base-types.js","webpack://Ganache/../utils/lib/src/things/json-rpc/json-rpc-data.js","webpack://Ganache/../utils/lib/src/things/json-rpc/json-rpc-quantity.js","webpack://Ganache/../utils/lib/src/things/jsonrpc.js","webpack://Ganache/../utils/lib/src/things/promievent.js","webpack://Ganache/../utils/lib/src/things/subscription.js","webpack://Ganache/../utils/lib/src/types/api.js","webpack://Ganache/../utils/lib/src/types/connector.js","webpack://Ganache/../utils/lib/src/types/index.js","webpack://Ganache/../utils/lib/src/types/provider.js","webpack://Ganache/../utils/lib/src/utils/bigint-to-buffer.js","webpack://Ganache/../utils/lib/src/utils/buffer-to-bigint.js","webpack://Ganache/../utils/lib/src/utils/buffer-to-key.js","webpack://Ganache/../utils/lib/src/utils/constants.js","webpack://Ganache/../utils/lib/src/utils/executor.js","webpack://Ganache/../utils/lib/src/utils/find-insert-position.js","webpack://Ganache/../utils/lib/src/utils/has-own.js","webpack://Ganache/../utils/lib/src/utils/heap.js","webpack://Ganache/../utils/lib/src/utils/index.js","webpack://Ganache/../utils/lib/src/utils/keccak.js","webpack://Ganache/../utils/lib/src/utils/random-number-generator.js","webpack://Ganache/../utils/lib/src/utils/request-coordinator.js","webpack://Ganache/../utils/lib/src/utils/uint-to-buffer.js","webpack://Ganache/../utils/lib/src/utils/unref.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nclass Address extends utils_1.Data {\n    /**\n     *\n     * @param value -\n     * @param byteLength - the exact length the value represents when encoded as\n     * Ethereum JSON-RPC DATA.\n     */\n    constructor(value) {\n        super(value, Address.ByteLength);\n    }\n    static from(value) {\n        return new Address(value);\n    }\n}\nexports.Address = Address;\nAddress.ByteLength = 20;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/block\"), exports);\n__exportStar(require(\"./src/runtime-block\"), exports);\n__exportStar(require(\"./src/snapshots\"), exports);\n__exportStar(require(\"./src/serialize\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// NOTE these params may need to be changed at each hardfork\n// they can be tracked here: https://github.com/ethereumjs/ethereumjs-vm/blob/master/packages/common/src/hardforks/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockParams = void 0;\nexports.BlockParams = {\n    /**\n     *  Base fee per gas for blocks without a parent containing a base fee per gas.\n     */\n    INITIAL_BASE_FEE_PER_GAS: 1000000000n,\n    /**\n     * Divisor used to set a block's target gas usage.\n     */\n    ELASTICITY: 2n,\n    /**\n     * Divisor used to limit the amount the base fee per gas can change from one block to another.\n     */\n    BASE_FEE_MAX_CHANGE_DENOMINATOR: 8n\n};\n//# sourceMappingURL=block-params.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Block = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst runtime_block_1 = require(\"./runtime-block\");\nconst utils_2 = require(\"@ganache/utils\");\nconst block_params_1 = require(\"./block-params\");\nclass Block {\n    constructor(serialized, common) {\n        this._common = common;\n        if (serialized) {\n            const deserialized = (0, rlp_1.decode)(serialized);\n            this._raw = deserialized[0];\n            this._rawTransactions = deserialized[1] || [];\n            // TODO: support actual uncle data (needed for forking!)\n            // Issue: https://github.com/trufflesuite/ganache/issues/786\n            // const uncles = deserialized[2];\n            const totalDifficulty = deserialized[3];\n            this.header = (0, runtime_block_1.makeHeader)(this._raw, totalDifficulty);\n            this._rawTransactionMetaData = deserialized[4] || [];\n            this._size = utils_1.Quantity.from(deserialized[5]).toNumber();\n        }\n    }\n    hash() {\n        return (this._hash || (this._hash = utils_1.Data.from((0, utils_2.keccak)((0, rlp_1.encode)(this._raw)), 32)));\n    }\n    getTransactions() {\n        const common = this._common;\n        return this._rawTransactions.map((raw, index) => {\n            const [from, hash] = this._rawTransactionMetaData[index];\n            const extra = [\n                from,\n                hash,\n                this.hash().toBuffer(),\n                this.header.number.toBuffer(),\n                utils_1.Quantity.from(index).toBuffer()\n            ];\n            return ethereum_transaction_1.TransactionFactory.fromDatabaseTx(raw, common, extra);\n        });\n    }\n    toJSON(includeFullTransactions = false) {\n        const hash = this.hash();\n        const txFn = this.getTxFn(includeFullTransactions);\n        const hashBuffer = hash.toBuffer();\n        const header = this.header;\n        const number = header.number.toBuffer();\n        const common = this._common;\n        const jsonTxs = this._rawTransactions.map((raw, index) => {\n            const [from, hash] = this._rawTransactionMetaData[index];\n            const extra = [\n                from,\n                hash,\n                hashBuffer,\n                number,\n                utils_1.Quantity.from(index).toBuffer()\n            ];\n            const tx = ethereum_transaction_1.TransactionFactory.fromDatabaseTx(raw, common, extra);\n            // we could either parse the raw data to check if the tx is type 2,\n            // get the maxFeePerGas and maxPriorityFeePerGas, use those to calculate\n            // the effectiveGasPrice and add it to `extra` above, or we can just\n            // leave it out of extra and update the effectiveGasPrice after like this\n            tx.updateEffectiveGasPrice(header.baseFeePerGas);\n            return txFn(tx);\n        });\n        return {\n            hash,\n            ...header,\n            size: utils_1.Quantity.from(this._size),\n            transactions: jsonTxs,\n            uncles: [] // this.value.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n        };\n    }\n    getTxFn(include = false) {\n        if (include) {\n            return (tx) => tx.toJSON(this._common);\n        }\n        else {\n            return (tx) => tx.hash;\n        }\n    }\n    static fromParts(rawHeader, txs, totalDifficulty, extraTxs, size, common) {\n        const block = new Block(null, common);\n        block._raw = rawHeader;\n        block._rawTransactions = txs;\n        block.header = (0, runtime_block_1.makeHeader)(rawHeader, totalDifficulty);\n        block._rawTransactionMetaData = extraTxs;\n        block._size = size;\n        return block;\n    }\n    static calcNextBaseFeeBigInt(parentHeader) {\n        let nextBaseFee;\n        const header = parentHeader;\n        const parentGasTarget = header.gasLimit.toBigInt() / block_params_1.BlockParams.ELASTICITY;\n        const parentGasUsed = header.gasUsed.toBigInt();\n        const baseFeePerGas = header.baseFeePerGas\n            ? header.baseFeePerGas.toBigInt()\n            : block_params_1.BlockParams.INITIAL_BASE_FEE_PER_GAS;\n        if (parentGasTarget === parentGasUsed) {\n            // If the parent gasUsed is the same as the target, the baseFee remains unchanged.\n            nextBaseFee = baseFeePerGas;\n        }\n        else if (parentGasUsed > parentGasTarget) {\n            // If the parent block used more gas than its target, the baseFee should increase.\n            const gasUsedDelta = parentGasUsed - parentGasTarget;\n            const adjustedFeeDelta = (baseFeePerGas * gasUsedDelta) /\n                parentGasTarget /\n                block_params_1.BlockParams.BASE_FEE_MAX_CHANGE_DENOMINATOR;\n            if (adjustedFeeDelta > 1n) {\n                nextBaseFee = baseFeePerGas + adjustedFeeDelta;\n            }\n            else {\n                nextBaseFee = baseFeePerGas + 1n;\n            }\n        }\n        else {\n            // Otherwise if the parent block used less gas than its target, the baseFee should decrease.\n            const gasUsedDelta = parentGasTarget - parentGasUsed;\n            const adjustedFeeDelta = (baseFeePerGas * gasUsedDelta) /\n                parentGasTarget /\n                block_params_1.BlockParams.BASE_FEE_MAX_CHANGE_DENOMINATOR;\n            nextBaseFee = baseFeePerGas - adjustedFeeDelta;\n        }\n        return nextBaseFee;\n    }\n    static calcNBlocksMaxBaseFee(blocks, parentHeader) {\n        const { BASE_FEE_MAX_CHANGE_DENOMINATOR } = block_params_1.BlockParams;\n        let maxPossibleBaseFee = this.calcNextBaseFeeBigInt(parentHeader);\n        // we must calculate each future block's max base fee individually because\n        // each block's base fee must be appropriately \"floored\" (Math.floor) before\n        // the following block's base fee is calculated. If we don't do this we'll\n        // end up with compounding rounding errors.\n        // FYI: the more performant, but rounding error-prone, way is:\n        // return lastMaxBlockBaseFee + (lastMaxBlockBaseFee * ((BASE_FEE_MAX_CHANGE_DENOMINATOR-1)**(blocks-1)) / ((BASE_FEE_MAX_CHANGE_DENOMINATOR)**(blocks-1)))\n        while (--blocks) {\n            maxPossibleBaseFee +=\n                maxPossibleBaseFee / BASE_FEE_MAX_CHANGE_DENOMINATOR;\n        }\n        return maxPossibleBaseFee;\n    }\n    static calcNextBaseFee(parentBlock) {\n        const header = parentBlock.header;\n        if (header.baseFeePerGas === undefined) {\n            return undefined;\n        }\n        else {\n            return this.calcNextBaseFeeBigInt(header);\n        }\n    }\n}\nexports.Block = Block;\n/**\n *  Base fee per gas for blocks without a parent containing a base fee per gas.\n */\nBlock.INITIAL_BASE_FEE_PER_GAS = block_params_1.BlockParams.INITIAL_BASE_FEE_PER_GAS;\n//# sourceMappingURL=block.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuntimeBlock = exports.makeHeader = exports.getBlockSize = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst serialize_1 = require(\"./serialize\");\nconst block_1 = require(\"./block\");\n/**\n * BN, but with an extra `buf` property that caches the original Buffer value\n * we pass in.\n */\nclass BnExtra extends ethereumjs_util_1.BN {\n    constructor(number) {\n        super(number, 10, \"be\");\n        this.buf = number;\n    }\n}\n/**\n * Returns the size of the serialized data as it would have been calculated had\n * we stored things geth does, i.e., `totalDfficulty` is not usually stored in\n * the block header.\n *\n * @param serialized -\n * @param totalDifficulty -\n */\nfunction getBlockSize(serialized, totalDifficulty) {\n    return serialized.length - totalDifficulty.length;\n}\nexports.getBlockSize = getBlockSize;\nfunction makeHeader(raw, totalDifficulty) {\n    return {\n        parentHash: utils_1.Data.from(raw[0], 32),\n        sha3Uncles: utils_1.Data.from(raw[1], 32),\n        miner: utils_1.Data.from(raw[2], 20),\n        stateRoot: utils_1.Data.from(raw[3], 32),\n        transactionsRoot: utils_1.Data.from(raw[4], 32),\n        receiptsRoot: utils_1.Data.from(raw[5], 32),\n        logsBloom: utils_1.Data.from(raw[6], 256),\n        difficulty: utils_1.Quantity.from(raw[7], false),\n        number: utils_1.Quantity.from(raw[8], false),\n        gasLimit: utils_1.Quantity.from(raw[9], false),\n        gasUsed: utils_1.Quantity.from(raw[10], false),\n        timestamp: utils_1.Quantity.from(raw[11], false),\n        extraData: utils_1.Data.from(raw[12]),\n        mixHash: utils_1.Data.from(raw[13], 32),\n        nonce: utils_1.Data.from(raw[14], 8),\n        totalDifficulty: utils_1.Quantity.from(totalDifficulty, false),\n        baseFeePerGas: raw[15] === undefined ? undefined : utils_1.Quantity.from(raw[15], false)\n    };\n}\nexports.makeHeader = makeHeader;\n/**\n * A minimal block that can be used by the EVM to run transactions.\n */\nclass RuntimeBlock {\n    constructor(number, parentHash, coinbase, gasLimit, gasUsed, timestamp, difficulty, previousBlockTotalDifficulty, baseFeePerGas) {\n        this.serializeBaseFeePerGas = true;\n        const ts = timestamp.toBuffer();\n        const coinbaseBuffer = coinbase.toBuffer();\n        this.header = {\n            parentHash: parentHash.toBuffer(),\n            coinbase: { buf: coinbaseBuffer, toBuffer: () => coinbaseBuffer },\n            number: new BnExtra(number.toBuffer()),\n            difficulty: new BnExtra(difficulty.toBuffer()),\n            totalDifficulty: utils_1.Quantity.from(previousBlockTotalDifficulty.toBigInt() + difficulty.toBigInt()).toBuffer(),\n            gasLimit: new BnExtra(gasLimit),\n            gasUsed: new BnExtra(gasUsed),\n            timestamp: new BnExtra(ts),\n            baseFeePerGas: baseFeePerGas === undefined\n                ? new BnExtra(utils_1.BUFFER_ZERO)\n                : new BnExtra(utils_1.Quantity.from(baseFeePerGas).toBuffer())\n        };\n        // When forking we might get a block that doesn't have a baseFeePerGas value,\n        // but EIP-1559 might be active on our chain. We need to keep track on if\n        // we should serialize the baseFeePerGas value or not based on that info.\n        // this will be removed as part of https://github.com/trufflesuite/ganache/pull/1537\n        if (baseFeePerGas === undefined)\n            this.serializeBaseFeePerGas = false;\n    }\n    /**\n     * Returns the serialization of all block data, the hash of the block header,\n     * and a map of the hashed and raw storage keys\n     */\n    finalize(transactionsTrie, receiptTrie, bloom, stateRoot, gasUsed, extraData, transactions, storageKeys) {\n        const { header } = this;\n        const rawHeader = [\n            header.parentHash,\n            ethereumjs_util_1.KECCAK256_RLP_ARRAY,\n            header.coinbase.buf,\n            stateRoot,\n            transactionsTrie,\n            receiptTrie,\n            bloom,\n            header.difficulty.buf,\n            header.number.buf,\n            header.gasLimit.buf,\n            gasUsed === 0n ? utils_1.BUFFER_EMPTY : utils_1.Quantity.from(gasUsed).toBuffer(),\n            header.timestamp.buf,\n            extraData.toBuffer(),\n            utils_1.BUFFER_32_ZERO,\n            utils_1.BUFFER_8_ZERO // nonce\n        ];\n        if (this.serializeBaseFeePerGas && header.baseFeePerGas !== undefined) {\n            rawHeader[15] = header.baseFeePerGas.buf;\n        }\n        const { totalDifficulty } = header;\n        const txs = [];\n        const extraTxs = [];\n        transactions.forEach(tx => {\n            txs.push(tx.raw);\n            extraTxs.push([tx.from.toBuffer(), tx.hash.toBuffer()]);\n        });\n        const { serialized, size } = (0, serialize_1.serialize)([\n            rawHeader,\n            txs,\n            [],\n            totalDifficulty,\n            extraTxs\n        ]);\n        // make a new block, but pass `null` so it doesn't do the extra\n        // deserialization work since we already have everything in a deserialized\n        // state here. We'll just set it ourselves by reaching into the \"_private\"\n        // fields.\n        const block = new block_1.Block(null, \n        // TODO(hack)!\n        transactions.length > 0 ? transactions[0].common : null);\n        block._raw = rawHeader;\n        block._rawTransactions = txs;\n        block.header = makeHeader(rawHeader, totalDifficulty);\n        block.serializeBaseFeePerGas = rawHeader[15] === undefined;\n        block._rawTransactionMetaData = extraTxs;\n        block._size = size;\n        return {\n            block,\n            serialized,\n            storageKeys,\n            transactions\n        };\n    }\n}\nexports.RuntimeBlock = RuntimeBlock;\n//# sourceMappingURL=runtime-block.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serialize = void 0;\nconst rlp_1 = require(\"@ganache/rlp\");\nconst utils_1 = require(\"@ganache/utils\");\nfunction serialize(raw) {\n    const serializedStart = (0, rlp_1.encodeRange)(raw, 0, 3);\n    const serializedLength = serializedStart.length;\n    const ethereumRawBlockSize = (0, rlp_1.encodeLength)(serializedLength, 192).length;\n    const size = ethereumRawBlockSize + serializedLength;\n    const middle = (0, rlp_1.encodeRange)(raw, 3, 2);\n    const ending = (0, rlp_1.encode)((0, utils_1.uintToBuffer)(size));\n    return {\n        serialized: (0, rlp_1.digest)([serializedStart.output, middle.output, [ending]], serializedLength + middle.length + ending.length),\n        size\n    };\n}\nexports.serialize = serialize;\n//# sourceMappingURL=serialize.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=snapshots.js.map","\"use strict\";\n/*!\n * @ganache/ethereum\n *\n * @author David Murdoch <david@trufflesuite.com> (https://davidmurdoch.com)\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/connector\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _EthereumApi_getId, _EthereumApi_filters, _EthereumApi_subscriptions, _EthereumApi_options, _EthereumApi_blockchain, _EthereumApi_wallet;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//#region Imports\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst eth_sig_util_1 = require(\"eth-sig-util\");\nconst utils_1 = require(\"@ganache/utils\");\nconst wallet_1 = __importDefault(require(\"./wallet\"));\nconst gas_estimator_1 = __importDefault(require(\"./helpers/gas-estimator\"));\nconst assert_arg_length_1 = require(\"./helpers/assert-arg-length\");\nconst filter_parsing_1 = require(\"./helpers/filter-parsing\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst miner_1 = require(\"./miner/miner\");\nasync function autofillDefaultTransactionValues(tx, eth_estimateGas, eth_maxPriorityFeePerGas, transaction, blockchain, options) {\n    if (tx.gas.isNull()) {\n        const defaultLimit = options.miner.defaultTransactionGasLimit;\n        if (defaultLimit === utils_1.RPCQUANTITY_EMPTY) {\n            // if the default limit is `RPCQUANTITY_EMPTY` use a gas estimate\n            tx.gas = await eth_estimateGas(transaction, ethereum_utils_1.Tag.latest);\n        }\n        else {\n            tx.gas = defaultLimit;\n        }\n    }\n    if (\"gasPrice\" in tx && tx.gasPrice.isNull()) {\n        tx.gasPrice = options.miner.defaultGasPrice;\n    }\n    if (\"maxFeePerGas\" in tx && tx.maxFeePerGas.isNull()) {\n        const block = blockchain.blocks.latest;\n        tx.maxFeePerGas = utils_1.Quantity.from(ethereum_block_1.Block.calcNBlocksMaxBaseFee(3, block.header));\n    }\n    if (\"maxPriorityFeePerGas\" in tx && tx.maxPriorityFeePerGas.isNull()) {\n        tx.maxPriorityFeePerGas = await eth_maxPriorityFeePerGas();\n    }\n}\nconst version = process.env.VERSION || \"DEV\";\n//#endregion\n//#region Constants\nconst CLIENT_VERSION = `Ganache/v${version}/EthereumJS TestRPC/v${version}/ethereum-js`;\nconst PROTOCOL_VERSION = utils_1.Data.from(\"0x3f\");\nconst RPC_MODULES = {\n    eth: \"1.0\",\n    net: \"1.0\",\n    rpc: \"1.0\",\n    web3: \"1.0\",\n    evm: \"1.0\",\n    personal: \"1.0\"\n};\n//#endregion\n//#region helpers\n/**\n * Combines RuntimeErrors for a list of rejected or reverted transactions.\n * @param transactions Array of transactions with errors to assert.\n */\nfunction assertExceptionalTransactions(transactions) {\n    let baseError = null;\n    let errors;\n    const data = {};\n    transactions.forEach(transaction => {\n        if (transaction.execException) {\n            if (baseError) {\n                baseError = ethereum_utils_1.VM_EXCEPTIONS;\n                errors.push(`${transaction.hash.toString()}: ${transaction.execException}\\n`);\n                data[transaction.execException.data.hash] =\n                    transaction.execException.data;\n            }\n            else {\n                baseError = ethereum_utils_1.VM_EXCEPTION;\n                errors = [transaction.execException.message];\n                data[transaction.execException.data.hash] =\n                    transaction.execException.data;\n            }\n        }\n    });\n    if (baseError) {\n        const err = new Error(baseError + errors.join(\"\\n\"));\n        err.data = data;\n        throw err;\n    }\n}\n//#endregion helpers\nclass EthereumApi {\n    /**\n     * This is the Ethereum API that the provider interacts with.\n     * The only methods permitted on the prototype are the supported json-rpc\n     * methods.\n     * @param options -\n     * @param wallet -\n     * @param emitter -\n     */\n    constructor(options, wallet, blockchain) {\n        _EthereumApi_getId.set(this, (id => () => utils_1.Quantity.from(++id))(0));\n        _EthereumApi_filters.set(this, new Map());\n        _EthereumApi_subscriptions.set(this, new Map());\n        _EthereumApi_options.set(this, void 0);\n        _EthereumApi_blockchain.set(this, void 0);\n        _EthereumApi_wallet.set(this, void 0);\n        __classPrivateFieldSet(this, _EthereumApi_options, options, \"f\");\n        __classPrivateFieldSet(this, _EthereumApi_wallet, wallet, \"f\");\n        __classPrivateFieldSet(this, _EthereumApi_blockchain, blockchain, \"f\");\n    }\n    //#region db\n    /**\n     * Stores a string in the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @param value - String to store.\n     * @returns returns true if the value was stored, otherwise false.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_putString\", [\"testDb\", \"testKey\", \"testValue\"] ));\n     * ```\n     */\n    async db_putString(dbName, key, value) {\n        return false;\n    }\n    /**\n     * Returns string from the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @returns The previously stored string.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_getString\", [\"testDb\", \"testKey\"] ));\n     * ```\n     */\n    async db_getString(dbName, key) {\n        return \"\";\n    }\n    /**\n     * Stores binary data in the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @param data - Data to store.\n     * @returns true if the value was stored, otherwise false.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_putHex\", [\"testDb\", \"testKey\", \"0x0\"] ));\n     * ```\n     */\n    async db_putHex(dbName, key, data) {\n        return false;\n    }\n    /**\n     * Returns binary data from the local database.\n     *\n     * @param dbName - Database name.\n     * @param key - Key name.\n     * @returns The previously stored data.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"db_getHex\", [\"testDb\", \"testKey\"] ));\n     * ```\n     */\n    async db_getHex(dbName, key) {\n        return \"0x00\";\n    }\n    //#endregion\n    //#region bzz\n    /**\n     * Returns the kademlia table in a readable table format.\n     * @returns Returns the kademlia table in a readable table format.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"bzz_hive\"));\n     * ```\n     */\n    async bzz_hive() {\n        return [];\n    }\n    /**\n     * Returns details about the swarm node.\n     * @returns Returns details about the swarm node.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"bzz_info\"));\n     * ```\n     */\n    async bzz_info() {\n        return [];\n    }\n    async evm_mine(arg) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const options = __classPrivateFieldGet(this, _EthereumApi_options, \"f\");\n        const vmErrorsOnRPCResponse = options.chain.vmErrorsOnRPCResponse;\n        // Since `typeof null === \"object\"` we have to guard against that\n        if (arg !== null && typeof arg === \"object\") {\n            let { blocks, timestamp } = arg;\n            if (blocks == null) {\n                blocks = 1;\n            }\n            const strictMiner = options.miner.instamine === \"strict\";\n            // TODO(perf): add an option to mine a bunch of blocks in a batch so\n            // we can save them all to the database in one go.\n            // Developers like to move the blockchain forward by thousands of blocks\n            // at a time and doing this would make it way faster\n            for (let i = 0; i < blocks; i++) {\n                const { transactions, blockNumber } = await blockchain.mine(miner_1.Capacity.FillBlock, timestamp, true);\n                if (strictMiner) {\n                    // in strict mode we have to wait until the blocks are fully saved\n                    // before mining the next ones, in eager mode they've already been\n                    // saved\n                    await new Promise(resolve => {\n                        const off = blockchain.on(\"block\", ({ header: { number } }) => {\n                            if (number.toBuffer().equals(blockNumber)) {\n                                off();\n                                resolve(void 0);\n                            }\n                        });\n                    });\n                }\n                if (vmErrorsOnRPCResponse) {\n                    assertExceptionalTransactions(transactions);\n                }\n            }\n        }\n        else {\n            const { transactions } = await blockchain.mine(miner_1.Capacity.FillBlock, arg, true);\n            if (vmErrorsOnRPCResponse) {\n                assertExceptionalTransactions(transactions);\n            }\n        }\n        return \"0x0\";\n    }\n    /**\n     * Sets the given account's nonce to the specified value. Mines a new block\n     * before returning.\n     *\n     * Warning: this will result in an invalid state tree.\n     *\n     * @param address - The account address to update.\n     * @param nonce - The nonce value to be set.\n     * @returns `true` if it worked, otherwise `false`.\n     * @example\n     * ```javascript\n     * const nonce = \"0x3e8\";\n     * const [address] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const result = await provider.send(\"evm_setAccountNonce\", [address, nonce] );\n     * console.log(result);\n     * ```\n     */\n    async evm_setAccountNonce(address, nonce) {\n        // TODO: the effect of this function could happen during a block mine operation, which would cause all sorts of\n        // issues. We need to figure out a good way of timing this.\n        const buffer = ethereum_address_1.Address.from(address).toBuffer();\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const stateManager = blockchain.vm.stateManager;\n        const account = await stateManager.getAccount({ buf: buffer });\n        account.nonce = {\n            toArrayLike: () => utils_1.Quantity.from(nonce).toBuffer()\n        };\n        await stateManager.putAccount({ buf: buffer }, account);\n        // TODO: do we need to mine a block here? The changes we're making really don't make any sense at all\n        // and produce an invalid trie going forward.\n        await blockchain.mine(miner_1.Capacity.Empty);\n        return true;\n    }\n    /**\n     * Jump forward in time by the given amount of time, in seconds.\n     * @param seconds - Number of seconds to jump forward in time by. Must be greater than or equal to `0`.\n     * @returns Returns the total time adjustment, in seconds.\n     * @example\n     * ```javascript\n     * const seconds = 10;\n     * const timeAdjustment = await provider.send(\"evm_increaseTime\", [seconds] );\n     * console.log(timeAdjustment);\n     * ```\n     */\n    async evm_increaseTime(seconds) {\n        const milliseconds = (typeof seconds === \"number\"\n            ? seconds\n            : utils_1.Quantity.from(seconds).toNumber()) * 1000;\n        return Math.floor(__classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").increaseTime(milliseconds) / 1000);\n    }\n    /**\n     * Sets the internal clock time to the given timestamp.\n     *\n     * Warning: This will allow you to move *backwards* in time, which may cause\n     * new blocks to appear to be mined before old blocks. This will result in\n     * an invalid state.\n     *\n     * @param time - JavaScript timestamp (millisecond precision).\n     * @returns The amount of *seconds* between the given timestamp and now.\n     * @example\n     * ```javascript\n     * const currentDate = Date.now();\n     * setTimeout(async () => {\n     *   const time = await provider.send(\"evm_setTime\", [currentDate] );\n     *   console.log(time); // should be about two seconds ago\n     * }, 1000);\n     * ```\n     */\n    async evm_setTime(time) {\n        let t;\n        switch (typeof time) {\n            case \"object\":\n                t = time.getTime();\n                break;\n            case \"number\":\n                t = time;\n                break;\n            default:\n                t = utils_1.Quantity.from(time).toNumber();\n                break;\n        }\n        return Math.floor(__classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").setTime(t) / 1000);\n    }\n    /**\n     * Revert the state of the blockchain to a previous snapshot. Takes a single\n     * parameter, which is the snapshot id to revert to. This deletes the given\n     * snapshot, as well as any snapshots taken after (e.g.: reverting to id 0x1\n     * will delete snapshots with ids 0x1, 0x2, etc.)\n     *\n     * @param snapshotId - The snapshot id to revert.\n     * @returns `true` if a snapshot was reverted, otherwise `false`.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.send(\"eth_accounts\");\n     * const startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from] ));\n     *\n     * // take a snapshot\n     * const snapshotId = await provider.send(\"evm_snapshot\");\n     *\n     * // send value to another account (over-simplified example)\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"] );\n     * await provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}] );\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * // ensure balance has updated\n     * const newBalance = await provider.send(\"eth_getBalance\", [from] );\n     * assert(BigInt(newBalance) < startingBalance);\n     *\n     * // revert the snapshot\n     * const isReverted = await provider.send(\"evm_revert\", [snapshotId] );\n     * assert(isReverted);\n     * console.log({isReverted: isReverted});\n     *\n     * // ensure balance has reverted\n     * const endingBalance = await provider.send(\"eth_getBalance\", [from] );\n     * const isBalanceReverted = assert.strictEqual(BigInt(endingBalance), startingBalance);\n     * console.log({isBalanceReverted: isBalanceReverted});\n     * ```\n     */\n    async evm_revert(snapshotId) {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").revert(utils_1.Quantity.from(snapshotId));\n    }\n    /**\n     * Snapshot the state of the blockchain at the current block. Takes no\n     * parameters. Returns the id of the snapshot that was created. A snapshot can\n     * only be reverted once. After a successful `evm_revert`, the same snapshot\n     * id cannot be used again. Consider creating a new snapshot after each\n     * `evm_revert` if you need to revert to the same point multiple times.\n     *\n     * @returns The hex-encoded identifier for this snapshot.\n     *\n     * @example\n     * ```javascript\n     * const provider = ganache.provider();\n     * const [from, to] = await provider.send(\"eth_accounts\");\n     * const startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from] ));\n     *\n     * // take a snapshot\n     * const snapshotId = await provider.send(\"evm_snapshot\");\n     *\n     * // send value to another account (over-simplified example)\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"] );\n     * await provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}] );\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * // ensure balance has updated\n     * const newBalance = await provider.send(\"eth_getBalance\", [from] );\n     * assert(BigInt(newBalance) < startingBalance);\n     *\n     * // revert the snapshot\n     * const isReverted = await provider.send(\"evm_revert\", [snapshotId] );\n     * assert(isReverted);\n     *\n     * // ensure balance has reverted\n     * const endingBalance = await provider.send(\"eth_getBalance\", [from] );\n     * const isBalanceReverted = assert.strictEqual(BigInt(endingBalance), startingBalance);\n     * console.log({isBalanceReverted: isBalanceReverted});\n     * ```\n     */\n    async evm_snapshot() {\n        return utils_1.Quantity.from(__classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").snapshot());\n    }\n    /**\n     * Adds any arbitrary account to the `personal` namespace.\n     *\n     * Note: accounts already known to the `personal` namespace and accounts\n     * returned by `eth_accounts` cannot be re-added using this method.\n     * @param address - The address of the account to add to the `personal`\n     * namespace.\n     * @param passphrase - The passphrase used to encrypt the account's private key.\n     * NOTE: this passphrase will be needed for all `personal` namespace calls\n     * that require a password.\n     * @returns `true` if  the account was successfully added. `false` if the\n     * account is already in the `personal` namespace.\n     * @example\n     * ```javascript\n     * const address = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\";\n     * const passphrase = \"passphrase\"\n     * const result = await provider.send(\"evm_addAccount\", [address, passphrase] );\n     * console.log(result);\n     * ```\n     */\n    async evm_addAccount(address, passphrase) {\n        const addy = new ethereum_address_1.Address(address);\n        return __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").addUnknownAccount(addy, passphrase);\n    }\n    /**\n     * Removes an account from the `personal` namespace.\n     *\n     * Note: accounts not known to the `personal` namespace cannot be removed\n     * using this method.\n     * @param address - The address of the account to remove from the `personal`\n     * namespace.\n     * @param passphrase - The passphrase used to decrypt the account's private key.\n     * @returns `true` if the account was successfully removed. `false` if the\n     * account was not in the `personal` namespace.\n     * @example\n     * ```javascript\n     * const [address] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const passphrase = \"passphrase\"\n     * const result = await provider.send(\"evm_removeAccount\", [address, passphrase] );\n     * console.log(result);\n     * ```\n     */\n    async evm_removeAccount(address, passphrase) {\n        const addy = new ethereum_address_1.Address(address);\n        return __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").removeKnownAccount(addy, passphrase);\n    }\n    //#endregion evm\n    //#region miner\n    /**\n     * Resume the CPU mining process with the given number of threads.\n     *\n     * Note: `threads` is ignored.\n     * @param threads - Number of threads to resume the CPU mining process with.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * await provider.send(\"miner_stop\");\n     * // check that eth_mining returns false\n     * console.log(await provider.send(\"eth_mining\"));\n     * await provider.send(\"miner_start\");\n     * // check that eth_mining returns true\n     * console.log(await provider.send(\"eth_mining\"));\n     * ```\n     */\n    async miner_start(threads = 1) {\n        if (__classPrivateFieldGet(this, _EthereumApi_options, \"f\").miner.instamine === \"eager\") {\n            const resumption = await __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").resume(threads);\n            // resumption can be undefined if the blockchain isn't currently paused\n            if (resumption &&\n                resumption.transactions != null &&\n                __classPrivateFieldGet(this, _EthereumApi_options, \"f\").chain.vmErrorsOnRPCResponse) {\n                assertExceptionalTransactions(resumption.transactions);\n            }\n        }\n        else {\n            __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").resume(threads);\n        }\n        return true;\n    }\n    /**\n     * Stop the CPU mining operation.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * // check that eth_mining returns true\n     * console.log(await provider.send(\"eth_mining\"));\n     * await provider.send(\"miner_stop\");\n     * // check that eth_mining returns false\n     * console.log(await provider.send(\"eth_mining\"));\n     * ```\n     */\n    async miner_stop() {\n        __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").pause();\n        return true;\n    }\n    /**\n     * Sets the default accepted gas price when mining transactions.\n     * Any transactions that don't specify a gas price will use this amount.\n     * Transactions that are below this limit are excluded from the mining process.\n     * @param number - Default accepted gas price.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"miner_setGasPrice\", [300000] ));\n     * ```\n     */\n    async miner_setGasPrice(number) {\n        __classPrivateFieldGet(this, _EthereumApi_options, \"f\").miner.defaultGasPrice = utils_1.Quantity.from(number);\n        return true;\n    }\n    /**\n     * Sets the etherbase, where mining rewards will go.\n     * @param address - The address where the mining rewards will go.\n     * @returns `true`.\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * console.log(await provider.send(\"miner_setEtherbase\", [account] ));\n     * ```\n     */\n    async miner_setEtherbase(address) {\n        __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").coinbase = ethereum_address_1.Address.from(address);\n        return true;\n    }\n    /**\n     * Set the extraData block header field a miner can include.\n     * @param extra - The `extraData` to include.\n     * @returns If successfully set returns `true`, otherwise returns an error.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"miner_setExtra\", [\"0x0\"] ));\n     * ```\n     */\n    async miner_setExtra(extra) {\n        const bytes = utils_1.Data.from(extra);\n        const length = bytes.toBuffer().length;\n        if (length > 32) {\n            throw new Error(`extra exceeds max length. ${length} > 32`);\n        }\n        __classPrivateFieldGet(this, _EthereumApi_options, \"f\").miner.extraData = bytes;\n        return true;\n    }\n    //#endregion\n    //#region web3\n    /**\n     * Returns the current client version.\n     * @returns The current client version.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"web3_clientVersion\"));\n     * ```\n     */\n    async web3_clientVersion() {\n        return CLIENT_VERSION;\n    }\n    /**\n     * Returns Keccak-256 (not the standardized SHA3-256) of the given data.\n     * @param data - the data to convert into a SHA3 hash.\n     * @returns The SHA3 result of the given string.\n     * @example\n     * ```javascript\n     * const data = \"hello trufflers\";\n     * const sha3 = await provider.send(\"web3_sha3\", [data] );\n     * console.log(sha3);\n     * ```\n     */\n    async web3_sha3(data) {\n        return utils_1.Data.from((0, utils_1.keccak)(utils_1.Data.from(data).toBuffer()));\n    }\n    //#endregion\n    //#region net\n    /**\n     * Returns the current network id.\n     * @returns The current network id. This value should NOT be JSON-RPC\n     * Quantity/Data encoded.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"net_version\"));\n     * ```\n     */\n    async net_version() {\n        return __classPrivateFieldGet(this, _EthereumApi_options, \"f\").chain.networkId.toString();\n    }\n    /**\n     * Returns `true` if client is actively listening for network connections.\n     * @returns `true` when listening, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"net_listening\"));\n     * ```\n     */\n    async net_listening() {\n        return true;\n    }\n    /**\n     * Returns number of peers currently connected to the client.\n     * @returns Number of connected peers.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"net_peerCount\"));\n     * ```\n     */\n    async net_peerCount() {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    //#endregion\n    //#region eth\n    // TODO: example doesn't return correct value\n    /**\n     * Generates and returns an estimate of how much gas is necessary to allow the\n     * transaction to complete. The transaction will not be added to the\n     * blockchain. Note that the estimate may be significantly more than the\n     * amount of gas actually used by the transaction, for a variety of reasons\n     * including EVM mechanics and node performance.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @param blockNumber - Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     *\n     * @returns The amount of gas used.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const gasEstimate = await provider.request({ method: \"eth_estimateGas\", params: [{ from, to }, \"latest\" ] });\n     * console.log(gasEstimate);\n     * ```\n     */\n    async eth_estimateGas(transaction, blockNumber = ethereum_utils_1.Tag.latest) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const blocks = blockchain.blocks;\n        const parentBlock = await blocks.get(blockNumber);\n        const parentHeader = parentBlock.header;\n        const options = __classPrivateFieldGet(this, _EthereumApi_options, \"f\");\n        const generateVM = () => {\n            return blockchain.vm.copy();\n        };\n        return new Promise((resolve, reject) => {\n            const { coinbase } = blockchain;\n            const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n            if (tx.from == null) {\n                tx.from = coinbase;\n            }\n            if (tx.gas.isNull()) {\n                // eth_estimateGas isn't subject to regular transaction gas limits\n                tx.gas = options.miner.callGasLimit;\n            }\n            const block = new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from((parentHeader.number.toBigInt() || 0n) + 1n), parentHeader.parentHash, parentHeader.miner, tx.gas.toBuffer(), parentHeader.gasUsed.toBuffer(), parentHeader.timestamp, options.miner.difficulty, parentHeader.totalDifficulty, 0n // no baseFeePerGas for estimates\n            );\n            const runArgs = {\n                tx: tx.toVmTransaction(),\n                block,\n                skipBalance: true,\n                skipNonce: true\n            };\n            (0, gas_estimator_1.default)(generateVM, runArgs, (err, result) => {\n                if (err)\n                    return reject(err);\n                resolve(utils_1.Quantity.from(result.gasEstimate.toArrayLike(Buffer)));\n            });\n        });\n    }\n    /**\n     * Returns the current ethereum protocol version.\n     * @returns The current ethereum protocol version.\n     * @example\n     * ```javascript\n     * const version = await provider.request({ method: \"eth_protocolVersion\", params: [] });\n     * console.log(version);\n     * ```\n     */\n    async eth_protocolVersion() {\n        return PROTOCOL_VERSION;\n    }\n    /**\n     * Returns an object containing data about the sync status or `false` when not syncing.\n     *\n     * @returns An object with sync status data or `false`, when not syncing.\n     *\n     * * `startingBlock`: \\{bigint\\} The block at which the import started (will\n     *     only be reset, after the sync reached his head).\n     * * `currentBlock`: \\{bigint\\} The current block, same as `eth_blockNumber`.\n     * * `highestBlock`: \\{bigint\\} The estimated highest block.\n     *\n     * @example\n     * ```javascript\n     * const result = await provider.request({ method: \"eth_syncing\", params: [] });\n     * console.log(result);\n     * ```\n     */\n    async eth_syncing() {\n        return false;\n    }\n    /**\n     * Returns the client coinbase address.\n     * @returns The current coinbase address.\n     * @example\n     * ```javascript\n     * const coinbaseAddress = await provider.request({ method: \"eth_coinbase\" });\n     * console.log(coinbaseAddress);\n     * ```\n     */\n    async eth_coinbase() {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").coinbase;\n    }\n    /**\n     * Returns information about a block by block number.\n     * @param number - Integer of a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the\n     * default block parameter.\n     * @param transactions - If `true` it returns the full transaction objects, if `false` only the hashes of the\n     * transactions.\n     * @returns The block, `null` if the block doesn't exist.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * const block = await provider.request({ method: \"eth_getBlockByNumber\", params: [\"0x0\", false] });\n     * console.log(block);\n     * ```\n     */\n    async eth_getBlockByNumber(number, transactions = false) {\n        const block = await __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").blocks\n            .get(number)\n            .catch(_ => null);\n        return block ? block.toJSON(transactions) : null;\n    }\n    /**\n     * Returns information about a block by block hash.\n     * @param hash - Hash of a block.\n     * @param transactions - If `true` it returns the full transaction objects, if `false` only the hashes of the\n     * transactions.\n     * @returns The block, `null` if the block doesn't exist.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const block = await provider.request({ method: \"eth_getBlockByHash\", params: [txReceipt.blockHash, true] });\n     * console.log(block);\n     * ```\n     */\n    async eth_getBlockByHash(hash, transactions = false) {\n        const block = await __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").blocks\n            .getByHash(hash)\n            .catch(_ => null);\n        return block ? block.toJSON(transactions) : null;\n    }\n    /**\n     * Returns the number of transactions in a block from a block matching the given block number.\n     * @param number - Integer of a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the\n     * default block parameter.\n     * @returns Integer of the number of transactions in the block.\n     * @example\n     * ```javascript\n     * const txCount = await provider.request({ method: \"eth_getBlockTransactionCountByNumber\", params: [\"0x0\"] });\n     * console.log(txCount);\n     * ```\n     */\n    async eth_getBlockTransactionCountByNumber(blockNumber) {\n        const { blocks } = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const blockNum = blocks.getEffectiveNumber(blockNumber);\n        const rawBlock = await blocks.getRawByBlockNumber(blockNum);\n        if (!rawBlock)\n            return null;\n        const [, rawTransactions] = (0, rlp_1.decode)(rawBlock);\n        return utils_1.Quantity.from(rawTransactions.length);\n    }\n    /**\n     * Returns the number of transactions in a block from a block matching the given block hash.\n     * @param hash - Hash of a block.\n     * @returns Number of transactions in the block.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const txCount = await provider.request({ method: \"eth_getBlockTransactionCountByHash\", params: [txReceipt.blockHash] });\n     * console.log(txCount);\n     * ```\n     */\n    async eth_getBlockTransactionCountByHash(hash) {\n        const { blocks } = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const blockNum = await blocks.getNumberFromHash(hash);\n        if (!blockNum)\n            return null;\n        const rawBlock = await blocks.getRawByBlockNumber(utils_1.Quantity.from(blockNum));\n        if (!rawBlock)\n            return null;\n        const [, rawTransactions] = (0, rlp_1.decode)(rawBlock);\n        return utils_1.Quantity.from(rawTransactions.length);\n    }\n    /**\n     * Returns a list of available compilers.\n     * @returns List of available compilers.\n     * @example\n     * ```javascript\n     * const compilers = await provider.send(\"eth_getCompilers\");\n     * console.log(compilers);\n     * ```\n     */\n    async eth_getCompilers() {\n        return [];\n    }\n    /**\n     * Returns information about a transaction by block hash and transaction index position.\n     * @param hash - Hash of a block.\n     * @param index - Integer of the transaction index position.\n     * @returns The transaction object or `null` if no transaction was found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - The transaction hash.\n     * * `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n     * * `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n     * * `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n     * * `value`: `QUANTITY` - The value transferred in wei.\n     * * `gas`: `QUANTITY` - The gas provided by the sender.\n     * * `gasPrice`: `QUANTITY` - The price of gas in wei.\n     * * `input`: `DATA` - The data sent along with the transaction.\n     * * `v`: `QUANTITY` - ECDSA recovery id.\n     * * `r`: `DATA`, 32 Bytes - ECDSA signature r.\n     * * `s`: `DATA`, 32 Bytes - ECDSA signature s.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const { blockHash, transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     *\n     * const tx = await provider.request({ method: \"eth_getTransactionByBlockHashAndIndex\", params: [ blockHash, transactionIndex ] });\n     * console.log(tx);\n     * ```\n     */\n    async eth_getTransactionByBlockHashAndIndex(hash, index) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const block = await blockchain.blocks\n            .getByHash(hash)\n            .catch(_ => null);\n        if (!block)\n            return null;\n        const transactions = block.getTransactions();\n        return transactions[parseInt(utils_1.Quantity.from(index).toString(), 10)].toJSON(blockchain.common);\n    }\n    /**\n     * Returns information about a transaction by block number and transaction index position.\n     * @param number - A block number, or the string \"earliest\", \"latest\" or \"pending\".\n     * @param index - Integer of the transaction index position.\n     * @returns The transaction object or `null` if no transaction was found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - The transaction hash.\n     * * `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n     * * `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n     * * `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n     * * `value`: `QUANTITY` - The value transferred in wei.\n     * * `gas`: `QUANTITY` - The gas provided by the sender.\n     * * `gasPrice`: `QUANTITY` - The price of gas in wei.\n     * * `input`: `DATA` - The data sent along with the transaction.\n     * * `v`: `QUANTITY` - ECDSA recovery id.\n     * * `r`: `DATA`, 32 Bytes - ECDSA signature r.\n     * * `s`: `DATA`, 32 Bytes - ECDSA signature s.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const { transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     *\n     * const tx = await provider.request({ method: \"eth_getTransactionByBlockNumberAndIndex\", params: [ \"latest\", transactionIndex ] });\n     * console.log(tx);\n     * ```\n     */\n    async eth_getTransactionByBlockNumberAndIndex(number, index) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const block = await blockchain.blocks.get(number).catch(_ => null);\n        if (!block)\n            return null;\n        const transactions = block.getTransactions();\n        return transactions[parseInt(utils_1.Quantity.from(index).toString(), 10)].toJSON(blockchain.common);\n    }\n    /**\n     * Returns the number of uncles in a block from a block matching the given block hash.\n     * @param hash - Hash of a block.\n     * @returns The number of uncles in a block.\n     * @example\n     * ```javascript\n     * const blockHash = await provider.send(\"eth_getBlockByNumber\", [\"latest\"] );\n     * const uncleCount = await provider.send(\"eth_getUncleCountByBlockHash\", [blockHash] );\n     * console.log(uncleCount);\n     * ```\n     */\n    async eth_getUncleCountByBlockHash(hash) {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    /**\n     * Returns the number of uncles in a block from a block matching the given block hash.\n     * @param blockNumber - A block number, or the string \"earliest\", \"latest\" or \"pending\".\n     * @returns The number of uncles in a block.\n     * @example\n     * ```javascript\n     * const uncleCount = await provider.send(\"eth_getUncleCountByBlockNumber\", [\"latest\"] );\n     * console.log(uncleCount);\n     * ```\n     */\n    async eth_getUncleCountByBlockNumber(blockNumber) {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    /**\n     * Returns information about a uncle of a block by hash and uncle index position.\n     *\n     * @param hash - Hash of a block.\n     * @param index - The uncle's index position.\n     * @returns A block object or `null` when no block is found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * const blockHash = await provider.send(\"eth_getBlockByNumber\", [\"latest\"] );\n     * const block = await provider.send(\"eth_getUncleByBlockHashAndIndex\", [blockHash, \"0x0\"] );\n     * console.log(block);\n     * ```\n     */\n    async eth_getUncleByBlockHashAndIndex(hash, index) {\n        return null;\n    }\n    /**\n     * Returns information about a uncle of a block by hash and uncle index position.\n     *\n     * @param blockNumber - A block number, or the string \"earliest\", \"latest\" or \"pending\".\n     * @param uncleIndex - The uncle's index position.\n     * @returns A block object or `null` when no block is found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n     * * `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n     * * `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n     * * `miner`: `DATA`, 20 Bytes -  Address of the miner.\n     * * `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n     * * `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n     * * `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n     * * `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n     * * `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n     * * `number`: `QUANTITY` - The block number. `null` when pending.\n     * * `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n     * * `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n     * * `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n     * * `extraData`: `DATA` - Extra data for the block.\n     * * `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n     * * `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n     * * `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n     * * `size`: `QUANTITY` - Integer the size of the block in bytes.\n     * * `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n     * * `uncles`: `Array` - Array of uncle hashes.\n     *\n     * @example\n     * ```javascript\n     * const block = await provider.send(\"eth_getUncleByBlockNumberAndIndex\", [\"latest\", \"0x0\"] );\n     * console.log(block);\n     * ```\n     */\n    async eth_getUncleByBlockNumberAndIndex(blockNumber, uncleIndex) {\n        return null;\n    }\n    /**\n     * Returns: An Array with the following elements\n     * 1: `DATA`, 32 Bytes - current block header pow-hash\n     * 2: `DATA`, 32 Bytes - the seed hash used for the DAG.\n     * 3: `DATA`, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n     *\n     * @param filterId - A filter id.\n     * @returns The hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"eth_getWork\", [\"0x0\"] ));\n     * ```\n     */\n    async eth_getWork(filterId) {\n        return [];\n    }\n    /**\n     * Used for submitting a proof-of-work solution.\n     *\n     * @param nonce - The nonce found (64 bits).\n     * @param powHash - The header's pow-hash (256 bits).\n     * @param digest - The mix digest (256 bits).\n     * @returns `true` if the provided solution is valid, otherwise `false`.\n     * @example\n     * ```javascript\n     * const nonce = \"0xe0df4bd14ab39a71\";\n     * const powHash = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n     * const digest = \"0xb2222a74119abd18dbcb7d1f661c6578b7bbeb4984c50e66ed538347f606b971\";\n     * const result = await provider.request({ method: \"eth_submitWork\", params: [nonce, powHash, digest] });\n     * console.log(result);\n     * ```\n     */\n    async eth_submitWork(nonce, powHash, digest) {\n        return false;\n    }\n    /**\n     * Used for submitting mining hashrate.\n     *\n     * @param hashRate - A hexadecimal string representation (32 bytes) of the hash rate.\n     * @param clientID - A random hexadecimal(32 bytes) ID identifying the client.\n     * @returns `true` if submitting went through succesfully and `false` otherwise.\n     * @example\n     * ```javascript\n     * const hashRate = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n     * const clientId = \"0xb2222a74119abd18dbcb7d1f661c6578b7bbeb4984c50e66ed538347f606b971\";\n     * const result = await provider.request({ method: \"eth_submitHashrate\", params: [hashRate, clientId] });\n     * console.log(result);\n     * ```\n     */\n    async eth_submitHashrate(hashRate, clientID) {\n        return false;\n    }\n    /**\n     * Returns `true` if client is actively mining new blocks.\n     * @returns returns `true` if the client is mining, otherwise `false`.\n     * @example\n     * ```javascript\n     * const isMining = await provider.request({ method: \"eth_mining\", params: [] });\n     * console.log(isMining);\n     * ```\n     */\n    async eth_mining() {\n        // we return the blockchain's started state\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").isStarted();\n    }\n    /**\n     * Returns the number of hashes per second that the node is mining with.\n     * @returns Number of hashes per second.\n     * @example\n     * ```javascript\n     * const hashrate = await provider.request({ method: \"eth_hashrate\", params: [] });\n     * console.log(hashrate);\n     * ```\n     */\n    async eth_hashrate() {\n        return utils_1.RPCQUANTITY_ZERO;\n    }\n    /**\n     * Returns the current price per gas in wei.\n     * @returns Integer of the current gas price in wei.\n     * @example\n     * ```javascript\n     * const gasPrice = await provider.request({ method: \"eth_gasPrice\", params: [] });\n     * console.log(gasPrice);\n     * ```\n     */\n    async eth_gasPrice() {\n        return __classPrivateFieldGet(this, _EthereumApi_options, \"f\").miner.defaultGasPrice;\n    }\n    /**\n     * Returns a `maxPriorityFeePerGas` value suitable for quick transaction inclusion.\n     * @returns The maxPriorityFeePerGas in wei.\n     * @example\n     * ```javascript\n     * const suggestedTip = await provider.request({ method: \"eth_maxPriorityFeePerGas\", params: [] });\n     * console.log(suggestedTip);\n     * ```\n     */\n    async eth_maxPriorityFeePerGas() {\n        return utils_1.RPCQUANTITY_GWEI;\n    }\n    /**\n     * Returns a list of addresses owned by client.\n     * @returns Array of 20 Bytes - addresses owned by the client.\n     * @example\n     * ```javascript\n     * const accounts = await provider.request({ method: \"eth_accounts\", params: [] });\n     * console.log(accounts);\n     * ```\n     */\n    async eth_accounts() {\n        return __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").addresses;\n    }\n    /**\n     * Returns the number of the most recent block.\n     * @returns The current block number the client is on.\n     * @example\n     * ```javascript\n     * const blockNumber = await provider.request({ method: \"eth_blockNumber\" });\n     * console.log(blockNumber);\n     * ```\n     */\n    async eth_blockNumber() {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").blocks.latest.header.number;\n    }\n    /**\n     * Returns the currently configured chain id, a value used in\n     * replay-protected transaction signing as introduced by EIP-155.\n     * @returns The chain id as a string.\n     * @EIP [155 – Simple replay attack protection](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md)\n     *\n     * @example\n     * ```javascript\n     * const chainId = await provider.send(\"eth_chainId\");\n     * console.log(chainId);\n     * ```\n     */\n    async eth_chainId() {\n        return utils_1.Quantity.from(__classPrivateFieldGet(this, _EthereumApi_options, \"f\").chain.chainId);\n    }\n    /**\n     * Returns the balance of the account of given address.\n     * @param address - Address to check for balance.\n     * @param blockNumber - Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     *\n     * @returns Integer of the account balance in wei.\n     *\n     * @example\n     * ```javascript\n     * const accounts = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const balance = await provider.request({ method: \"eth_getBalance\", params: [accounts[0], \"latest\"] });\n     * console.log(balance);\n     * ```\n     */\n    async eth_getBalance(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").accounts.getBalance(ethereum_address_1.Address.from(address), blockNumber);\n    }\n    /**\n     * Returns code at a given address.\n     *\n     * @param address - Address.\n     * @param blockNumber - Integer block number, or the string \"latest\", \"earliest\" or \"pending\".\n     * @returns The code from the given address.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const code = await provider.request({ method: \"eth_getCode\", params: [txReceipt.contractAddress, \"latest\"] });\n     * console.log(code);\n     * ```\n     */\n    async eth_getCode(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        const { accounts } = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        return accounts.getCode(ethereum_address_1.Address.from(address), blockNumber);\n    }\n    /**\n     * Returns the value from a storage position at a given address.\n     * @param address - Address of the storage.\n     * @param position - Integer of the position in the storage.\n     * @param blockNumber - Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     * @returns The value in storage at the requested position.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const storageValue = await provider.request({ method: \"eth_getStorageAt\", params: [txReceipt.contractAddress, \"0x0\", \"latest\"] });\n     * console.log(storageValue);\n     * ```\n     */\n    async eth_getStorageAt(address, position, blockNumber = ethereum_utils_1.Tag.latest) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const blockNum = blockchain.blocks.getEffectiveNumber(blockNumber);\n        const block = await blockchain.blocks.getRawByBlockNumber(blockNum);\n        if (!block)\n            throw new Error(\"header not found\");\n        const [[, , , blockStateRoot]] = (0, rlp_1.decode)(block);\n        const trie = blockchain.trie.copy(false);\n        trie.setContext(blockStateRoot, null, blockNum);\n        const posBuff = utils_1.Quantity.from(position).toBuffer();\n        const length = posBuff.length;\n        let paddedPosBuff;\n        if (length < 32) {\n            // storage locations are 32 bytes wide, so we need to expand any value\n            // given to 32 bytes.\n            paddedPosBuff = Buffer.allocUnsafe(32).fill(0);\n            posBuff.copy(paddedPosBuff, 32 - length);\n        }\n        else if (length === 32) {\n            paddedPosBuff = posBuff;\n        }\n        else {\n            // if the position value we're passed is > 32 bytes, truncate it. This is\n            // what geth does.\n            paddedPosBuff = posBuff.slice(-32);\n        }\n        const addressBuf = ethereum_address_1.Address.from(address).toBuffer();\n        const addressData = await trie.get(addressBuf);\n        // An address's stateRoot is stored in the 3rd rlp entry\n        const addressStateRoot = (0, rlp_1.decode)(addressData)[2];\n        trie.setContext(addressStateRoot, addressBuf, blockNum);\n        const value = await trie.get(paddedPosBuff);\n        return utils_1.Data.from((0, rlp_1.decode)(value));\n    }\n    /**\n     * Returns the information about a transaction requested by transaction hash.\n     *\n     * @param transactionHash - Hash of a transaction.\n     * @returns The transaction object or `null` if no transaction was found.\n     *\n     * * `hash`: `DATA`, 32 Bytes - The transaction hash.\n     * * `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n     * * `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n     * * `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n     * * `value`: `QUANTITY` - The value transferred in wei.\n     * * `gas`: `QUANTITY` - The gas provided by the sender.\n     * * `gasPrice`: `QUANTITY` - The price of gas in wei.\n     * * `input`: `DATA` - The data sent along with the transaction.\n     * * `v`: `QUANTITY` - ECDSA recovery id.\n     * * `r`: `DATA`, 32 Bytes - ECDSA signature r.\n     * * `s`: `DATA`, 32 Bytes - ECDSA signature s.\n     *\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const tx = await provider.request({ method: \"eth_getTransactionByHash\", params: [ txHash ] });\n     * console.log(tx);\n     * ```\n     */\n    async eth_getTransactionByHash(transactionHash) {\n        const { transactions } = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const hashBuffer = utils_1.Data.from(transactionHash).toBuffer();\n        // we must check the database before checking the pending cache, because the\n        // cache is updated _after_ the transaction is already in the database, and\n        // the database contains block info whereas the pending cache doesn't.\n        const transaction = await transactions.get(hashBuffer);\n        if (transaction === null) {\n            // if we can't find it in the list of pending transactions, check the db!\n            const tx = transactions.transactionPool.find(hashBuffer);\n            return tx ? tx.toJSON(__classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").common) : null;\n        }\n        else {\n            return transaction.toJSON(__classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").common);\n        }\n    }\n    /**\n     * Returns the receipt of a transaction by transaction hash.\n     *\n     * Note: The receipt is not available for pending transactions.\n     *\n     * @param transactionHash - Hash of a transaction.\n     * @returns Returns the receipt of a transaction by transaction hash.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [ txHash ] });\n     * console.log(txReceipt);\n     * ```\n     */\n    async eth_getTransactionReceipt(transactionHash) {\n        const { transactions, transactionReceipts, blocks, common } = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const dataHash = utils_1.Data.from(transactionHash);\n        const txHash = dataHash.toBuffer();\n        const transactionPromise = transactions.get(txHash);\n        const receiptPromise = transactionReceipts.get(txHash);\n        const blockPromise = transactionPromise.then(t => t ? blocks.get(t.blockNumber.toBuffer()) : null);\n        const [transaction, receipt, block] = await Promise.all([\n            transactionPromise,\n            receiptPromise,\n            blockPromise\n        ]);\n        if (transaction) {\n            return receipt.toJSON(block, transaction, common);\n        }\n        // if we are performing \"strict\" instamining, then check to see if the\n        // transaction is pending so as to warn about the v7 instamine changes\n        const options = __classPrivateFieldGet(this, _EthereumApi_options, \"f\");\n        if (options.miner.blockTime <= 0 &&\n            options.miner.instamine === \"strict\" &&\n            __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").isStarted()) {\n            const tx = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").transactions.transactionPool.find(txHash);\n            if (tx != null) {\n                options.logging.logger.log(\" > Ganache `eth_getTransactionReceipt` notice: the transaction with hash\\n\" +\n                    ` > \\`${dataHash.toString()}\\` has not\\n` +\n                    \" > yet been mined.\" +\n                    \" See https://trfl.io/v7-instamine for additional information.\");\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates new message call transaction or a contract creation, if the data field contains code.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @returns The transaction hash.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * console.log(txHash);\n     * ```\n     */\n    async eth_sendTransaction(transaction) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        if (tx.from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const fromString = tx.from.toString();\n        const wallet = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\");\n        const isKnownAccount = wallet.knownAccounts.has(fromString);\n        const privateKey = wallet.unlockedAccounts.get(fromString);\n        if (privateKey === undefined) {\n            const msg = isKnownAccount\n                ? \"authentication needed: passphrase or unlock\"\n                : \"sender account not recognized\";\n            throw new Error(msg);\n        }\n        await autofillDefaultTransactionValues(tx, this.eth_estimateGas.bind(this), this.eth_maxPriorityFeePerGas, transaction, blockchain, __classPrivateFieldGet(this, _EthereumApi_options, \"f\"));\n        return blockchain.queueTransaction(tx, privateKey);\n    }\n    /**\n     * Signs a transaction that can be submitted to the network at a later time using `eth_sendRawTransaction`.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @returns The raw, signed transaction.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const signedTx = await provider.request({ method: \"eth_signTransaction\", params: [{ from, to }] });\n     * console.log(signedTx)\n     * ```\n     */\n    async eth_signTransaction(transaction) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        if (tx.from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const fromString = tx.from.toString();\n        const wallet = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\");\n        const isKnownAccount = wallet.knownAccounts.has(fromString);\n        const privateKey = wallet.unlockedAccounts.get(fromString);\n        if (privateKey === undefined) {\n            const msg = isKnownAccount\n                ? \"authentication needed: passphrase or unlock\"\n                : \"sender account not recognized\";\n            throw new Error(msg);\n        }\n        tx.signAndHash(privateKey.toBuffer());\n        return utils_1.Data.from(tx.serialized).toString();\n    }\n    /**\n     * Creates new message call transaction or a contract creation for signed transactions.\n     * @param transaction - The signed transaction data.\n     * @returns The transaction hash.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const signedTx = await provider.request({ method: \"eth_signTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * const txHash = await provider.send(\"eth_sendRawTransaction\", [signedTx] );\n     * console.log(txHash);\n     * ```\n     */\n    async eth_sendRawTransaction(transaction) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const tx = ethereum_transaction_1.TransactionFactory.fromString(transaction, blockchain.common);\n        return blockchain.queueTransaction(tx);\n    }\n    /**\n     * The sign method calculates an Ethereum specific signature with:\n     * `sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + message.length + message)))`.\n     *\n     * By adding a prefix to the message makes the calculated signature\n     * recognizable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data\n     *  (e.g. transaction) and use the signature to impersonate the victim.\n     *\n     * Note the address to sign with must be unlocked.\n     *\n     * @param address - Address to sign with.\n     * @param message - Message to sign.\n     * @returns Signature - a hex encoded 129 byte array\n     * starting with `0x`. It encodes the `r`, `s`, and `v` parameters from\n     * appendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n     *  in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n     * 64...128 the `s` parameter, and the last byte the `v` parameter. Note\n     * that the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const msg = \"0x307866666666666666666666\";\n     * const signature = await provider.request({ method: \"eth_sign\", params: [account, msg] });\n     * console.log(signature);\n     * ```\n     */\n    async eth_sign(address, message) {\n        const account = ethereum_address_1.Address.from(address).toString().toLowerCase();\n        const privateKey = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").unlockedAccounts.get(account);\n        if (privateKey == null) {\n            throw new Error(\"cannot sign data; no private key\");\n        }\n        const messageHash = (0, ethereumjs_util_1.hashPersonalMessage)(utils_1.Data.from(message).toBuffer());\n        const { v, r, s } = (0, ethereumjs_util_1.ecsign)(messageHash, privateKey.toBuffer());\n        return (0, ethereumjs_util_1.toRpcSig)(v, r, s);\n    }\n    /**\n     * Identical to eth_signTypedData_v4.\n     *\n     * @param address - Address of the account that will sign the messages.\n     * @param typedData - Typed structured data to be signed.\n     * @returns Signature. As in `eth_sign`, it is a hex encoded 129 byte array\n     * starting with `0x`. It encodes the `r`, `s`, and `v` parameters from\n     * appendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n     *  in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n     * 64...128 the `s` parameter, and the last byte the `v` parameter. Note\n     * that the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).\n     * @EIP [712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md)\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const typedData = {\n     *  types: {\n     *    EIP712Domain: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'version', type: 'string' },\n     *      { name: 'chainId', type: 'uint256' },\n     *      { name: 'verifyingContract', type: 'address' },\n     *    ],\n     *    Person: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'wallet', type: 'address' }\n     *    ],\n     *    Mail: [\n     *      { name: 'from', type: 'Person' },\n     *      { name: 'to', type: 'Person' },\n     *      { name: 'contents', type: 'string' }\n     *    ],\n     *  },\n     *  primaryType: 'Mail',\n     *  domain: {\n     *    name: 'Ether Mail',\n     *    version: '1',\n     *    chainId: 1,\n     *    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n     *  },\n     *  message: {\n     *    from: {\n     *      name: 'Cow',\n     *      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n     *    },\n     *    to: {\n     *      name: 'Bob',\n     *      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n     *    },\n     *    contents: 'Hello, Bob!',\n     *  },\n     * };\n     * const signature = await provider.request({ method: \"eth_signTypedData\", params: [account, typedData] });\n     * console.log(signature);\n     * ```\n     */\n    async eth_signTypedData(address, typedData) {\n        return this.eth_signTypedData_v4(address, typedData);\n    }\n    /**\n     *\n     * @param address - Address of the account that will sign the messages.\n     * @param typedData - Typed structured data to be signed.\n     * @returns Signature. As in `eth_sign`, it is a hex encoded 129 byte array\n     * starting with `0x`. It encodes the `r`, `s`, and `v` parameters from\n     * appendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n     *  in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n     * 64...128 the `s` parameter, and the last byte the `v` parameter. Note\n     * that the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).\n     * @EIP [712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md)\n     * @example\n     * ```javascript\n     * const [account] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const typedData = {\n     *  types: {\n     *    EIP712Domain: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'version', type: 'string' },\n     *      { name: 'chainId', type: 'uint256' },\n     *      { name: 'verifyingContract', type: 'address' },\n     *    ],\n     *    Person: [\n     *      { name: 'name', type: 'string' },\n     *      { name: 'wallet', type: 'address' }\n     *    ],\n     *    Mail: [\n     *      { name: 'from', type: 'Person' },\n     *      { name: 'to', type: 'Person' },\n     *      { name: 'contents', type: 'string' }\n     *    ],\n     *  },\n     *  primaryType: 'Mail',\n     *  domain: {\n     *    name: 'Ether Mail',\n     *    version: '1',\n     *    chainId: 1,\n     *    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n     *  },\n     *  message: {\n     *    from: {\n     *      name: 'Cow',\n     *      wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n     *    },\n     *    to: {\n     *      name: 'Bob',\n     *      wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n     *    },\n     *    contents: 'Hello, Bob!',\n     *  },\n     * };\n     * const signature = await provider.request({ method: \"eth_signTypedData_v4\", params: [account, typedData] });\n     * console.log(signature);\n     * ```\n     */\n    async eth_signTypedData_v4(address, typedData) {\n        const account = ethereum_address_1.Address.from(address).toString().toLowerCase();\n        const privateKey = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").unlockedAccounts.get(account);\n        if (privateKey == null) {\n            throw new Error(\"cannot sign data; no private key\");\n        }\n        if (typeof typedData === \"string\") {\n            throw new Error(\"cannot sign data; string sent, expected object\");\n        }\n        if (!typedData.types) {\n            throw new Error(\"cannot sign data; types missing\");\n        }\n        if (!typedData.types.EIP712Domain) {\n            throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n        }\n        if (!typedData.domain) {\n            throw new Error(\"cannot sign data; domain missing\");\n        }\n        if (!typedData.primaryType) {\n            throw new Error(\"cannot sign data; primaryType missing\");\n        }\n        if (!typedData.message) {\n            throw new Error(\"cannot sign data; message missing\");\n        }\n        return (0, eth_sig_util_1.signTypedData_v4)(privateKey.toBuffer(), { data: typedData });\n    }\n    eth_subscribe(subscriptionName, options) {\n        const subscriptions = __classPrivateFieldGet(this, _EthereumApi_subscriptions, \"f\");\n        switch (subscriptionName) {\n            case \"newHeads\": {\n                const subscription = __classPrivateFieldGet(this, _EthereumApi_getId, \"f\").call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                const unsubscribe = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").on(\"block\", (block) => {\n                    const value = block;\n                    const header = value.header;\n                    const result = {\n                        logsBloom: header.logsBloom,\n                        miner: header.miner,\n                        difficulty: header.difficulty,\n                        totalDifficulty: header.totalDifficulty,\n                        extraData: header.extraData,\n                        gasLimit: header.gasLimit,\n                        gasUsed: header.gasUsed,\n                        hash: block.hash(),\n                        mixHash: block.header.mixHash,\n                        nonce: header.nonce,\n                        number: header.number,\n                        parentHash: header.parentHash,\n                        receiptsRoot: header.receiptsRoot,\n                        stateRoot: header.stateRoot,\n                        timestamp: header.timestamp,\n                        transactionsRoot: header.transactionsRoot,\n                        sha3Uncles: header.sha3Uncles\n                    };\n                    if (header.baseFeePerGas !== undefined) {\n                        result.baseFeePerGas = header.baseFeePerGas;\n                    }\n                    // TODO: move the JSON stringification closer to where the message\n                    // is actually sent to the listener\n                    promiEvent.emit(\"message\", {\n                        type: \"eth_subscription\",\n                        data: {\n                            result: JSON.parse(JSON.stringify(result)),\n                            subscription: subscription.toString()\n                        }\n                    });\n                });\n                subscriptions.set(subscription.toString(), unsubscribe);\n                return promiEvent;\n            }\n            case \"logs\": {\n                const subscription = __classPrivateFieldGet(this, _EthereumApi_getId, \"f\").call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                const { addresses, topics } = options\n                    ? (0, filter_parsing_1.parseFilterDetails)(options)\n                    : { addresses: [], topics: [] };\n                const unsubscribe = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").on(\"blockLogs\", (blockLogs) => {\n                    for (const log of blockLogs.filter(addresses, topics)) {\n                        promiEvent.emit(\"message\", {\n                            type: \"eth_subscription\",\n                            data: {\n                                result: log,\n                                subscription: subscription.toString()\n                            }\n                        });\n                    }\n                });\n                subscriptions.set(subscription.toString(), unsubscribe);\n                return promiEvent;\n            }\n            case \"newPendingTransactions\": {\n                const subscription = __classPrivateFieldGet(this, _EthereumApi_getId, \"f\").call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                const unsubscribe = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").on(\"pendingTransaction\", (transaction) => {\n                    const result = transaction.hash.toString();\n                    promiEvent.emit(\"message\", {\n                        type: \"eth_subscription\",\n                        data: {\n                            result,\n                            subscription: subscription.toString()\n                        }\n                    });\n                });\n                subscriptions.set(subscription.toString(), unsubscribe);\n                return promiEvent;\n            }\n            case \"syncing\": {\n                // ganache doesn't sync, so doing nothing is perfectly valid.\n                const subscription = __classPrivateFieldGet(this, _EthereumApi_getId, \"f\").call(this);\n                const promiEvent = utils_1.PromiEvent.resolve(subscription);\n                __classPrivateFieldGet(this, _EthereumApi_subscriptions, \"f\").set(subscription.toString(), () => { });\n                return promiEvent;\n            }\n            default:\n                throw new ethereum_utils_1.CodedError(`no \\\"${subscriptionName}\\\" subscription in eth namespace`, utils_1.JsonRpcErrorCode.METHOD_NOT_FOUND);\n        }\n    }\n    /**\n     * Cancel a subscription to a particular event. Returns a boolean indicating\n     * if the subscription was successfully cancelled.\n     *\n     * @param subscriptionId - The ID of the subscription to unsubscribe to.\n     * @returns `true` if subscription was cancelled successfully, otherwise `false`.\n     * @example\n     * ```javascript\n     * const subscriptionId = await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const result = await provider.request({ method: \"eth_unsubscribe\", params: [subscriptionId] });\n     * console.log(result);\n     * ```\n     */\n    async eth_unsubscribe(subscriptionId) {\n        const subscriptions = __classPrivateFieldGet(this, _EthereumApi_subscriptions, \"f\");\n        const unsubscribe = subscriptions.get(subscriptionId);\n        if (unsubscribe) {\n            subscriptions.delete(subscriptionId);\n            unsubscribe();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Creates a filter in the node, to notify when a new block arrives. To check\n     * if the state has changed, call `eth_getFilterChanges`.\n     *\n     * @returns A filter id.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newBlockFilter\", params: [] });\n     * console.log(filterId);\n     * ```\n     */\n    async eth_newBlockFilter() {\n        const unsubscribe = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").on(\"block\", (block) => {\n            value.updates.push(block.hash());\n        });\n        const value = {\n            updates: [],\n            unsubscribe,\n            filter: null,\n            type: ethereum_utils_1.FilterTypes.block\n        };\n        const filterId = __classPrivateFieldGet(this, _EthereumApi_getId, \"f\").call(this);\n        __classPrivateFieldGet(this, _EthereumApi_filters, \"f\").set(filterId.toString(), value);\n        return filterId;\n    }\n    /**\n     * Creates a filter in the node, to notify when new pending transactions\n     * arrive. To check if the state has changed, call `eth_getFilterChanges`.\n     *\n     * @returns A filter id.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newPendingTransactionFilter\", params: [] });\n     * console.log(filterId);\n     * ```\n     */\n    async eth_newPendingTransactionFilter() {\n        const unsubscribe = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").on(\"pendingTransaction\", (transaction) => {\n            value.updates.push(transaction.hash);\n        });\n        const value = {\n            updates: [],\n            unsubscribe,\n            filter: null,\n            type: ethereum_utils_1.FilterTypes.pendingTransaction\n        };\n        const filterId = __classPrivateFieldGet(this, _EthereumApi_getId, \"f\").call(this);\n        __classPrivateFieldGet(this, _EthereumApi_filters, \"f\").set(filterId.toString(), value);\n        return filterId;\n    }\n    /**\n     * Creates a filter object, based on filter options, to notify when the state\n     * changes (logs). To check if the state has changed, call\n     * `eth_getFilterChanges`.\n     *\n     * If the from `fromBlock` or `toBlock` option are equal to \"latest\" the\n     * filter continually append logs for whatever block is seen as latest at the\n     * time the block was mined, not just for the block that was \"latest\" when the\n     * filter was created.\n     *\n     * ### A note on specifying topic filters:\n     * Topics are order-dependent. A transaction with a log with topics [A, B]\n     * will be matched by the following topic filters:\n     *  * `[]` “anything”\n     *  * `[A]` “A in first position (and anything after)”\n     *  * `[null, B]` “anything in first position AND B in second position (and\n     * anything after)”\n     *  * `[A, B]` “A in first position AND B in second position (and anything\n     * after)”\n     *  * `[[A, B], [A, B]]` “(A OR B) in first position AND (A OR B) in second\n     * position (and anything after)”\n     *\n     * Filter options:\n     * * `fromBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `toBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `address`: `DATA | Array` (optional) - Contract address or a list of addresses from which the logs should originate.\n     * * `topics`: `Array of DATA` (optional) - Array of 32 Bytes `DATA` topcis. Topics are order-dependent. Each topic can also\n     * be an array of `DATA` with \"or\" options.\n     *\n     * @param filter - The filter options as seen in source.\n     *\n     * @returns A filter id.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newFilter\", params: [] });\n     * console.log(filterId);\n     * ```\n     */\n    async eth_newFilter(filter) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        if (filter == null)\n            filter = {};\n        const { addresses, topics } = (0, filter_parsing_1.parseFilterDetails)(filter || {});\n        const unsubscribe = blockchain.on(\"blockLogs\", (blockLogs) => {\n            const blockNumber = blockLogs.blockNumber;\n            // every time we get a blockLogs message we re-check what the filter's\n            // range is. We do this because \"latest\" isn't the latest block at the\n            // time the filter was set up, rather it is the actual latest *mined*\n            // block (that is: not pending)\n            const { fromBlock, toBlock } = (0, filter_parsing_1.parseFilterRange)(filter, blockchain);\n            if (fromBlock <= blockNumber && toBlock >= blockNumber) {\n                value.updates.push(...blockLogs.filter(addresses, topics));\n            }\n        });\n        const value = { updates: [], unsubscribe, filter, type: ethereum_utils_1.FilterTypes.log };\n        const filterId = __classPrivateFieldGet(this, _EthereumApi_getId, \"f\").call(this);\n        __classPrivateFieldGet(this, _EthereumApi_filters, \"f\").set(filterId.toString(), value);\n        return filterId;\n    }\n    /**\n     * Polling method for a filter, which returns an array of logs, block hashes,\n     * or transaction hashes, depending on the filter type, which occurred since\n     * last poll.\n     *\n     * @param filterId - The filter id.\n     * @returns An array of logs, block hashes, or transaction hashes, depending\n     * on the filter type, which occurred since last poll.\n     *\n     * For filters created with `eth_newBlockFilter` the return are block hashes (`DATA`, 32 Bytes).\n     *\n     * For filters created with `eth_newPendingTransactionFilter` the return are transaction hashes (`DATA`, 32 Bytes).\n     *\n     * For filters created with `eth_newFilter` the return are log objects with the following parameters:\n     * * `removed`: `TAG` - `true` when the log was removed, `false` if its a valid log.\n     * * `logIndex`: `QUANTITY` - Integer of the log index position in the block. `null` when pending.\n     * * `transactionIndex`: `QUANTITY` - Integer of the transactions index position. `null` when pending.\n     * * `transactionHash`: `DATA`, 32 Bytes - Hash of the transaction where the log was. `null` when pending.\n     * * `blockHash`: `DATA`, 32 Bytes - Hash of the block where the log was. `null` when pending.\n     * * `blockNumber`: `QUANTITY` - The block number where the log was in. `null` when pending.\n     * * `address`: `DATA`, 20 Bytes - The address from which the log originated.\n     * * `data`: `DATA` - Contains one or more 32 Bytes non-indexed arguments of the log.\n     * * `topics`: `Array of DATA` - Array of 0 to 4 32 Bytes `DATA` of indexed log arguments.\n     *\n     * @example\n     * ```javascript\n     * // Logs.sol\n     * // // SPDX-License-Identifier: MIT\n     * // pragma solidity ^0.7.4;\n     * // contract Logs {\n     * //   event Event(uint256 indexed first, uint256 indexed second);\n     * //   constructor() {\n     * //     emit Event(1, 2);\n     * //   }\n     * //\n     * //   function logNTimes(uint8 n) public {\n     * //     for (uint8 i = 0; i < n; i++) {\n     * //       emit Event(i, i);\n     * //     }\n     * //   }\n     * // }\n     *\n     * const logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\n     * const [from] = await provider.send(\"eth_accounts\");\n     * const filterId = await provider.send(\"eth_newFilter\");\n     *\n     * const subscriptionId = await provider.send(\"eth_subscribe\", [\"newHeads\"]);\n     * await provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\n     * await provider.once(\"message\");\n     *\n     * const changes = await provider.request({ method: \"eth_getFilterChanges\", params: [filterId] });\n     * console.log(changes);\n     *\n     * await provider.send(\"eth_unsubscribe\", [subscriptionId]);\n     * ```\n     */\n    async eth_getFilterChanges(filterId) {\n        const filter = __classPrivateFieldGet(this, _EthereumApi_filters, \"f\").get(utils_1.Quantity.from(filterId).toString());\n        if (filter) {\n            const updates = filter.updates;\n            filter.updates = [];\n            return updates;\n        }\n        else {\n            throw new Error(\"filter not found\");\n        }\n    }\n    /**\n     * Uninstalls a filter with given id. Should always be called when watch is\n     * no longer needed.\n     *\n     * @param filterId - The filter id.\n     * @returns `true` if the filter was successfully uninstalled, otherwise\n     * `false`.\n     * @example\n     * ```javascript\n     * const filterId = await provider.request({ method: \"eth_newFilter\", params: [] });\n     * const result = await provider.request({ method: \"eth_uninstallFilter\", params: [filterId] });\n     * console.log(result);\n     * ```\n     */\n    async eth_uninstallFilter(filterId) {\n        const id = utils_1.Quantity.from(filterId).toString();\n        const filter = __classPrivateFieldGet(this, _EthereumApi_filters, \"f\").get(id);\n        if (!filter)\n            return false;\n        filter.unsubscribe();\n        return __classPrivateFieldGet(this, _EthereumApi_filters, \"f\").delete(id);\n    }\n    /**\n     * Returns an array of all logs matching filter with given id.\n     *\n     * @param filterId - The filter id.\n     * @returns Array of log objects, or an empty array.\n     * @example\n     * ```javascript\n     * // Logs.sol\n     * // // SPDX-License-Identifier: MIT\n     * // pragma solidity ^0.7.4;\n     * // contract Logs {\n     * //   event Event(uint256 indexed first, uint256 indexed second);\n     * //   constructor() {\n     * //     emit Event(1, 2);\n     * //   }\n     * //\n     * //   function logNTimes(uint8 n) public {\n     * //     for (uint8 i = 0; i < n; i++) {\n     * //       emit Event(i, i);\n     * //     }\n     * //   }\n     * // }\n     *\n     * const logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\n     * const [from] = await provider.send(\"eth_accounts\");\n     * const filterId = await provider.send(\"eth_newFilter\");\n     *\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"]);\n     * await provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\n     * await provider.once(\"message\");\n     *\n     * const logs = await provider.request({ method: \"eth_getFilterLogs\", params: [filterId] });\n     * console.log(logs);\n     * ```\n     */\n    async eth_getFilterLogs(filterId) {\n        const filter = __classPrivateFieldGet(this, _EthereumApi_filters, \"f\").get(utils_1.Quantity.from(filterId).toString());\n        if (filter && filter.type === ethereum_utils_1.FilterTypes.log) {\n            return this.eth_getLogs(filter.filter);\n        }\n        else {\n            throw new Error(\"filter not found\");\n        }\n    }\n    /**\n     * Returns an array of all logs matching a given filter object.\n     *\n     * Filter options:\n     * * `fromBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `toBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * * `address`: `DATA | Array` (optional) - Contract address or a list of addresses from which the logs should originate.\n     * * `topics`: `Array of DATA` (optional) - Array of 32 Bytes `DATA` topcis. Topics are order-dependent. Each topic can also\n     * be an array of `DATA` with \"or\" options.\n     * * `blockHash`: `DATA`, 32 Bytes (optional) - Hash of the block to restrict logs from. If `blockHash` is present,\n     * then neither `fromBlock` or `toBlock` are allowed.\n     *\n     * @param filter - The filter options as seen in source.\n     * @returns Array of log objects, or an empty array.\n     * @example\n     * ```javascript\n     * // Logs.sol\n     * // // SPDX-License-Identifier: MIT\n     * // pragma solidity ^0.7.4;\n     * // contract Logs {\n     * //   event Event(uint256 indexed first, uint256 indexed second);\n     * //   constructor() {\n     * //     emit Event(1, 2);\n     * //   }\n     * //\n     * //   function logNTimes(uint8 n) public {\n     * //     for (uint8 i = 0; i < n; i++) {\n     * //       emit Event(i, i);\n     * //     }\n     * //   }\n     * // }\n     *\n     * const logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\n     * const [from] = await provider.send(\"eth_accounts\");\n     *\n     * await provider.send(\"eth_subscribe\", [\"newHeads\"]);\n     * const txHash = await provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\n     * await provider.once(\"message\");\n     *\n     * const { contractAddress } = await provider.send(\"eth_getTransactionReceipt\", [txHash] );\n     *\n     * const logs = await provider.request({ method: \"eth_getLogs\", params: [{ address: contractAddress }] });\n     * console.log(logs);\n     * ```\n     */\n    async eth_getLogs(filter) {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").blockLogs.getLogs(filter);\n    }\n    /**\n     * Returns the number of transactions sent from an address.\n     *\n     * @param address - `DATA`, 20 Bytes - The address to get number of transactions sent from\n     * @param blockNumber - Integer block number, or the string \"latest\", \"earliest\"\n     * or \"pending\".\n     * @returns Number of transactions sent from this address.\n     * @example\n     * ```javascript\n     * const [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const txCount = await provider.request({ method: \"eth_getTransactionCount\", params: [ from, \"latest\" ] });\n     * console.log(txCount);\n     * ```\n     */\n    async eth_getTransactionCount(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").accounts.getNonce(ethereum_address_1.Address.from(address), blockNumber);\n    }\n    /**\n     * Executes a new message call immediately without creating a transaction on the block chain.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @param blockNumber - Integer block number, or the string \"latest\", \"earliest\"\n     *  or \"pending\".\n     *\n     * @returns The return value of executed contract.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const txObj = { from, gas: \"0x5b8d80\", gasPrice: \"0x1dfd14000\", value:\"0x0\", data: simpleSol };\n     * const result = await provider.request({ method: \"eth_call\", params: [txObj, \"latest\"] });\n     * console.log(result);\n     * ```\n     */\n    async eth_call(transaction, blockNumber = ethereum_utils_1.Tag.latest) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const common = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").common;\n        const blocks = blockchain.blocks;\n        const parentBlock = await blocks.get(blockNumber);\n        const parentHeader = parentBlock.header;\n        const options = __classPrivateFieldGet(this, _EthereumApi_options, \"f\");\n        let gas;\n        if (typeof transaction.gasLimit === \"undefined\") {\n            if (typeof transaction.gas !== \"undefined\") {\n                gas = utils_1.Quantity.from(transaction.gas);\n            }\n            else {\n                // eth_call isn't subject to regular transaction gas limits by default\n                gas = options.miner.callGasLimit;\n            }\n        }\n        else {\n            gas = utils_1.Quantity.from(transaction.gasLimit);\n        }\n        let data;\n        if (typeof transaction.data === \"undefined\") {\n            if (typeof transaction.input !== \"undefined\") {\n                data = utils_1.Data.from(transaction.input);\n            }\n        }\n        else {\n            data = utils_1.Data.from(transaction.data);\n        }\n        // eth_call doesn't validate that the transaction has a sufficient\n        // \"effectiveGasPrice\". however, if `maxPriorityFeePerGas` or\n        // `maxFeePerGas` values are set, the baseFeePerGas is used to calculate\n        // the effectiveGasPrice, which is used to calculate tx costs/refunds.\n        const baseFeePerGasBigInt = parentBlock.header.baseFeePerGas\n            ? parentBlock.header.baseFeePerGas.toBigInt()\n            : undefined;\n        let gasPrice;\n        const hasGasPrice = typeof transaction.gasPrice !== \"undefined\";\n        // if the original block didn't have a `baseFeePerGas` (baseFeePerGasBigInt\n        // is undefined) then EIP-1559 was not active on that block and we can't use\n        // type 2 fee values (as they rely on the baseFee)\n        if (!common.isActivatedEIP(1559) || baseFeePerGasBigInt === undefined) {\n            gasPrice = utils_1.Quantity.from(hasGasPrice ? 0 : transaction.gasPrice);\n        }\n        else {\n            const hasMaxFeePerGas = typeof transaction.maxFeePerGas !== \"undefined\";\n            const hasMaxPriorityFeePerGas = typeof transaction.maxPriorityFeePerGas !== \"undefined\";\n            if (hasGasPrice && (hasMaxFeePerGas || hasMaxPriorityFeePerGas)) {\n                throw new Error(\"both gasPrice and (maxFeePerGas or maxPriorityFeePerGas) specified\");\n            }\n            // User specified 1559 gas fields (or none), use those\n            let maxFeePerGas = 0n;\n            let maxPriorityFeePerGas = 0n;\n            if (hasMaxFeePerGas) {\n                maxFeePerGas = BigInt(transaction.maxFeePerGas);\n            }\n            if (hasMaxPriorityFeePerGas) {\n                maxPriorityFeePerGas = BigInt(transaction.maxPriorityFeePerGas);\n            }\n            if (maxPriorityFeePerGas > 0 || maxFeePerGas > 0) {\n                const a = maxFeePerGas - baseFeePerGasBigInt;\n                const tip = a < maxPriorityFeePerGas ? a : maxPriorityFeePerGas;\n                gasPrice = utils_1.Quantity.from(baseFeePerGasBigInt + tip);\n            }\n            else {\n                gasPrice = utils_1.Quantity.from(0);\n            }\n        }\n        const block = new ethereum_block_1.RuntimeBlock(parentHeader.number, parentHeader.parentHash, blockchain.coinbase, gas.toBuffer(), parentHeader.gasUsed.toBuffer(), parentHeader.timestamp, options.miner.difficulty, parentHeader.totalDifficulty, baseFeePerGasBigInt);\n        const simulatedTransaction = {\n            gas,\n            // if we don't have a from address, our caller sut be the configured coinbase address\n            from: transaction.from == null\n                ? blockchain.coinbase\n                : ethereum_address_1.Address.from(transaction.from),\n            to: transaction.to == null ? null : ethereum_address_1.Address.from(transaction.to),\n            gasPrice,\n            value: transaction.value == null ? null : utils_1.Quantity.from(transaction.value),\n            data,\n            block\n        };\n        return blockchain.simulateTransaction(simulatedTransaction, parentBlock);\n    }\n    //#endregion\n    //#region debug\n    /**\n     * Attempt to run the transaction in the exact same manner as it was executed\n     * on the network. It will replay any transaction that may have been executed\n     * prior to this one before it will finally attempt to execute the transaction\n     * that corresponds to the given hash.\n     *\n     * In addition to the hash of the transaction you may give it a secondary\n     * optional argument, which specifies the options for this specific call.\n     * The possible options are:\n     *\n     * * `disableStorage`: \\{boolean\\} Setting this to `true` will disable storage capture (default = `false`).\n     * * `disableMemory`: \\{boolean\\} Setting this to `true` will disable memory capture (default = `false`).\n     * * `disableStack`: \\{boolean\\} Setting this to `true` will disable stack capture (default = `false`).\n     *\n     * @param transactionHash - Hash of the transaction to trace.\n     * @param options - See options in source.\n     * @returns Returns the `gas`, `structLogs`, and `returnValue` for the traced transaction.\n     *\n     * The `structLogs` are an array of logs, which contains the following fields:\n     * * `depth`: The execution depth.\n     * * `error`: Information about an error, if one occurred.\n     * * `gas`: The number of gas remaining.\n     * * `gasCost`: The cost of gas in wei.\n     * * `memory`: An array containing the contract's memory data.\n     * * `op`: The current opcode.\n     * * `pc`: The current program counter.\n     * * `stack`: The EVM execution stack.\n     * * `storage`: An object containing the contract's storage data.\n     *\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     * const transactionTrace = await provider.request({ method: \"debug_traceTransaction\", params: [txHash] });\n     * console.log(transactionTrace);\n     * ```\n     */\n    async debug_traceTransaction(transactionHash, options) {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").traceTransaction(transactionHash, options || {});\n    }\n    // TODO: example doesn't return correct value\n    /**\n     * Attempts to replay the transaction as it was executed on the network and\n     * return storage data given a starting key and max number of entries to return.\n     *\n     * @param blockHash - Hash of a block.\n     * @param transactionIndex - Integer of the transaction index position.\n     * @param contractAddress - Address of the contract.\n     * @param startKey - Hash of the start key for grabbing storage entries.\n     * @param maxResult - Integer of maximum number of storage entries to return.\n     * @returns Returns a storage object with the keys being keccak-256 hashes of the storage keys,\n     * and the values being the raw, unhashed key and value for that specific storage slot. Also\n     * returns a next key which is the keccak-256 hash of the next key in storage for continuous downloading.\n     * @example\n     * ```javascript\n     * // Simple.sol\n     * // // SPDX-License-Identifier: MIT\n     * //  pragma solidity ^0.7.4;\n     * //\n     * //  contract Simple {\n     * //      uint256 public value;\n     * //      constructor() payable {\n     * //          value = 5;\n     * //      }\n     * //  }\n     * const simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const initialTxHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const {contractAddress} = await provider.request({ method: \"eth_getTransactionReceipt\", params: [initialTxHash] });\n     *\n     * // set value to 19\n     * const data = \"0x552410770000000000000000000000000000000000000000000000000000000000000019\";\n     * const txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to: contractAddress, data }] });\n     * await provider.once(\"message\"); // Note: `await provider.once` is non-standard\n     *\n     * const { blockHash, transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n     * const storage = await provider.request({ method: \"debug_storageRangeAt\", params: [blockHash, transactionIndex, contractAddress, \"0x01\", 1] });\n     * console.log(storage);\n     * ```\n     */\n    async debug_storageRangeAt(blockHash, transactionIndex, contractAddress, startKey, maxResult) {\n        return __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\").storageRangeAt(blockHash, utils_1.Quantity.from(transactionIndex).toNumber(), contractAddress, startKey, utils_1.Quantity.from(maxResult).toNumber());\n    }\n    //#endregion\n    //#region personal\n    /**\n     * Returns all the Ethereum account addresses of all keys that have been\n     * added.\n     * @returns The Ethereum account addresses of all keys that have been added.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"personal_listAccounts\"));\n     * ```\n     */\n    async personal_listAccounts() {\n        return __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").addresses;\n    }\n    // TODO: example doesn't return correct value\n    /**\n     * Generates a new account with private key. Returns the address of the new\n     * account.\n     * @param passphrase - The passphrase to encrypt the private key with.\n     * @returns The new account's address.\n     * @example\n     * ```javascript\n     * const passphrase = \"passphrase\";\n     * const address = await provider.send(\"personal_newAccount\", [passphrase] );\n     * console.log(address);\n     * ```\n     */\n    async personal_newAccount(passphrase) {\n        if (typeof passphrase !== \"string\") {\n            throw new Error(\"missing value for required argument `passphrase`\");\n        }\n        const wallet = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\");\n        const newAccount = wallet.createRandomAccount();\n        const address = newAccount.address;\n        const strAddress = address.toString();\n        await wallet.addToKeyFile(address, newAccount.privateKey, passphrase, true);\n        wallet.addresses.push(strAddress);\n        wallet.knownAccounts.add(strAddress);\n        return newAccount.address;\n    }\n    /**\n     * Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.\n     *\n     * @param rawKey - The raw, unencrypted private key to import.\n     * @param passphrase - The passphrase to encrypt with.\n     * @returns Returns the address of the new account.\n     * @example\n     * ```javascript\n     * const rawKey = \"0x0123456789012345678901234567890123456789012345678901234567890123\";\n     * const passphrase = \"passphrase\";\n     *\n     * const address = await provider.send(\"personal_importRawKey\",[rawKey, passphrase] );\n     * console.log(address);\n     * ```\n     */\n    async personal_importRawKey(rawKey, passphrase) {\n        if (typeof passphrase !== \"string\") {\n            throw new Error(\"missing value for required argument `passphrase`\");\n        }\n        const wallet = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\");\n        const newAccount = wallet_1.default.createAccountFromPrivateKey(utils_1.Data.from(rawKey));\n        const address = newAccount.address;\n        const strAddress = address.toString();\n        await wallet.addToKeyFile(address, newAccount.privateKey, passphrase, true);\n        wallet.addresses.push(strAddress);\n        wallet.knownAccounts.add(strAddress);\n        return newAccount.address;\n    }\n    /**\n     * Locks the account. The account can no longer be used to send transactions.\n     * @param address - The account address to be locked.\n     * @returns Returns `true` if the account was locked, otherwise `false`.\n     * @example\n     * ```javascript\n     * const [account] = await provider.send(\"personal_listAccounts\");\n     * const isLocked = await provider.send(\"personal_lockAccount\", [account] );\n     * console.log(isLocked);\n     * ```\n     */\n    async personal_lockAccount(address) {\n        return __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").lockAccount(address.toLowerCase());\n    }\n    // TODO: example doesn't return correct value\n    /**\n     * Unlocks the account for use.\n     *\n     * The unencrypted key will be held in memory until the unlock duration\n     * expires. The unlock duration defaults to 300 seconds. An explicit duration\n     * of zero seconds unlocks the key until geth exits.\n     *\n     * The account can be used with `eth_sign` and `eth_sendTransaction` while it is\n     * unlocked.\n     * @param address - 20 Bytes - The address of the account to unlock.\n     * @param passphrase - Passphrase to unlock the account.\n     * @param duration - (default: 300) Duration in seconds how long the account\n     * should remain unlocked for. Set to 0 to disable automatic locking.\n     * @returns `true` if it worked. Throws an error or returns `false` if it did not.\n     * @example\n     * ```javascript\n     * // generate an account\n     * const passphrase = \"passphrase\";\n     * const newAccount = await provider.send(\"personal_newAccount\", [passphrase] );\n     * const isUnlocked = await provider.send(\"personal_unlockAccount\", [newAccount, passphrase] );\n     * console.log(isUnlocked);\n     * ```\n     */\n    async personal_unlockAccount(address, passphrase, duration = 300) {\n        const addy = new ethereum_address_1.Address(address);\n        return __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\").unlockAccount(addy, passphrase, duration);\n    }\n    /**\n     * Validate the given passphrase and submit transaction.\n     *\n     * The transaction is the same argument as for `eth_sendTransaction` and\n     * contains the from address. If the passphrase can be used to decrypt the\n     * private key belonging to `tx.from` the transaction is verified, signed and\n     * send onto the network. The account is not unlocked globally in the node\n     * and cannot be used in other RPC calls.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param txData - The transaction call object as seen in source.\n     * @param passphrase - The passphrase to decrpyt the private key belonging to `tx.from`.\n     * @returns The transaction hash or if unsuccessful an error.\n     * @example\n     * ```javascript\n     * const passphrase = \"passphrase\";\n     * const newAccount = await provider.send(\"personal_newAccount\", [passphrase] );\n     * const [to] = await provider.send(\"personal_listAccounts\");\n     *\n     * // use account and passphrase to send the transaction\n     * const txHash = await provider.send(\"personal_sendTransaction\", [{ from: newAccount, to, gasLimit: \"0x5b8d80\" }, passphrase] );\n     * console.log(txHash);\n     * ```\n     */\n    async personal_sendTransaction(transaction, passphrase) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        const from = tx.from;\n        if (from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const wallet = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\");\n        const secretKey = await wallet.getFromKeyFile(tx.from, passphrase);\n        await autofillDefaultTransactionValues(tx, this.eth_estimateGas.bind(this), this.eth_maxPriorityFeePerGas, transaction, blockchain, __classPrivateFieldGet(this, _EthereumApi_options, \"f\"));\n        return blockchain.queueTransaction(tx, utils_1.Data.from(secretKey));\n    }\n    /**\n     * Validates the given passphrase and signs a transaction that can be\n     * submitted to the network at a later time using `eth_sendRawTransaction`.\n     *\n     * The transaction is the same argument as for `eth_signTransaction` and\n     * contains the from address. If the passphrase can be used to decrypt the\n     * private key belonging to `tx.from` the transaction is verified and signed.\n     * The account is not unlocked globally in the node and cannot be used in other RPC calls.\n     *\n     * Transaction call object:\n     * * `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n     * * `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n     * * `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n     * * `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n     * * `value`: `QUANTITY` (optional) - Integer of the value in wei.\n     * * `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n     *\n     * @param transaction - The transaction call object as seen in source.\n     * @returns The raw, signed transaction.\n     * @example\n     * ```javascript\n     * const [to] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const passphrase = \"passphrase\";\n     * const from = await provider.send(\"personal_newAccount\", [passphrase] );\n     * await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\n     * const signedTx = await provider.request({ method: \"personal_signTransaction\", params: [{ from, to }, passphrase] });\n     * console.log(signedTx)\n     * ```\n     */\n    async personal_signTransaction(transaction, passphrase) {\n        const blockchain = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const tx = ethereum_transaction_1.TransactionFactory.fromRpc(transaction, blockchain.common);\n        if (tx.from == null) {\n            throw new Error(\"from not found; is required\");\n        }\n        const wallet = __classPrivateFieldGet(this, _EthereumApi_wallet, \"f\");\n        const secretKey = await wallet.getFromKeyFile(tx.from, passphrase);\n        tx.signAndHash(secretKey);\n        return utils_1.Data.from(tx.serialized).toString();\n    }\n    //#endregion\n    //#region rpc\n    /**\n     * Returns object of RPC modules.\n     * @returns RPC modules.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"rpc_modules\"));\n     * ```\n     */\n    async rpc_modules() {\n        return RPC_MODULES;\n    }\n    //#endregion\n    //#region shh\n    /**\n     * Creates new whisper identity in the client.\n     *\n     * @returns - The address of the new identity.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_newIdentity\"));\n     * ```\n     */\n    async shh_newIdentity() {\n        return \"0x00\";\n    }\n    /**\n     * Checks if the client hold the private keys for a given identity.\n     *\n     * @param address - The identity address to check.\n     * @returns Returns `true` if the client holds the private key for that identity, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_hasIdentity\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_hasIdentity(address) {\n        return false;\n    }\n    /**\n     * Creates a new group.\n     *\n     * @returns The address of the new group.\n     */\n    async shh_newGroup() {\n        return \"0x00\";\n    }\n    /**\n     * Adds a whisper identity to the group.\n     *\n     * @param address - The identity address to add to a group.\n     * @returns `true` if the identity was successfully added to the group, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_addToGroup\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_addToGroup(address) {\n        return false;\n    }\n    /**\n     * Creates filter to notify, when client receives whisper message matching the filter options.\n     *\n     * @param to - (optional) Identity of the receiver. When present it will try to decrypt any incoming message\n     *  if the client holds the private key to this identity.\n     * @param topics - Array of topics which the incoming message's topics should match.\n     * @returns Returns `true` if the identity was successfully added to the group, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_newFilter\", [\"0x0\", []] ));\n     * ```\n     */\n    async shh_newFilter(to, topics) {\n        return false;\n    }\n    /**\n     * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n     * Additionally filters timeout when they aren't requested with `shh_getFilterChanges` for a period of time.\n     *\n     * @param id - The filter id. Ex: \"0x7\"\n     * @returns `true` if the filter was successfully uninstalled, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_uninstallFilter\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_uninstallFilter(id) {\n        return false;\n    }\n    /**\n     * Polling method for whisper filters. Returns new messages since the last call of this method.\n     *\n     * @param id - The filter id. Ex: \"0x7\"\n     * @returns More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_getFilterChanges\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_getFilterChanges(id) {\n        return [];\n    }\n    /**\n     * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n     *\n     * @param id - The filter id. Ex: \"0x7\"\n     * @returns See: `shh_getFilterChanges`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_getMessages\", [\"0x0\"] ));\n     * ```\n     */\n    async shh_getMessages(id) {\n        return false;\n    }\n    /**\n     * Creates a whisper message and injects it into the network for distribution.\n     *\n     * @param postData -\n     * @returns Returns `true` if the message was sent, otherwise `false`.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_post\", [{}] ));\n     * ```\n     */\n    async shh_post(postData) {\n        return false;\n    }\n    /**\n     * Returns the current whisper protocol version.\n     *\n     * @returns The current whisper protocol version.\n     * @example\n     * ```javascript\n     * console.log(await provider.send(\"shh_version\"));\n     * ```\n     */\n    async shh_version() {\n        return \"2\";\n    }\n    //#endregion\n    //#region txpool\n    /**\n     * Returns the current content of the transaction pool.\n     *\n     * @returns The transactions currently pending or queued in the transaction pool.\n     * @example\n     * ```javascript\n     * const [from] = await provider.request({ method: \"eth_accounts\", params: [] });\n     * const pendingTx = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", nonce:\"0x0\" }] });\n     * const queuedTx = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", nonce:\"0x2\" }] });\n     * const pool = await provider.send(\"txpool_content\");\n     * console.log(pool);\n     * ```\n     */\n    async txpool_content() {\n        const { transactions, common } = __classPrivateFieldGet(this, _EthereumApi_blockchain, \"f\");\n        const { transactionPool } = transactions;\n        const processMap = (map) => {\n            let res = new Map();\n            for (let [_, transactions] of map) {\n                const arr = transactions.array;\n                for (let i = 0; i < transactions.length; ++i) {\n                    const tx = arr[i];\n                    const from = tx.from.toString();\n                    if (res[from] === undefined) {\n                        res[from] = {};\n                    }\n                    // The nonce keys are actual decimal numbers (as strings) and not\n                    // hex literals (based on what geth returns).\n                    const nonce = tx.nonce.toBigInt().toString();\n                    res[from][nonce] = tx.toJSON(common);\n                }\n            }\n            return res;\n        };\n        return {\n            pending: processMap(transactionPool.executables.pending),\n            queued: processMap(transactionPool.origins)\n        };\n    }\n}\n_EthereumApi_getId = new WeakMap(), _EthereumApi_filters = new WeakMap(), _EthereumApi_subscriptions = new WeakMap(), _EthereumApi_options = new WeakMap(), _EthereumApi_blockchain = new WeakMap(), _EthereumApi_wallet = new WeakMap();\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(3)\n], EthereumApi.prototype, \"db_putString\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"db_getString\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(3)\n], EthereumApi.prototype, \"db_putHex\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"db_getHex\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"bzz_hive\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"bzz_info\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0, 1)\n], EthereumApi.prototype, \"evm_mine\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"evm_setAccountNonce\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"evm_increaseTime\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0, 1)\n], EthereumApi.prototype, \"evm_setTime\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"evm_revert\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0, 1)\n], EthereumApi.prototype, \"miner_start\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"miner_stop\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"miner_setGasPrice\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"miner_setEtherbase\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"miner_setExtra\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"web3_clientVersion\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"web3_sha3\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"net_version\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"net_listening\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"net_peerCount\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_estimateGas\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_protocolVersion\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_syncing\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_coinbase\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_getBlockByNumber\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_getBlockByHash\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getBlockTransactionCountByNumber\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getBlockTransactionCountByHash\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_getCompilers\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_getTransactionByBlockHashAndIndex\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_getTransactionByBlockNumberAndIndex\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getUncleCountByBlockHash\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getUncleCountByBlockNumber\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_getUncleByBlockHashAndIndex\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_getUncleByBlockNumberAndIndex\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getWork\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(3)\n], EthereumApi.prototype, \"eth_submitWork\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_submitHashrate\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_mining\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_hashrate\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_gasPrice\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_maxPriorityFeePerGas\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_accounts\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_blockNumber\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_chainId\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_getBalance\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_getCode\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2, 3)\n], EthereumApi.prototype, \"eth_getStorageAt\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getTransactionByHash\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getTransactionReceipt\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_sendTransaction\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_signTransaction\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_sendRawTransaction\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_sign\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_signTypedData\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"eth_signTypedData_v4\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_subscribe\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_unsubscribe\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_newBlockFilter\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"eth_newPendingTransactionFilter\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0, 1)\n], EthereumApi.prototype, \"eth_newFilter\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getFilterChanges\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_uninstallFilter\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getFilterLogs\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"eth_getLogs\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_getTransactionCount\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1, 2)\n], EthereumApi.prototype, \"eth_call\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"personal_listAccounts\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"personal_newAccount\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"personal_importRawKey\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"personal_lockAccount\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2, 3)\n], EthereumApi.prototype, \"personal_unlockAccount\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"personal_sendTransaction\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"personal_signTransaction\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"rpc_modules\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"shh_newIdentity\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"shh_hasIdentity\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"shh_newGroup\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"shh_addToGroup\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(2)\n], EthereumApi.prototype, \"shh_newFilter\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"shh_uninstallFilter\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"shh_getFilterChanges\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"shh_getMessages\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(1)\n], EthereumApi.prototype, \"shh_post\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"shh_version\", null);\n__decorate([\n    (0, assert_arg_length_1.assertArgLength)(0)\n], EthereumApi.prototype, \"txpool_content\", null);\nexports.default = EthereumApi;\n//# sourceMappingURL=api.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Blockchain_state, _Blockchain_miner, _Blockchain_blockBeingSavedPromise, _Blockchain_timer, _Blockchain_emitStepEvent, _Blockchain_database, _Blockchain_options, _Blockchain_instamine, _Blockchain_saveNewBlock, _Blockchain_emitNewBlock, _Blockchain_getTransactionLogOutput, _Blockchain_handleNewBlockData, _Blockchain_readyNextBlock, _Blockchain_isPaused, _Blockchain_commitAccounts, _Blockchain_initializeGenesisBlock, _Blockchain_timeAdjustment, _Blockchain_currentTime, _Blockchain_deleteBlockData, _Blockchain_snapshots, _Blockchain_traceTransaction, _Blockchain_prepareNextBlock;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Status = void 0;\nconst os_1 = require(\"os\");\nconst miner_1 = __importStar(require(\"./miner/miner\"));\nconst database_1 = __importDefault(require(\"./database\"));\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst common_1 = __importDefault(require(\"@ethereumjs/common\"));\nconst vm_1 = __importDefault(require(\"@ethereumjs/vm\"));\nconst exceptions_1 = require(\"@ethereumjs/vm/dist/exceptions\");\nconst utils_1 = require(\"@ganache/utils\");\nconst account_manager_1 = __importDefault(require(\"./data-managers/account-manager\"));\nconst block_manager_1 = __importDefault(require(\"./data-managers/block-manager\"));\nconst blocklog_manager_1 = __importDefault(require(\"./data-managers/blocklog-manager\"));\nconst transaction_manager_1 = __importDefault(require(\"./data-managers/transaction-manager\"));\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst state_manager_1 = require(\"./forking/state-manager\");\nconst index_1 = require(\"@ethereumjs/vm/dist/state/index\");\nconst trie_1 = require(\"./helpers/trie\");\nconst trie_2 = require(\"./forking/trie\");\nconst precompiles_1 = require(\"./helpers/precompiles\");\nconst transaction_receipt_manager_1 = __importDefault(require(\"./data-managers/transaction-receipt-manager\"));\nconst utils_2 = require(\"@ganache/utils\");\nconst provider_events_1 = require(\"./provider-events\");\nconst mcl_wasm_1 = __importDefault(require(\"mcl-wasm\"));\nconst mclInitPromise = mcl_wasm_1.default.init(mcl_wasm_1.default.BLS12_381).then(() => {\n    mcl_wasm_1.default.setMapToMode(mcl_wasm_1.default.IRTF); // set the right map mode; otherwise mapToG2 will return wrong values.\n    mcl_wasm_1.default.verifyOrderG1(true); // subgroup checks for G1\n    mcl_wasm_1.default.verifyOrderG2(true); // subgroup checks for G2\n});\nvar Status;\n(function (Status) {\n    // Flags\n    Status[Status[\"started\"] = 1] = \"started\";\n    Status[Status[\"starting\"] = 2] = \"starting\";\n    Status[Status[\"stopped\"] = 4] = \"stopped\";\n    Status[Status[\"stopping\"] = 8] = \"stopping\";\n    Status[Status[\"paused\"] = 16] = \"paused\"; // 0001 0000\n})(Status = exports.Status || (exports.Status = {}));\n/**\n * Sets the provided VM state manager's state root *without* first\n * checking for checkpoints or flushing the existing cache.\n *\n * Useful if you know the state manager is not in a checkpoint and its internal\n * cache is safe to discard.\n *\n * @param stateManager -\n * @param stateRoot -\n */\nfunction setStateRootSync(stateManager, stateRoot) {\n    stateManager._trie.root = stateRoot;\n    stateManager._cache.clear();\n    stateManager._storageTries = {};\n}\nfunction makeTrie(blockchain, db, root) {\n    if (blockchain.fallback) {\n        return new trie_2.ForkTrie(db, root ? root.toBuffer() : null, blockchain);\n    }\n    else {\n        return new trie_1.GanacheTrie(db, root ? root.toBuffer() : null, blockchain);\n    }\n}\nfunction createCommon(chainId, networkId, hardfork) {\n    const common = common_1.default.forCustomChain(\n    // if we were given a chain id that matches a real chain, use it\n    // NOTE: I don't think Common serves a purpose other than instructing the\n    // VM what hardfork is in use. But just incase things change in the future\n    // its configured \"more correctly\" here.\n    utils_1.KNOWN_CHAINIDS.has(chainId) ? chainId : 1, {\n        name: \"ganache\",\n        networkId: networkId,\n        chainId: chainId,\n        comment: \"Local test network\"\n    }, hardfork);\n    // the VM likes to listen to \"hardforkChanged\" events from common, but:\n    //  a) we don't currently support changing hardforks\n    //  b) it can cause `MaxListenersExceededWarning`.\n    // Since we don't need it we overwrite .on to make it be quiet.\n    common.on = () => { };\n    return common;\n}\nclass Blockchain extends emittery_1.default {\n    /**\n     * Initializes the underlying Database and handles synchronization between\n     * the API and the database.\n     *\n     * Emits a `ready` event once the database and all dependencies are fully\n     * initialized.\n     * @param options -\n     */\n    constructor(options, coinbase, fallback) {\n        super();\n        _Blockchain_state.set(this, Status.starting);\n        _Blockchain_miner.set(this, void 0);\n        _Blockchain_blockBeingSavedPromise.set(this, void 0);\n        /**\n         * When not instamining (blockTime > 0) this value holds the timeout timer.\n         */\n        _Blockchain_timer.set(this, null);\n        /**\n         * Because step events are expensive to create and emit, CPU-wise, we do it\n         * conditionally.\n         */\n        _Blockchain_emitStepEvent.set(this, false);\n        _Blockchain_database.set(this, void 0);\n        _Blockchain_options.set(this, void 0);\n        _Blockchain_instamine.set(this, void 0);\n        _Blockchain_saveNewBlock.set(this, ({ block, serialized, storageKeys, transactions }) => {\n            const { blocks } = this;\n            blocks.latest = block;\n            return __classPrivateFieldGet(this, _Blockchain_database, \"f\").batch(() => {\n                const blockHash = block.hash();\n                const blockHeader = block.header;\n                const blockNumberQ = blockHeader.number;\n                const blockNumber = blockNumberQ.toBuffer();\n                const blockLogs = ethereum_utils_1.BlockLogs.create(blockHash);\n                const timestamp = blockHeader.timestamp;\n                const timestampStr = new Date(timestamp.toNumber() * 1000).toString();\n                const logOutput = [];\n                transactions.forEach((tx, i) => {\n                    const hash = tx.hash.toBuffer();\n                    const index = utils_1.Quantity.from(i);\n                    // save transaction to the database\n                    const serialized = tx.serializeForDb(blockHash, blockNumberQ, index);\n                    this.transactions.set(hash, serialized);\n                    // save receipt to the database\n                    const receipt = tx.getReceipt();\n                    const encodedReceipt = receipt.serialize(true);\n                    this.transactionReceipts.set(hash, encodedReceipt);\n                    // collect block logs\n                    tx.getLogs().forEach(blockLogs.append.bind(blockLogs, index, tx.hash));\n                    // prepare log output\n                    logOutput.push(__classPrivateFieldGet(this, _Blockchain_getTransactionLogOutput, \"f\").call(this, hash, receipt, blockHeader.number, timestampStr, tx.execException));\n                });\n                // save storage keys to the database\n                storageKeys.forEach(value => {\n                    this.storageKeys.put(value.hashedKey, value.key);\n                });\n                blockLogs.blockNumber = blockHeader.number;\n                // save block logs to the database\n                this.blockLogs.set(blockNumber, blockLogs.serialize());\n                // save block to the database\n                blocks.putBlock(blockNumber, blockHash, serialized);\n                // update the \"latest\" index\n                blocks.updateLatestIndex(blockNumber);\n                // output to the log, if we have data to output\n                if (logOutput.length > 0)\n                    __classPrivateFieldGet(this, _Blockchain_options, \"f\").logging.logger.log(logOutput.join(os_1.EOL));\n                return { block, blockLogs, transactions };\n            });\n        });\n        /**\n         * Emit the block now that everything has been fully saved to the database\n         */\n        _Blockchain_emitNewBlock.set(this, async (blockInfo) => {\n            const options = __classPrivateFieldGet(this, _Blockchain_options, \"f\");\n            const { block, blockLogs, transactions } = blockInfo;\n            transactions.forEach(transaction => {\n                transaction.finalize(\"confirmed\", transaction.execException);\n            });\n            if (__classPrivateFieldGet(this, _Blockchain_instamine, \"f\") && options.miner.instamine === \"eager\") {\n                // in eager instamine mode we must delay the broadcast of new blocks\n                await new Promise(resolve => {\n                    // we delay emitting blocks and blockLogs because we need to allow for:\n                    // ```\n                    //  await provider.request({\"method\": \"eth_sendTransaction\"...)\n                    //  await provider.once(\"message\") // <- should work\n                    // ```\n                    // If we don't have this delay here the messages will be sent before\n                    // the call has a chance to listen to the event.\n                    setImmediate(async () => {\n                        // emit block logs first so filters can pick them up before\n                        // block listeners are notified\n                        await Promise.all([\n                            this.emit(\"blockLogs\", blockLogs),\n                            this.emit(\"block\", block)\n                        ]);\n                        resolve(void 0);\n                    });\n                });\n            }\n            else {\n                // emit block logs first so filters can pick them up before\n                // block listeners are notified\n                await Promise.all([\n                    this.emit(\"blockLogs\", blockLogs),\n                    this.emit(\"block\", block)\n                ]);\n            }\n            return blockInfo;\n        });\n        _Blockchain_getTransactionLogOutput.set(this, (hash, receipt, blockNumber, timestamp, error) => {\n            let str = `${os_1.EOL}  Transaction: ${utils_1.Data.from(hash)}${os_1.EOL}`;\n            const contractAddress = receipt.contractAddress;\n            if (contractAddress != null) {\n                str += `  Contract created: ${ethereum_address_1.Address.from(contractAddress)}${os_1.EOL}`;\n            }\n            str += `  Gas usage: ${utils_1.Quantity.from(receipt.raw[1]).toNumber()}\n  Block number: ${blockNumber.toNumber()}\n  Block time: ${timestamp}${os_1.EOL}`;\n            if (error) {\n                str += `  Runtime error: ${error.data.message}${os_1.EOL}`;\n                if (error.data.reason) {\n                    str += `  Revert reason: ${error.data.reason}${os_1.EOL}`;\n                }\n            }\n            return str;\n        });\n        _Blockchain_handleNewBlockData.set(this, async (blockData) => {\n            __classPrivateFieldSet(this, _Blockchain_blockBeingSavedPromise, __classPrivateFieldGet(this, _Blockchain_blockBeingSavedPromise, \"f\")\n                .then(() => __classPrivateFieldGet(this, _Blockchain_saveNewBlock, \"f\").call(this, blockData))\n                .then(__classPrivateFieldGet(this, _Blockchain_emitNewBlock, \"f\")), \"f\");\n            await __classPrivateFieldGet(this, _Blockchain_blockBeingSavedPromise, \"f\");\n            return;\n        });\n        _Blockchain_readyNextBlock.set(this, (previousBlock, timestamp) => {\n            const previousHeader = previousBlock.header;\n            const previousNumber = previousHeader.number.toBigInt() || 0n;\n            return new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from(previousNumber + 1n), previousBlock.hash(), this.coinbase, __classPrivateFieldGet(this, _Blockchain_options, \"f\").miner.blockGasLimit.toBuffer(), utils_2.BUFFER_ZERO, utils_1.Quantity.from(timestamp == null ? __classPrivateFieldGet(this, _Blockchain_currentTime, \"f\").call(this) : timestamp), __classPrivateFieldGet(this, _Blockchain_options, \"f\").miner.difficulty, previousHeader.totalDifficulty, ethereum_block_1.Block.calcNextBaseFee(previousBlock));\n        });\n        this.isStarted = () => {\n            return __classPrivateFieldGet(this, _Blockchain_state, \"f\") === Status.started;\n        };\n        this.mine = async (maxTransactions, timestamp, onlyOneBlock = false) => {\n            await __classPrivateFieldGet(this, _Blockchain_blockBeingSavedPromise, \"f\");\n            const nextBlock = __classPrivateFieldGet(this, _Blockchain_readyNextBlock, \"f\").call(this, this.blocks.latest, timestamp);\n            return {\n                transactions: await __classPrivateFieldGet(this, _Blockchain_miner, \"f\").mine(nextBlock, maxTransactions, onlyOneBlock),\n                blockNumber: nextBlock.header.number.toBuffer()\n            };\n        };\n        _Blockchain_isPaused.set(this, () => {\n            return (__classPrivateFieldGet(this, _Blockchain_state, \"f\") & Status.paused) !== 0;\n        });\n        this.createVmFromStateTrie = async (stateTrie, allowUnlimitedContractSize, activatePrecompile, common) => {\n            const blocks = this.blocks;\n            // ethereumjs vm doesn't use the callback style anymore\n            const blockchain = {\n                getBlock: async (number) => {\n                    const block = await blocks.get(number.toBuffer()).catch(_ => null);\n                    return block ? { hash: () => block.hash().toBuffer() } : null;\n                }\n            };\n            // ethereumjs-vm wants to \"copy\" the blockchain when `vm.copy` is called.\n            blockchain.copy = () => {\n                return blockchain;\n            };\n            common = common || this.common;\n            const vm = new vm_1.default({\n                state: stateTrie,\n                activatePrecompiles: false,\n                common,\n                allowUnlimitedContractSize,\n                blockchain,\n                stateManager: this.fallback\n                    ? new state_manager_1.ForkStateManager({ common, trie: stateTrie })\n                    : new index_1.DefaultStateManager({ common, trie: stateTrie })\n            });\n            if (activatePrecompile) {\n                await (0, precompiles_1.activatePrecompiles)(vm.stateManager);\n                if (common.isActivatedEIP(2537)) {\n                    // BLS12-381 curve, not yet included in any supported hardforks\n                    // but probably will be in the Shanghai hardfork\n                    // TODO: remove above comment once Shanghai is supported!\n                    await mclInitPromise; // ensure that mcl is initialized!\n                }\n            }\n            // skip `vm.init`, since we don't use any of it\n            vm._isInitialized = true;\n            return vm;\n        };\n        _Blockchain_commitAccounts.set(this, (accounts) => {\n            return Promise.all(accounts.map(account => this.trie.put(account.address.toBuffer(), account.serialize())));\n        });\n        _Blockchain_initializeGenesisBlock.set(this, async (timestamp, blockGasLimit, initialAccounts) => {\n            if (this.fallback != null) {\n                const { block: fallbackBlock } = this.fallback;\n                const { miner: minerOptions } = __classPrivateFieldGet(this, _Blockchain_options, \"f\");\n                // commit accounts, but for forking.\n                const stateManager = this.vm.stateManager;\n                await stateManager.checkpoint();\n                initialAccounts.forEach(acc => {\n                    const a = { buf: acc.address.toBuffer() };\n                    stateManager._cache.put(a, acc);\n                    stateManager.touchAccount(a);\n                });\n                await stateManager.commit();\n                // create the genesis block\n                let baseFeePerGas;\n                if (this.common.isActivatedEIP(1559)) {\n                    if (fallbackBlock.header.baseFeePerGas === undefined) {\n                        baseFeePerGas = ethereum_block_1.Block.INITIAL_BASE_FEE_PER_GAS;\n                    }\n                    else {\n                        baseFeePerGas = fallbackBlock.header.baseFeePerGas.toBigInt();\n                    }\n                }\n                const genesis = new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from(fallbackBlock.header.number.toBigInt() + 1n), fallbackBlock.hash(), this.coinbase, blockGasLimit.toBuffer(), utils_2.BUFFER_ZERO, utils_1.Quantity.from(timestamp), minerOptions.difficulty, fallbackBlock.header.totalDifficulty, baseFeePerGas);\n                // store the genesis block in the database\n                const { block, serialized } = genesis.finalize(ethereumjs_util_1.KECCAK256_RLP, ethereumjs_util_1.KECCAK256_RLP, utils_1.BUFFER_256_ZERO, this.trie.root, 0n, minerOptions.extraData, [], new Map());\n                const hash = block.hash();\n                return this.blocks\n                    .putBlock(block.header.number.toBuffer(), hash, serialized)\n                    .then(_ => ({\n                    block,\n                    blockLogs: ethereum_utils_1.BlockLogs.create(hash)\n                }));\n            }\n            await __classPrivateFieldGet(this, _Blockchain_commitAccounts, \"f\").call(this, initialAccounts);\n            // README: block `0` is weird in that a `0` _should_ be hashed as `[]`,\n            // instead of `[0]`, so we set it to `RPCQUANTITY_EMPTY` instead of\n            // `RPCQUANTITY_ZERO` here. A few lines down in this function we swap\n            // this `RPCQUANTITY_EMPTY` for `RPCQUANTITY_ZERO`. This is all so we don't\n            // have to have a \"treat empty as 0` check in every function that uses the\n            // \"latest\" block (which this genesis block will be for brief moment).\n            const rawBlockNumber = utils_1.RPCQUANTITY_EMPTY;\n            // create the genesis block\n            const baseFeePerGas = this.common.isActivatedEIP(1559)\n                ? ethereum_block_1.Block.INITIAL_BASE_FEE_PER_GAS\n                : undefined;\n            const genesis = new ethereum_block_1.RuntimeBlock(rawBlockNumber, utils_1.Data.from(utils_1.BUFFER_32_ZERO), this.coinbase, blockGasLimit.toBuffer(), utils_2.BUFFER_ZERO, utils_1.Quantity.from(timestamp), __classPrivateFieldGet(this, _Blockchain_options, \"f\").miner.difficulty, utils_1.RPCQUANTITY_ZERO, // we start the totalDifficulty at 0\n            baseFeePerGas);\n            // store the genesis block in the database\n            const { block, serialized } = genesis.finalize(ethereumjs_util_1.KECCAK256_RLP, ethereumjs_util_1.KECCAK256_RLP, utils_1.BUFFER_256_ZERO, this.trie.root, 0n, __classPrivateFieldGet(this, _Blockchain_options, \"f\").miner.extraData, [], new Map());\n            // README: set the block number to an actual 0 now.\n            block.header.number = utils_1.RPCQUANTITY_ZERO;\n            const hash = block.hash();\n            return this.blocks\n                .putBlock(block.header.number.toBuffer(), hash, serialized)\n                .then(_ => ({\n                block,\n                blockLogs: ethereum_utils_1.BlockLogs.create(hash)\n            }));\n        });\n        _Blockchain_timeAdjustment.set(this, 0);\n        /**\n         * Returns the timestamp, adjusted by the timeAdjustment offset, in seconds.\n         */\n        _Blockchain_currentTime.set(this, () => {\n            return Math.floor((Date.now() + __classPrivateFieldGet(this, _Blockchain_timeAdjustment, \"f\")) / 1000);\n        });\n        _Blockchain_deleteBlockData.set(this, async (blocksToDelete, newLatestBlockNumber) => {\n            // if we are forking we need to make sure we clean up the forking related\n            // metadata that isn't stored in the trie\n            if (\"revertMetaData\" in this.trie) {\n                await this.trie.revertMetaData(blocksToDelete[blocksToDelete.length - 1].header.number, blocksToDelete[0].header.number);\n            }\n            await __classPrivateFieldGet(this, _Blockchain_database, \"f\").batch(() => {\n                const { blocks, transactions, transactionReceipts, blockLogs } = this;\n                // point to the new \"latest\" again\n                blocks.updateLatestIndex(newLatestBlockNumber);\n                // clean up old blocks\n                blocksToDelete.forEach(block => {\n                    block.getTransactions().forEach(tx => {\n                        const txHash = tx.hash.toBuffer();\n                        transactions.del(txHash);\n                        transactionReceipts.del(txHash);\n                    });\n                    const blockNum = block.header.number.toBuffer();\n                    blocks.del(blockNum);\n                    blocks.del(block.hash().toBuffer());\n                    blockLogs.del(blockNum);\n                });\n            });\n        });\n        // TODO(stability): this.#snapshots is a potential unbound memory suck. Caller\n        // could call `evm_snapshot` over and over to grow the snapshot stack\n        // indefinitely. `this.#snapshots.blocks` is even worse. To solve this we\n        // might need to store in the db. An unlikely real problem, but possible.\n        _Blockchain_snapshots.set(this, {\n            snaps: [],\n            blocks: null,\n            unsubscribeFromBlocks: null\n        });\n        _Blockchain_traceTransaction.set(this, async (transaction, trie, newBlock, options, keys, contractAddress) => {\n            let currentDepth = -1;\n            const storageStack = [];\n            const blocks = this.blocks;\n            // ethereumjs vm doesn't use the callback style anymore\n            const blockchain = {\n                getBlock: async (number) => {\n                    const block = await blocks.get(number.toBuffer()).catch(_ => null);\n                    return block ? { hash: () => block.hash().toBuffer() } : null;\n                }\n            };\n            const common = this.fallback\n                ? this.fallback.getCommonForBlockNumber(this.common, BigInt(newBlock.header.number.toString()))\n                : this.common;\n            const vm = await vm_1.default.create({\n                state: trie,\n                activatePrecompiles: false,\n                common,\n                allowUnlimitedContractSize: this.vm.allowUnlimitedContractSize,\n                blockchain,\n                stateManager: this.fallback\n                    ? new state_manager_1.ForkStateManager({ common, trie: trie })\n                    : new index_1.DefaultStateManager({ common, trie: trie })\n            });\n            const storage = {};\n            // TODO: gas could go theoretically go over Number.MAX_SAFE_INTEGER.\n            // (Ganache v2 didn't handle this possibility either, so it hasn't been\n            // updated yet)\n            let gas = 0;\n            const structLogs = [];\n            const TraceData = (0, ethereum_utils_1.TraceDataFactory)();\n            const transactionEventContext = {};\n            const stepListener = async (event, next) => {\n                // See these docs:\n                // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n                if (__classPrivateFieldGet(this, _Blockchain_emitStepEvent, \"f\")) {\n                    this.emit(\"ganache:vm:tx:step\", (0, provider_events_1.makeStepEvent)(transactionEventContext, event));\n                }\n                const gasLeft = event.gasLeft.toNumber();\n                const totalGasUsedAfterThisStep = transaction.gasLimit.toNumber() - gasLeft;\n                const gasUsedPreviousStep = totalGasUsedAfterThisStep - gas;\n                gas += gasUsedPreviousStep;\n                const memory = [];\n                if (options.disableMemory !== true) {\n                    // We get the memory as one large array.\n                    // Let's cut it up into 32 byte chunks as required by the spec.\n                    let index = 0;\n                    while (index < event.memory.length) {\n                        const slice = event.memory.slice(index, index + 32);\n                        memory.push(TraceData.from(Buffer.from(slice)));\n                        index += 32;\n                    }\n                }\n                const stack = [];\n                if (options.disableStack !== true) {\n                    for (const stackItem of event.stack) {\n                        stack.push(TraceData.from(stackItem.toArrayLike(Buffer)));\n                    }\n                }\n                const structLog = {\n                    depth: event.depth + 1,\n                    error: \"\",\n                    gas: gasLeft,\n                    gasCost: 0,\n                    memory,\n                    op: event.opcode.name,\n                    pc: event.pc,\n                    stack,\n                    storage: null\n                };\n                // The gas difference calculated for each step is indicative of gas consumed in\n                // the previous step. Gas consumption in the final step will always be zero.\n                if (structLogs.length) {\n                    structLogs[structLogs.length - 1].gasCost = gasUsedPreviousStep;\n                }\n                if (options.disableStorage === true) {\n                    // Add the struct log as is - nothing more to do.\n                    structLogs.push(structLog);\n                    next();\n                }\n                else {\n                    const { depth: eventDepth } = event;\n                    if (currentDepth > eventDepth) {\n                        storageStack.pop();\n                    }\n                    else if (currentDepth < eventDepth) {\n                        storageStack.push(new ethereum_utils_1.TraceStorageMap());\n                    }\n                    currentDepth = eventDepth;\n                    switch (event.opcode.name) {\n                        case \"SSTORE\": {\n                            const key = stack[stack.length - 1];\n                            const value = stack[stack.length - 2];\n                            // new TraceStorageMap() here creates a shallow clone, to prevent other steps from overwriting\n                            structLog.storage = new ethereum_utils_1.TraceStorageMap(storageStack[eventDepth]);\n                            // Tell vm to move on to the next instruction. See below.\n                            structLogs.push(structLog);\n                            next();\n                            // assign after callback because this storage change actually takes\n                            // effect _after_ this opcode executes\n                            storageStack[eventDepth].set(key, value);\n                            break;\n                        }\n                        case \"SLOAD\": {\n                            const key = stack[stack.length - 1];\n                            const result = await vm.stateManager.getContractStorage(event.address, key.toBuffer());\n                            const value = TraceData.from(result);\n                            storageStack[eventDepth].set(key, value);\n                            // new TraceStorageMap() here creates a shallow clone, to prevent other steps from overwriting\n                            structLog.storage = new ethereum_utils_1.TraceStorageMap(storageStack[eventDepth]);\n                            structLogs.push(structLog);\n                            next();\n                            break;\n                        }\n                        default:\n                            // new TraceStorageMap() here creates a shallow clone, to prevent other steps from overwriting\n                            structLog.storage = new ethereum_utils_1.TraceStorageMap(storageStack[eventDepth]);\n                            structLogs.push(structLog);\n                            next();\n                    }\n                }\n            };\n            // Don't even let the vm try to flush the block's _cache to the stateTrie.\n            // When forking some of the data that the traced function may request will\n            // exist only on the main chain. Because we pretty much lie to the VM by\n            // telling it we DO have data in our Trie, when we really don't, it gets\n            // lost during the commit phase when it traverses the \"borrowed\" datum's\n            // trie (as it may not have a valid root). Because this is a trace, and we\n            // don't need to commit the data, duck punching the `flush` method (the\n            // simplest method I could find) is fine.\n            // Remove this and you may see the infamous\n            // `Uncaught TypeError: Cannot read property 'pop' of undefined` error!\n            vm.stateManager._cache.flush = () => { };\n            // Process the block without committing the data.\n            // The vmerr key on the result appears to be removed.\n            // The previous implementation had specific error handling.\n            // It's possible we've removed handling specific cases in this implementation.\n            // e.g., the previous incantation of RuntimeError\n            await vm.stateManager.checkpoint();\n            try {\n                for (let i = 0, l = newBlock.transactions.length; i < l; i++) {\n                    const tx = newBlock.transactions[i];\n                    if (tx === transaction) {\n                        if (keys && contractAddress) {\n                            const database = __classPrivateFieldGet(this, _Blockchain_database, \"f\");\n                            const ejsContractAddress = { buf: contractAddress };\n                            await Promise.all(keys.map(async (key) => {\n                                // get the raw key using the hashed key\n                                const rawKey = await database.storageKeys.get(key);\n                                const result = await vm.stateManager.getContractStorage(ejsContractAddress, rawKey);\n                                storage[utils_1.Data.from(key, key.length).toString()] = {\n                                    key: utils_1.Data.from(rawKey, rawKey.length),\n                                    value: utils_1.Data.from(result, 32)\n                                };\n                            }));\n                            break;\n                        }\n                        else {\n                            vm.on(\"step\", stepListener);\n                            // force the loop to break after running this transaction by setting\n                            // the current iteration past the end\n                            i = l;\n                        }\n                    }\n                    this.emit(\"ganache:vm:tx:before\", {\n                        context: transactionEventContext\n                    });\n                    await vm.runTx({ tx, block: newBlock });\n                    this.emit(\"ganache:vm:tx:after\", {\n                        context: transactionEventContext\n                    });\n                }\n                vm.removeListener(\"step\", stepListener);\n            }\n            finally {\n                await vm.stateManager.revert();\n            }\n            // send state results back\n            return {\n                gas,\n                structLogs,\n                returnValue: \"\",\n                storage\n            };\n        });\n        _Blockchain_prepareNextBlock.set(this, (targetBlock, parentBlock, transactionHash) => {\n            // Prepare the \"next\" block with necessary transactions\n            const newBlock = new ethereum_block_1.RuntimeBlock(utils_1.Quantity.from((parentBlock.header.number.toBigInt() || 0n) + 1n), parentBlock.hash(), parentBlock.header.miner, parentBlock.header.gasLimit.toBuffer(), utils_2.BUFFER_ZERO, \n            // make sure we use the same timestamp as the target block\n            targetBlock.header.timestamp, __classPrivateFieldGet(this, _Blockchain_options, \"f\").miner.difficulty, parentBlock.header.totalDifficulty, ethereum_block_1.Block.calcNextBaseFee(parentBlock));\n            newBlock.transactions = [];\n            newBlock.uncleHeaders = [];\n            const transactions = targetBlock.getTransactions();\n            for (const tx of transactions) {\n                newBlock.transactions.push(tx.toVmTransaction());\n                // After including the target transaction, that's all we need to do.\n                if (tx.hash.toBuffer().equals(transactionHash)) {\n                    break;\n                }\n            }\n            return newBlock;\n        });\n        __classPrivateFieldSet(this, _Blockchain_options, options, \"f\");\n        this.fallback = fallback;\n        this.coinbase = coinbase;\n        __classPrivateFieldSet(this, _Blockchain_instamine, !options.miner.blockTime || options.miner.blockTime <= 0, \"f\");\n        __classPrivateFieldSet(this, _Blockchain_database, new database_1.default(options.database, this), \"f\");\n    }\n    async initialize(initialAccounts) {\n        const database = __classPrivateFieldGet(this, _Blockchain_database, \"f\");\n        const options = __classPrivateFieldGet(this, _Blockchain_options, \"f\");\n        const instamine = __classPrivateFieldGet(this, _Blockchain_instamine, \"f\");\n        try {\n            let common;\n            if (this.fallback) {\n                await this.fallback.initialize();\n                await database.initialize();\n                common = this.common = this.fallback.common;\n                options.fork.blockNumber = this.fallback.blockNumber.toNumber();\n                options.chain.networkId = common.networkId();\n                options.chain.chainId = common.chainId();\n            }\n            else {\n                await database.initialize();\n                common = this.common = createCommon(options.chain.chainId, options.chain.networkId, options.chain.hardfork);\n            }\n            const blocks = (this.blocks = await block_manager_1.default.initialize(this, common, database.blockIndexes, database.blocks));\n            this.blockLogs = new blocklog_manager_1.default(database.blockLogs, this);\n            this.transactions = new transaction_manager_1.default(options.miner, common, this, database.transactions);\n            this.transactionReceipts = new transaction_receipt_manager_1.default(database.transactionReceipts, this);\n            this.accounts = new account_manager_1.default(this);\n            this.storageKeys = database.storageKeys;\n            // if we have a latest block, use it to set up the trie.\n            const { latest } = blocks;\n            {\n                let stateRoot;\n                if (latest) {\n                    __classPrivateFieldSet(this, _Blockchain_blockBeingSavedPromise, Promise.resolve({\n                        block: latest,\n                        blockLogs: null\n                    }), \"f\");\n                    ({ stateRoot } = latest.header);\n                }\n                else {\n                    stateRoot = null;\n                }\n                this.trie = makeTrie(this, database.trie, stateRoot);\n            }\n            // create VM and listen to step events\n            this.vm = await this.createVmFromStateTrie(this.trie, options.chain.allowUnlimitedContractSize, true);\n            {\n                // create first block\n                let firstBlockTime;\n                if (options.chain.time != null) {\n                    // If we were given a timestamp, use it instead of the `_currentTime`\n                    const t = options.chain.time.getTime();\n                    firstBlockTime = Math.floor(t / 1000);\n                    this.setTime(t);\n                }\n                else {\n                    firstBlockTime = __classPrivateFieldGet(this, _Blockchain_currentTime, \"f\").call(this);\n                }\n                // if we don't already have a latest block, create a genesis block!\n                if (!latest) {\n                    if (initialAccounts.length > 0) {\n                        await __classPrivateFieldGet(this, _Blockchain_commitAccounts, \"f\").call(this, initialAccounts);\n                    }\n                    __classPrivateFieldSet(this, _Blockchain_blockBeingSavedPromise, __classPrivateFieldGet(this, _Blockchain_initializeGenesisBlock, \"f\").call(this, firstBlockTime, options.miner.blockGasLimit, initialAccounts), \"f\");\n                    blocks.earliest = blocks.latest =\n                        await __classPrivateFieldGet(this, _Blockchain_blockBeingSavedPromise, \"f\").then(({ block }) => block);\n                }\n            }\n            {\n                // configure and start miner\n                const txPool = this.transactions.transactionPool;\n                const minerOpts = options.miner;\n                const miner = (__classPrivateFieldSet(this, _Blockchain_miner, new miner_1.default(minerOpts, txPool.executables, this.vm, __classPrivateFieldGet(this, _Blockchain_readyNextBlock, \"f\")), \"f\"));\n                //#region re-emit miner events:\n                miner.on(\"ganache:vm:tx:before\", event => {\n                    this.emit(\"ganache:vm:tx:before\", event);\n                });\n                miner.on(\"ganache:vm:tx:step\", event => {\n                    if (!__classPrivateFieldGet(this, _Blockchain_emitStepEvent, \"f\"))\n                        return;\n                    this.emit(\"ganache:vm:tx:step\", event);\n                });\n                miner.on(\"ganache:vm:tx:after\", event => {\n                    this.emit(\"ganache:vm:tx:after\", event);\n                });\n                //#endregion\n                //#region automatic mining\n                const nullResolved = Promise.resolve(null);\n                const mineAll = (maxTransactions) => __classPrivateFieldGet(this, _Blockchain_isPaused, \"f\").call(this) ? nullResolved : this.mine(maxTransactions);\n                if (instamine) {\n                    // insta mining\n                    // whenever the transaction pool is drained mine the txs into blocks\n                    txPool.on(\"drain\", mineAll.bind(null, miner_1.Capacity.Single));\n                }\n                else {\n                    // interval mining\n                    const wait = () => \n                    // unref, so we don't hold the chain open if nothing can interact with it\n                    (0, utils_1.unref)((__classPrivateFieldSet(this, _Blockchain_timer, setTimeout(next, minerOpts.blockTime * 1e3), \"f\")));\n                    const next = () => mineAll(miner_1.Capacity.FillBlock).then(wait);\n                    wait();\n                }\n                //#endregion\n                miner.on(\"block\", __classPrivateFieldGet(this, _Blockchain_handleNewBlockData, \"f\"));\n                this.once(\"stop\").then(() => miner.clearListeners());\n            }\n        }\n        catch (e) {\n            // we failed to start up :-( bail!\n            __classPrivateFieldSet(this, _Blockchain_state, Status.stopping, \"f\");\n            // ignore errors while stopping here, since we are already in an\n            // exceptional case\n            await this.stop().catch(_ => { });\n            throw e;\n        }\n        __classPrivateFieldSet(this, _Blockchain_state, Status.started, \"f\");\n        this.emit(\"ready\");\n    }\n    pause() {\n        __classPrivateFieldSet(this, _Blockchain_state, __classPrivateFieldGet(this, _Blockchain_state, \"f\") | Status.paused, \"f\");\n    }\n    resume(_threads = 1) {\n        if (!__classPrivateFieldGet(this, _Blockchain_isPaused, \"f\").call(this)) {\n            console.log(\"Warning: startMining called when miner was already started\");\n            return;\n        }\n        // toggles the `paused` bit\n        __classPrivateFieldSet(this, _Blockchain_state, __classPrivateFieldGet(this, _Blockchain_state, \"f\") ^ Status.paused, \"f\");\n        // if we are instamining mine a block right away\n        if (__classPrivateFieldGet(this, _Blockchain_instamine, \"f\")) {\n            return this.mine(miner_1.Capacity.FillBlock);\n        }\n    }\n    /**\n     * @param seconds -\n     * @returns the total time offset *in milliseconds*\n     */\n    increaseTime(seconds) {\n        if (seconds < 0) {\n            seconds = 0;\n        }\n        return (__classPrivateFieldSet(this, _Blockchain_timeAdjustment, __classPrivateFieldGet(this, _Blockchain_timeAdjustment, \"f\") + seconds, \"f\"));\n    }\n    /**\n     * @param seconds -\n     * @returns the total time offset *in milliseconds*\n     */\n    setTime(timestamp) {\n        return (__classPrivateFieldSet(this, _Blockchain_timeAdjustment, timestamp - Date.now(), \"f\"));\n    }\n    snapshot() {\n        const snapshots = __classPrivateFieldGet(this, _Blockchain_snapshots, \"f\");\n        const snaps = snapshots.snaps;\n        // Subscription ids are based on the number of active snapshots. Weird? Yes.\n        // But it's the way it's been since the beginning so it just hasn't been\n        // changed. Feel free to change it so ids are unique if it bothers you\n        // enough.\n        const id = snaps.push({\n            block: this.blocks.latest,\n            timeAdjustment: __classPrivateFieldGet(this, _Blockchain_timeAdjustment, \"f\")\n        });\n        // start listening to new blocks if this is the first snapshot\n        if (id === 1) {\n            snapshots.unsubscribeFromBlocks = this.on(\"block\", block => {\n                snapshots.blocks = {\n                    current: block.hash().toBuffer(),\n                    next: snapshots.blocks\n                };\n            });\n        }\n        __classPrivateFieldGet(this, _Blockchain_options, \"f\").logging.logger.log(\"Saved snapshot #\" + id);\n        return id;\n    }\n    async revert(snapshotId) {\n        const rawValue = snapshotId.valueOf();\n        if (rawValue === null || rawValue === undefined) {\n            throw new Error(\"invalid snapshotId\");\n        }\n        __classPrivateFieldGet(this, _Blockchain_options, \"f\").logging.logger.log(\"Reverting to snapshot #\" + snapshotId);\n        // snapshot ids can't be < 1, so we do a quick sanity check here\n        if (rawValue < 1n) {\n            return false;\n        }\n        const snapshots = __classPrivateFieldGet(this, _Blockchain_snapshots, \"f\");\n        const snaps = snapshots.snaps;\n        const snapshotIndex = Number(rawValue - 1n);\n        const snapshot = snaps[snapshotIndex];\n        if (!snapshot) {\n            return false;\n        }\n        // pause processing new transactions...\n        await this.transactions.pause();\n        // then pause the miner, too.\n        await __classPrivateFieldGet(this, _Blockchain_miner, \"f\").pause();\n        // wait for anything in the process of being saved to finish up\n        await __classPrivateFieldGet(this, _Blockchain_blockBeingSavedPromise, \"f\");\n        // Pending transactions are always removed when you revert, even if they\n        // were present before the snapshot was created. Ideally, we'd remove only\n        // the new transactions.. but we'll leave that for another day.\n        this.transactions.clear();\n        const blocks = this.blocks;\n        const currentHash = blocks.latest.hash().toBuffer();\n        const snapshotBlock = snapshot.block;\n        const snapshotHeader = snapshotBlock.header;\n        const snapshotHash = snapshotBlock.hash().toBuffer();\n        // remove this and all stored snapshots after this snapshot\n        snaps.splice(snapshotIndex);\n        // if there are no more listeners, stop listening to new blocks\n        if (snaps.length === 0) {\n            snapshots.unsubscribeFromBlocks();\n        }\n        // if the snapshot's hash is different than the latest block's hash we've\n        // got new blocks to clean up.\n        if (!currentHash.equals(snapshotHash)) {\n            // if we've added blocks since we snapshotted we need to delete them and put\n            // some things back the way they were.\n            const blockPromises = [];\n            let blockList = snapshots.blocks;\n            while (blockList !== null) {\n                if (blockList.current.equals(snapshotHash))\n                    break;\n                blockPromises.push(blocks.getByHash(blockList.current));\n                blockList = blockList.next;\n            }\n            snapshots.blocks = blockList;\n            const blockData = await Promise.all(blockPromises);\n            await __classPrivateFieldGet(this, _Blockchain_deleteBlockData, \"f\").call(this, blockData, snapshotHeader.number.toBuffer());\n            setStateRootSync(this.vm.stateManager, snapshotHeader.stateRoot.toBuffer());\n            blocks.latest = snapshotBlock;\n        }\n        // put our time adjustment back\n        __classPrivateFieldSet(this, _Blockchain_timeAdjustment, snapshot.timeAdjustment, \"f\");\n        // resume mining\n        __classPrivateFieldGet(this, _Blockchain_miner, \"f\").resume();\n        // resume processing transactions\n        this.transactions.resume();\n        return true;\n    }\n    async queueTransaction(transaction, secretKey) {\n        // NOTE: this.transactions.add *must* be awaited before returning the\n        // `transaction.hash()`, as the transactionPool may change the transaction\n        // (and thus its hash!)\n        // It may also throw Errors that must be returned to the caller.\n        const isExecutable = (await this.transactions.add(transaction, secretKey)) === true;\n        if (isExecutable) {\n            process.nextTick(this.emit.bind(this), \"pendingTransaction\", transaction);\n        }\n        const hash = transaction.hash;\n        if (__classPrivateFieldGet(this, _Blockchain_isPaused, \"f\").call(this) || !__classPrivateFieldGet(this, _Blockchain_instamine, \"f\")) {\n            return hash;\n        }\n        else {\n            if (__classPrivateFieldGet(this, _Blockchain_instamine, \"f\") && __classPrivateFieldGet(this, _Blockchain_options, \"f\").miner.instamine === \"eager\") {\n                // in eager instamine mode we must wait for the transaction to be saved\n                // before we can return the hash\n                const { status, error } = await transaction.once(\"finalized\");\n                // in eager instamine mode we must throw on all rejected transaction\n                // errors. We must also throw on `confirmed` transactions when\n                // vmErrorsOnRPCResponse is enabled.\n                if (error &&\n                    (status === \"rejected\" || __classPrivateFieldGet(this, _Blockchain_options, \"f\").chain.vmErrorsOnRPCResponse))\n                    throw error;\n            }\n            return hash;\n        }\n    }\n    async simulateTransaction(transaction, parentBlock) {\n        let result;\n        const data = transaction.data;\n        let gasLimit = transaction.gas.toBigInt();\n        // subtract out the transaction's base fee from the gas limit before\n        // simulating the tx, because `runCall` doesn't account for raw gas costs.\n        const hasToAddress = transaction.to != null;\n        let to = null;\n        if (hasToAddress) {\n            const toBuf = transaction.to.toBuffer();\n            to = {\n                equals: (a) => toBuf.equals(a.buf),\n                buf: toBuf\n            };\n        }\n        else {\n            to = null;\n        }\n        const common = this.fallback\n            ? this.fallback.getCommonForBlockNumber(this.common, BigInt(transaction.block.header.number.toString()))\n            : this.common;\n        const gasLeft = gasLimit - (0, ethereum_transaction_1.calculateIntrinsicGas)(data, hasToAddress, common);\n        const transactionContext = {};\n        this.emit(\"ganache:vm:tx:before\", {\n            context: transactionContext\n        });\n        if (gasLeft >= 0n) {\n            const stateTrie = this.trie.copy(false);\n            stateTrie.setContext(parentBlock.header.stateRoot.toBuffer(), null, parentBlock.header.number);\n            const vm = await this.createVmFromStateTrie(stateTrie, __classPrivateFieldGet(this, _Blockchain_options, \"f\").chain.allowUnlimitedContractSize, false, // precompiles have already been initialized in the stateTrie\n            common);\n            // take a checkpoint so the `runCall` never writes to the trie. We don't\n            // commit/revert later because this stateTrie is ephemeral anyway.\n            vm.stateManager.checkpoint();\n            vm.on(\"step\", (event) => {\n                if (!__classPrivateFieldGet(this, _Blockchain_emitStepEvent, \"f\"))\n                    return;\n                const ganacheStepEvent = (0, provider_events_1.makeStepEvent)(transactionContext, event);\n                this.emit(\"ganache:vm:tx:step\", ganacheStepEvent);\n            });\n            const caller = transaction.from.toBuffer();\n            if (common.isActivatedEIP(2929)) {\n                const stateManager = vm.stateManager;\n                // handle Berlin hardfork warm storage reads\n                (0, precompiles_1.warmPrecompiles)(stateManager);\n                stateManager.addWarmedAddress(caller);\n                if (to)\n                    stateManager.addWarmedAddress(to.buf);\n            }\n            // we need to update the balance and nonce of the sender _before_\n            // we run this transaction so that things that rely on these values\n            // are correct (like contract creation!).\n            const fromAccount = await vm.stateManager.getAccount({\n                buf: caller\n            });\n            fromAccount.nonce.iaddn(1);\n            const txCost = new ethereumjs_util_1.BN((gasLimit * transaction.gasPrice.toBigInt()).toString());\n            fromAccount.balance.isub(txCost);\n            await vm.stateManager.putAccount({ buf: caller }, fromAccount);\n            // finally, run the call\n            result = await vm.runCall({\n                caller: {\n                    buf: caller,\n                    equals: (a) => caller.equals(a.buf)\n                },\n                data: transaction.data && transaction.data.toBuffer(),\n                gasPrice: new ethereumjs_util_1.BN(transaction.gasPrice.toBuffer()),\n                gasLimit: new ethereumjs_util_1.BN(utils_1.Quantity.from(gasLeft).toBuffer()),\n                to,\n                value: transaction.value == null\n                    ? new ethereumjs_util_1.BN(0)\n                    : new ethereumjs_util_1.BN(transaction.value.toBuffer()),\n                block: transaction.block\n            });\n        }\n        else {\n            result = {\n                execResult: {\n                    runState: { programCounter: 0 },\n                    exceptionError: new exceptions_1.VmError(exceptions_1.ERROR.OUT_OF_GAS),\n                    returnValue: utils_1.BUFFER_EMPTY\n                }\n            };\n        }\n        this.emit(\"ganache:vm:tx:after\", {\n            context: transactionContext\n        });\n        if (result.execResult.exceptionError) {\n            throw new ethereum_utils_1.CallError(result);\n        }\n        else {\n            return utils_1.Data.from(result.execResult.returnValue || \"0x\");\n        }\n    }\n    /**\n     * traceTransaction\n     *\n     * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n     * This will return the vm-level trace output for debugging purposes.\n     *\n     * Strategy:\n     *\n     *  1. Find block where transaction occurred\n     *  2. Set state root of that block\n     *  3. Rerun every transaction in that block prior to and including the requested transaction\n     *  4. Send trace results back.\n     *\n     * @param transactionHash -\n     * @param options -\n     */\n    async traceTransaction(transactionHash, options) {\n        const transactionHashBuffer = utils_1.Data.from(transactionHash).toBuffer();\n        // #1 - get block via transaction object\n        const transaction = await this.transactions.get(transactionHashBuffer);\n        if (!transaction) {\n            throw new Error(\"Unknown transaction \" + transactionHash);\n        }\n        const targetBlock = await this.blocks.getByHash(transaction.blockHash.toBuffer());\n        const parentBlock = await this.blocks.getByHash(targetBlock.header.parentHash.toBuffer());\n        const newBlock = __classPrivateFieldGet(this, _Blockchain_prepareNextBlock, \"f\").call(this, targetBlock, parentBlock, transactionHashBuffer);\n        // #2 - Set state root of original block\n        //\n        // TODO: Forking needs the forked block number passed during this step:\n        // https://github.com/trufflesuite/ganache/blob/develop/lib/blockchain_double.js#L917\n        const trie = this.trie.copy();\n        trie.setContext(parentBlock.header.stateRoot.toBuffer(), null, parentBlock.header.number);\n        // #3 - Rerun every transaction in block prior to and including the requested transaction\n        const { gas, structLogs, returnValue, storage } = await __classPrivateFieldGet(this, _Blockchain_traceTransaction, \"f\").call(this, newBlock.transactions[transaction.index.toNumber()], trie, newBlock, options);\n        // #4 - Send results back\n        return { gas, structLogs, returnValue, storage };\n    }\n    /**\n     * storageRangeAt\n     *\n     * Returns a contract's storage given a starting key and max number of\n     * entries to return.\n     *\n     * Strategy:\n     *\n     *  1. Find block where transaction occurred\n     *  2. Set state root of that block\n     *  3. Use contract address storage trie to get the storage keys from the transaction\n     *  4. Sort and filter storage keys using the startKey and maxResult\n     *  5. Rerun every transaction in that block prior to and including the requested transaction\n     *  6. Send storage results back\n     *\n     * @param blockHash -\n     * @param txIndex -\n     * @param contractAddress -\n     * @param startKey -\n     * @param maxResult -\n     */\n    async storageRangeAt(blockHash, txIndex, contractAddress, startKey, maxResult) {\n        // #1 - get block information\n        const targetBlock = await this.blocks.getByHash(blockHash);\n        // get transaction using txIndex\n        const transactions = targetBlock.getTransactions();\n        const transaction = transactions[txIndex];\n        if (!transaction) {\n            throw new Error(`transaction index ${txIndex} is out of range for block ${blockHash}`);\n        }\n        // #2 - set state root of block\n        const parentBlock = await this.blocks.getByHash(targetBlock.header.parentHash.toBuffer());\n        const trie = makeTrie(this, __classPrivateFieldGet(this, _Blockchain_database, \"f\").trie, parentBlock.header.stateRoot);\n        // get the contractAddress account storage trie\n        const contractAddressBuffer = ethereum_address_1.Address.from(contractAddress).toBuffer();\n        const addressData = await trie.get(contractAddressBuffer);\n        if (!addressData) {\n            throw new Error(`account ${contractAddress} doesn't exist`);\n        }\n        // #3 - use the contractAddress storage trie to get relevant hashed keys\n        const getStorageKeys = () => {\n            const storageTrie = trie.copy(false);\n            // An address's stateRoot is stored in the 3rd rlp entry\n            storageTrie.setContext((0, rlp_1.decode)(addressData)[2], contractAddressBuffer, parentBlock.header.number);\n            return new Promise((resolve, reject) => {\n                const startKeyBuffer = utils_1.Data.from(startKey).toBuffer();\n                const compare = (a, b) => a.compare(b) < 0;\n                const keys = [];\n                const handleData = ({ key }) => {\n                    // ignore anything that comes before our starting point\n                    if (startKeyBuffer.compare(key) > 0)\n                        return;\n                    // #4 - sort and filter keys\n                    // insert the key exactly where it needs to go in the array\n                    const position = (0, utils_1.findInsertPosition)(keys, key, compare);\n                    // ignore if the value couldn't possibly be relevant\n                    if (position > maxResult)\n                        return;\n                    keys.splice(position, 0, key);\n                };\n                const handleEnd = () => {\n                    if (keys.length > maxResult) {\n                        // we collected too much data, so we've got to trim it a bit\n                        resolve({\n                            // only take the maximum number of entries requested\n                            keys: keys.slice(0, maxResult),\n                            // assign nextKey\n                            nextKey: utils_1.Data.from(keys[maxResult])\n                        });\n                    }\n                    else {\n                        resolve({\n                            keys,\n                            nextKey: null\n                        });\n                    }\n                };\n                const rs = storageTrie.createReadStream();\n                rs.on(\"data\", handleData).on(\"error\", reject).on(\"end\", handleEnd);\n            });\n        };\n        const { keys, nextKey } = await getStorageKeys();\n        // #5 -  rerun every transaction in that block prior to and including the requested transaction\n        // prepare block to be run in traceTransaction\n        const transactionHashBuffer = transaction.hash.toBuffer();\n        const newBlock = __classPrivateFieldGet(this, _Blockchain_prepareNextBlock, \"f\").call(this, targetBlock, parentBlock, transactionHashBuffer);\n        // get storage data given a set of keys\n        const options = {\n            disableMemory: true,\n            disableStack: true,\n            disableStorage: false\n        };\n        const { storage } = await __classPrivateFieldGet(this, _Blockchain_traceTransaction, \"f\").call(this, newBlock.transactions[transaction.index.toNumber()], trie, newBlock, options, keys, contractAddressBuffer);\n        // #6 - send back results\n        return {\n            storage,\n            nextKey\n        };\n    }\n    toggleStepEvent(enable) {\n        __classPrivateFieldSet(this, _Blockchain_emitStepEvent, enable, \"f\");\n        __classPrivateFieldGet(this, _Blockchain_miner, \"f\").toggleStepEvent(enable);\n    }\n    /**\n     * Gracefully shuts down the blockchain service and all of its dependencies.\n     */\n    async stop() {\n        // If the blockchain is still initializing we don't want to shut down\n        // yet because there may still be database calls in flight. Leveldb may\n        // cause a segfault due to a race condition between a db write and the close\n        // call.\n        if (__classPrivateFieldGet(this, _Blockchain_state, \"f\") === Status.starting) {\n            await this.once(\"ready\");\n        }\n        __classPrivateFieldSet(this, _Blockchain_state, Status.stopping, \"f\");\n        // stop the polling miner, if necessary\n        clearTimeout(__classPrivateFieldGet(this, _Blockchain_timer, \"f\"));\n        // clean up listeners\n        this.vm && this.vm.removeAllListeners();\n        // pause processing new transactions...\n        this.transactions && (await this.transactions.pause());\n        // then pause the miner, too.\n        __classPrivateFieldGet(this, _Blockchain_miner, \"f\") && (await __classPrivateFieldGet(this, _Blockchain_miner, \"f\").pause());\n        // wait for anything in the process of being saved to finish up\n        await __classPrivateFieldGet(this, _Blockchain_blockBeingSavedPromise, \"f\");\n        this.fallback && (await this.fallback.close());\n        await this.emit(\"stop\");\n        __classPrivateFieldGet(this, _Blockchain_database, \"f\") && (await __classPrivateFieldGet(this, _Blockchain_database, \"f\").close());\n        __classPrivateFieldSet(this, _Blockchain_state, Status.stopped, \"f\");\n    }\n}\nexports.default = Blockchain;\n_Blockchain_state = new WeakMap(), _Blockchain_miner = new WeakMap(), _Blockchain_blockBeingSavedPromise = new WeakMap(), _Blockchain_timer = new WeakMap(), _Blockchain_emitStepEvent = new WeakMap(), _Blockchain_database = new WeakMap(), _Blockchain_options = new WeakMap(), _Blockchain_instamine = new WeakMap(), _Blockchain_saveNewBlock = new WeakMap(), _Blockchain_emitNewBlock = new WeakMap(), _Blockchain_getTransactionLogOutput = new WeakMap(), _Blockchain_handleNewBlockData = new WeakMap(), _Blockchain_readyNextBlock = new WeakMap(), _Blockchain_isPaused = new WeakMap(), _Blockchain_commitAccounts = new WeakMap(), _Blockchain_initializeGenesisBlock = new WeakMap(), _Blockchain_timeAdjustment = new WeakMap(), _Blockchain_currentTime = new WeakMap(), _Blockchain_deleteBlockData = new WeakMap(), _Blockchain_snapshots = new WeakMap(), _Blockchain_traceTransaction = new WeakMap(), _Blockchain_prepareNextBlock = new WeakMap();\n//# sourceMappingURL=blockchain.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Connector_provider, _Connector_handle;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connector = exports.Provider = void 0;\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst provider_1 = __importDefault(require(\"./provider\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst bufferify_1 = require(\"./helpers/bufferify\");\nexports.Provider = provider_1.default;\nfunction isHttp(connection) {\n    return (connection.constructor.name === \"uWS.HttpRequest\" ||\n        connection.constructor.name === \"HttpRequest\");\n}\nclass Connector extends emittery_1.default {\n    constructor(providerOptions = null, executor) {\n        super();\n        _Connector_provider.set(this, void 0);\n        this.BUFFERIFY_THRESHOLD = Connector.BUFFERIFY_THRESHOLD;\n        _Connector_handle.set(this, (payload, connection) => {\n            const method = payload.method;\n            if (method === \"eth_subscribe\") {\n                if (isHttp(connection)) {\n                    return Promise.reject(new ethereum_utils_1.CodedError(\"notifications not supported\", utils_1.JsonRpcErrorCode.METHOD_NOT_SUPPORTED));\n                }\n            }\n            const params = payload.params;\n            return __classPrivateFieldGet(this, _Connector_provider, \"f\")._requestRaw({ method, params });\n        });\n        __classPrivateFieldSet(this, _Connector_provider, new provider_1.default(providerOptions, executor), \"f\");\n    }\n    get provider() {\n        return __classPrivateFieldGet(this, _Connector_provider, \"f\");\n    }\n    async connect() {\n        await __classPrivateFieldGet(this, _Connector_provider, \"f\").initialize();\n        // no need to wait for #provider.once(\"connect\") as the initialize()\n        // promise has already accounted for that after the promise is resolved\n        await this.emit(\"ready\");\n    }\n    parse(message) {\n        try {\n            return JSON.parse(message);\n        }\n        catch (e) {\n            throw new ethereum_utils_1.CodedError(e.message, utils_1.JsonRpcErrorCode.PARSE_ERROR);\n        }\n    }\n    handle(payload, connection) {\n        if (Array.isArray(payload)) {\n            // handle batch transactions\n            const promises = payload.map(payload => __classPrivateFieldGet(this, _Connector_handle, \"f\").call(this, payload, connection)\n                .then(({ value }) => value)\n                .catch(e => e));\n            return Promise.resolve({ value: Promise.all(promises) });\n        }\n        else {\n            return __classPrivateFieldGet(this, _Connector_handle, \"f\").call(this, payload, connection);\n        }\n    }\n    format(results, payload) {\n        if (Array.isArray(payload)) {\n            return JSON.stringify(payload.map((payload, i) => {\n                const result = results[i];\n                if (result instanceof Error) {\n                    return (0, utils_1.makeError)(payload.id, result);\n                }\n                else {\n                    return (0, utils_1.makeResponse)(payload.id, result);\n                }\n            }));\n        }\n        else {\n            const json = (0, utils_1.makeResponse)(payload.id, results);\n            if (payload.method === \"debug_traceTransaction\" &&\n                typeof results === \"object\" &&\n                Array.isArray(results.structLogs) &&\n                // for \"large\" debug_traceTransaction results we convert to individual\n                // parts of the response to Buffers, yielded via a Generator function,\n                // instead of using JSON.stringify. This is necessary because we:\n                //   * avoid V8's maximum string length limit of 1GB\n                //   * avoid and the max Buffer length limit of ~2GB (on 64bit\n                //     architectures).\n                //   * avoid heap allocation failures due to trying to hold too much\n                //     data in memory (which can happen if we don't immediately consume\n                //     the `format` result -- by buffering everything into one array,\n                //     for example)\n                //\n                // We don't do this for everything because the bufferfication is so very\n                // very slow.\n                //\n                // TODO(perf): an even better way of solving this would be to convert\n                // `debug_traceTransaction` to a generator that yields chunks (of\n                // Buffer) as soon as they're available. We could then `write` these\n                // individual chunks immediately and our memory use would stay\n                // relatively low and constant.\n                results.structLogs.length > this.BUFFERIFY_THRESHOLD) {\n                return (0, bufferify_1.bufferify)(json, \"\");\n            }\n            else {\n                return JSON.stringify(json);\n            }\n        }\n    }\n    formatError(error, payload) {\n        const json = (0, utils_1.makeError)(payload && payload.id ? payload.id : null, error);\n        return JSON.stringify(json);\n    }\n    close() {\n        return __classPrivateFieldGet(this, _Connector_provider, \"f\").disconnect();\n    }\n}\nexports.Connector = Connector;\n_Connector_provider = new WeakMap(), _Connector_handle = new WeakMap();\nConnector.BUFFERIFY_THRESHOLD = 100000;\n//# sourceMappingURL=connector.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AccountManager_blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nclass AccountManager {\n    constructor(blockchain) {\n        _AccountManager_blockchain.set(this, void 0);\n        __classPrivateFieldSet(this, _AccountManager_blockchain, blockchain, \"f\");\n    }\n    async get(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        const raw = await this.getRaw(address, blockNumber);\n        if (raw == null)\n            return null;\n        return ethereum_utils_1.Account.fromBuffer(raw);\n    }\n    async getRaw(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        const { trie, blocks } = __classPrivateFieldGet(this, _AccountManager_blockchain, \"f\");\n        // get the block, its state root, and the trie at that state root\n        const { stateRoot, number } = (await blocks.get(blockNumber)).header;\n        const trieCopy = trie.copy(false);\n        trieCopy.setContext(stateRoot.toBuffer(), null, number);\n        // get the account from the trie\n        return await trieCopy.get(address.toBuffer());\n    }\n    async getStorageAt(address, key, blockNumber = ethereum_utils_1.Tag.latest) {\n        const { trie, blocks } = __classPrivateFieldGet(this, _AccountManager_blockchain, \"f\");\n        // get the block, its state root, and the trie at that state root\n        const { stateRoot, number } = (await blocks.get(blockNumber)).header;\n        const trieCopy = trie.copy(false);\n        trieCopy.setContext(stateRoot.toBuffer(), address.toBuffer(), number);\n        // get the account from the trie\n        return await trieCopy.get(key);\n    }\n    async getNonce(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        const data = await this.getRaw(address, blockNumber);\n        if (data == null)\n            return utils_1.RPCQUANTITY_ZERO;\n        const [nonce] = (0, rlp_1.decode)(data);\n        return nonce.length === 0 ? utils_1.RPCQUANTITY_ZERO : utils_1.Quantity.from(nonce);\n    }\n    async getBalance(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        const data = await this.getRaw(address, blockNumber);\n        if (data == null)\n            return utils_1.RPCQUANTITY_ZERO;\n        const [, balance] = (0, rlp_1.decode)(data);\n        return balance.length === 0 ? utils_1.RPCQUANTITY_ZERO : utils_1.Quantity.from(balance);\n    }\n    async getNonceAndBalance(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        const data = await this.getRaw(address, blockNumber);\n        if (data == null)\n            return { nonce: utils_1.RPCQUANTITY_ZERO, balance: utils_1.RPCQUANTITY_ZERO };\n        const [nonce, balance] = (0, rlp_1.decode)(data);\n        return {\n            nonce: nonce.length === 0 ? utils_1.RPCQUANTITY_ZERO : utils_1.Quantity.from(nonce),\n            balance: balance.length === 0 ? utils_1.RPCQUANTITY_ZERO : utils_1.Quantity.from(balance)\n        };\n    }\n    async getCode(address, blockNumber = ethereum_utils_1.Tag.latest) {\n        const data = await this.getRaw(address, blockNumber);\n        if (data == null)\n            return utils_1.DATA_EMPTY;\n        const [, , , codeHash] = (0, rlp_1.decode)(data);\n        if (codeHash.equals(ethereumjs_util_1.KECCAK256_NULL))\n            return utils_1.DATA_EMPTY;\n        else\n            return __classPrivateFieldGet(this, _AccountManager_blockchain, \"f\").trie.db.get(codeHash).then(utils_1.Data.from);\n    }\n}\nexports.default = AccountManager;\n_AccountManager_blockchain = new WeakMap();\n//# sourceMappingURL=account-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _BlockManager_blockchain, _BlockManager_common, _BlockManager_blockIndexes;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst LATEST_INDEX_KEY = utils_1.BUFFER_ZERO;\nconst NOTFOUND = 404;\nconst EMPTY_BUFFER = Buffer.from([]);\nclass BlockManager extends manager_1.default {\n    constructor(blockchain, common, blockIndexes, base) {\n        super(base, ethereum_block_1.Block, common);\n        _BlockManager_blockchain.set(this, void 0);\n        _BlockManager_common.set(this, void 0);\n        _BlockManager_blockIndexes.set(this, void 0);\n        this.fromFallback = async (tagOrBlockNumber) => {\n            const fallback = __classPrivateFieldGet(this, _BlockManager_blockchain, \"f\").fallback;\n            let blockNumber;\n            if (typeof tagOrBlockNumber === \"string\") {\n                blockNumber = tagOrBlockNumber;\n            }\n            else if (!fallback.isValidForkBlockNumber(tagOrBlockNumber)) {\n                // don't get the block if the requested block is _after_ our fallback's\n                // blocknumber because it doesn't exist in our local chain.\n                return null;\n            }\n            else {\n                blockNumber = tagOrBlockNumber.toString();\n            }\n            const json = await fallback.request(\"eth_getBlockByNumber\", [\n                blockNumber,\n                true\n            ]);\n            if (json == null) {\n                return null;\n            }\n            else {\n                const common = fallback.getCommonForBlockNumber(__classPrivateFieldGet(this, _BlockManager_common, \"f\"), BigInt(json.number));\n                return BlockManager.rawFromJSON(json, common);\n            }\n        };\n        __classPrivateFieldSet(this, _BlockManager_blockchain, blockchain, \"f\");\n        __classPrivateFieldSet(this, _BlockManager_common, common, \"f\");\n        __classPrivateFieldSet(this, _BlockManager_blockIndexes, blockIndexes, \"f\");\n    }\n    static async initialize(blockchain, common, blockIndexes, base) {\n        const bm = new BlockManager(blockchain, common, blockIndexes, base);\n        await bm.updateTaggedBlocks();\n        return bm;\n    }\n    static rawFromJSON(json, common) {\n        const header = [\n            utils_1.Data.from(json.parentHash).toBuffer(),\n            utils_1.Data.from(json.sha3Uncles).toBuffer(),\n            ethereum_address_1.Address.from(json.miner).toBuffer(),\n            utils_1.Data.from(json.stateRoot).toBuffer(),\n            utils_1.Data.from(json.transactionsRoot).toBuffer(),\n            utils_1.Data.from(json.receiptsRoot).toBuffer(),\n            utils_1.Data.from(json.logsBloom).toBuffer(),\n            utils_1.Quantity.from(json.difficulty).toBuffer(),\n            utils_1.Quantity.from(json.number).toBuffer(),\n            utils_1.Quantity.from(json.gasLimit).toBuffer(),\n            utils_1.Quantity.from(json.gasUsed).toBuffer(),\n            utils_1.Quantity.from(json.timestamp).toBuffer(),\n            utils_1.Data.from(json.extraData).toBuffer(),\n            utils_1.Data.from(json.mixHash).toBuffer(),\n            utils_1.Data.from(json.nonce).toBuffer()\n        ];\n        // only add baseFeePerGas if the block's JSON already has it\n        if (json.baseFeePerGas !== undefined) {\n            header[15] = utils_1.Data.from(json.baseFeePerGas).toBuffer();\n        }\n        const totalDifficulty = utils_1.Quantity.from(json.totalDifficulty).toBuffer();\n        const txs = [];\n        const extraTxs = [];\n        json.transactions.forEach((tx, index) => {\n            const blockExtra = [\n                utils_1.Quantity.from(tx.from).toBuffer(),\n                utils_1.Quantity.from(tx.hash).toBuffer()\n            ];\n            const txExtra = [\n                ...blockExtra,\n                utils_1.Data.from(json.hash).toBuffer(),\n                utils_1.Quantity.from(json.number).toBuffer(),\n                index\n            ];\n            const typedTx = ethereum_transaction_1.TransactionFactory.fromRpc(tx, common, txExtra);\n            const raw = typedTx.toEthRawTransaction(typedTx.v.toBuffer(), typedTx.r.toBuffer(), typedTx.s.toBuffer());\n            txs.push(raw);\n            extraTxs.push(blockExtra);\n        });\n        return (0, ethereum_block_1.serialize)([header, txs, [], totalDifficulty, extraTxs]).serialized;\n    }\n    getBlockByTag(tag) {\n        switch (tag) {\n            case \"latest\":\n                return this.latest;\n            case \"pending\":\n                // TODO: build a real pending block!\n                return this.latest; // this.createBlock(this.latest.header);\n            case \"earliest\":\n                return this.earliest;\n            default:\n                // the key is probably a hex string, let nature takes its course.\n                break;\n        }\n    }\n    getEffectiveNumber(tagOrBlockNumber = typeof ethereum_utils_1.Tag.latest) {\n        if (typeof tagOrBlockNumber === \"string\") {\n            const block = this.getBlockByTag(tagOrBlockNumber);\n            if (block) {\n                return block.header.number;\n            }\n        }\n        return utils_1.Quantity.from(tagOrBlockNumber);\n    }\n    async getNumberFromHash(hash) {\n        return __classPrivateFieldGet(this, _BlockManager_blockIndexes, \"f\").get(utils_1.Data.from(hash).toBuffer()).catch(e => {\n            if (e.status === NOTFOUND)\n                return null;\n            throw e;\n        });\n    }\n    async getByHash(hash) {\n        const number = await this.getNumberFromHash(hash);\n        if (number === null) {\n            const fallback = __classPrivateFieldGet(this, _BlockManager_blockchain, \"f\").fallback;\n            if (fallback) {\n                const json = await fallback.request(\"eth_getBlockByHash\", [\n                    utils_1.Data.from(hash),\n                    true\n                ]);\n                if (json) {\n                    const blockNumber = BigInt(json.number);\n                    if (blockNumber <= fallback.blockNumber.toBigInt()) {\n                        const common = fallback.getCommonForBlockNumber(__classPrivateFieldGet(this, _BlockManager_common, \"f\"), blockNumber);\n                        return new ethereum_block_1.Block(BlockManager.rawFromJSON(json, common), common);\n                    }\n                }\n            }\n            return null;\n        }\n        else {\n            return this.get(number);\n        }\n    }\n    async getRawByBlockNumber(blockNumber) {\n        // TODO(perf): make the block's raw fields accessible on latest/earliest/pending so\n        // we don't have to fetch them from the db each time a block tag is used.\n        const fallback = __classPrivateFieldGet(this, _BlockManager_blockchain, \"f\").fallback;\n        const numBuf = blockNumber.toBuffer();\n        return this.getRaw(numBuf).then(block => {\n            if (block == null && fallback) {\n                return this.fromFallback(blockNumber);\n            }\n            return block;\n        });\n    }\n    async get(tagOrBlockNumber) {\n        if (typeof tagOrBlockNumber === \"string\") {\n            const block = this.getBlockByTag(tagOrBlockNumber);\n            if (block)\n                return block;\n        }\n        const blockNumber = utils_1.Quantity.from(tagOrBlockNumber);\n        const block = await this.getRaw(blockNumber.toBuffer());\n        const common = __classPrivateFieldGet(this, _BlockManager_common, \"f\");\n        if (block)\n            return new ethereum_block_1.Block(block, common);\n        else {\n            const fallback = __classPrivateFieldGet(this, _BlockManager_blockchain, \"f\").fallback;\n            if (fallback) {\n                const block = await this.fromFallback(blockNumber);\n                if (block) {\n                    return new ethereum_block_1.Block(block, fallback.getCommonForBlockNumber(common, blockNumber.toBigInt()));\n                }\n            }\n        }\n        throw new Error(\"header not found\");\n    }\n    /**\n     * Writes the block object to the underlying database.\n     * @param block -\n     */\n    async putBlock(number, hash, serialized) {\n        let key = number;\n        // ensure we can store Block #0 as key \"00\", not \"\"\n        if (EMPTY_BUFFER.equals(key)) {\n            key = Buffer.from([0]);\n        }\n        const secondaryKey = hash.toBuffer();\n        await Promise.all([\n            __classPrivateFieldGet(this, _BlockManager_blockIndexes, \"f\").put(secondaryKey, key),\n            super.set(key, serialized)\n        ]);\n    }\n    /**\n     * Updates the \"latest\" index to point to the given number.\n     * @param number the block number of the latest block\n     */\n    async updateLatestIndex(number) {\n        await __classPrivateFieldGet(this, _BlockManager_blockIndexes, \"f\").put(LATEST_INDEX_KEY, number);\n    }\n    /**\n     * Updates the this.latest and this.earliest properties with data\n     * from the database.\n     */\n    async updateTaggedBlocks() {\n        const [earliest, latestBlockNumber] = await Promise.all([\n            new Promise((resolve, reject) => {\n                let earliest;\n                this.base\n                    .createValueStream({ limit: 1 })\n                    .on(\"data\", (data) => {\n                    earliest = new ethereum_block_1.Block(data, __classPrivateFieldGet(this, _BlockManager_common, \"f\"));\n                })\n                    .on(\"error\", (err) => {\n                    reject(err);\n                })\n                    .on(\"end\", () => {\n                    resolve(earliest);\n                });\n            }),\n            __classPrivateFieldGet(this, _BlockManager_blockIndexes, \"f\").get(LATEST_INDEX_KEY).catch(e => null)\n        ]);\n        if (earliest)\n            this.earliest = earliest;\n        if (latestBlockNumber) {\n            this.latest = await this.get(latestBlockNumber);\n        }\n        else {\n            // TODO: remove this section for the Ganache 8.0 release\n            // Ganache v7.0.0 didn't save a pointer to the latest block correctly, so\n            // when a database was restarted it would pull the wrong block. This code\n            // iterates over all data in the data base and finds the block with the\n            // highest block number and updates the database with the pointer so we\n            // don't have to hit this code again next time.\n            const stream = this.base.createValueStream();\n            this.latest = await new Promise((resolve, reject) => {\n                let latest;\n                stream.on(\"data\", (data) => {\n                    const block = new ethereum_block_1.Block(data, __classPrivateFieldGet(this, _BlockManager_common, \"f\"));\n                    if (!latest || block.header.number.toBigInt() > latest.header.number.toBigInt()) {\n                        latest = block;\n                    }\n                })\n                    .on(\"error\", (err) => {\n                    reject(err);\n                })\n                    .on(\"end\", () => {\n                    resolve(latest);\n                });\n            });\n            if (this.latest) {\n                // update the LATEST_INDEX_KEY index so we don't have to do this next time\n                await __classPrivateFieldGet(this, _BlockManager_blockIndexes, \"f\").put(LATEST_INDEX_KEY, this.latest.header.number.toBuffer()).catch(e => null);\n            }\n        }\n    }\n}\nexports.default = BlockManager;\n_BlockManager_blockchain = new WeakMap(), _BlockManager_common = new WeakMap(), _BlockManager_blockIndexes = new WeakMap();\n//# sourceMappingURL=block-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _BlockLogManager_blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst filter_parsing_1 = require(\"../helpers/filter-parsing\");\nclass BlockLogManager extends manager_1.default {\n    constructor(base, blockchain) {\n        super(base, ethereum_utils_1.BlockLogs);\n        _BlockLogManager_blockchain.set(this, void 0);\n        __classPrivateFieldSet(this, _BlockLogManager_blockchain, blockchain, \"f\");\n    }\n    async get(key) {\n        const log = await super.get(key);\n        if (log) {\n            log.blockNumber = utils_1.Quantity.from(key);\n        }\n        else if (__classPrivateFieldGet(this, _BlockLogManager_blockchain, \"f\").fallback) {\n            const block = utils_1.Quantity.from(key);\n            const res = await __classPrivateFieldGet(this, _BlockLogManager_blockchain, \"f\").fallback.request(\"eth_getLogs\", [{ fromBlock: block, toBlock: block }]);\n            return ethereum_utils_1.BlockLogs.fromJSON(res);\n        }\n        return log;\n    }\n    async getLogs(filter) {\n        const blockchain = __classPrivateFieldGet(this, _BlockLogManager_blockchain, \"f\");\n        if (\"blockHash\" in filter) {\n            const { addresses, topics } = (0, filter_parsing_1.parseFilterDetails)(filter);\n            const blockNumber = await blockchain.blocks.getNumberFromHash(filter.blockHash);\n            if (!blockNumber)\n                return [];\n            const logs = await this.get(blockNumber);\n            return logs ? [...logs.filter(addresses, topics)] : [];\n        }\n        else {\n            const { addresses, topics, fromBlock, toBlockNumber } = (0, filter_parsing_1.parseFilter)(filter, blockchain);\n            const pendingLogsPromises = [\n                this.get(fromBlock.toBuffer())\n            ];\n            const fromBlockNumber = fromBlock.toNumber();\n            // if we have a range of blocks to search, do that here:\n            if (fromBlockNumber !== toBlockNumber) {\n                // fetch all the blockLogs in-between `fromBlock` and `toBlock` (excluding\n                // from, because we already started fetching that one)\n                for (let i = fromBlockNumber + 1, l = toBlockNumber + 1; i < l; i++) {\n                    pendingLogsPromises.push(this.get(utils_1.Quantity.from(i).toBuffer()));\n                }\n            }\n            // now filter and compute all the blocks' blockLogs (in block order)\n            return Promise.all(pendingLogsPromises).then(blockLogsRange => {\n                const filteredBlockLogs = [];\n                blockLogsRange.forEach(blockLogs => {\n                    // TODO(perf): this loops over all addresses for every block.\n                    // Maybe make it loop only once?\n                    if (blockLogs)\n                        filteredBlockLogs.push(...blockLogs.filter(addresses, topics));\n                });\n                return filteredBlockLogs;\n            });\n        }\n    }\n}\nexports.default = BlockLogManager;\n_BlockLogManager_blockchain = new WeakMap();\n//# sourceMappingURL=blocklog-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Manager_Type, _Manager_options;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@ganache/utils\");\nconst NOTFOUND = 404;\nclass Manager {\n    constructor(base, type, options) {\n        _Manager_Type.set(this, void 0);\n        _Manager_options.set(this, void 0);\n        __classPrivateFieldSet(this, _Manager_Type, type, \"f\");\n        __classPrivateFieldSet(this, _Manager_options, options, \"f\");\n        this.base = base;\n    }\n    getRaw(key) {\n        if (typeof key === \"string\") {\n            key = utils_1.Data.from(key).toBuffer();\n        }\n        if (key.length === 0) {\n            key = utils_1.BUFFER_ZERO;\n        }\n        return this.base.get(key).catch(e => {\n            if (e.status === NOTFOUND)\n                return null;\n            throw e;\n        });\n    }\n    async get(key) {\n        const raw = await this.getRaw(key);\n        if (!raw)\n            return null;\n        return new (__classPrivateFieldGet(this, _Manager_Type, \"f\"))(raw, __classPrivateFieldGet(this, _Manager_options, \"f\"));\n    }\n    set(key, value) {\n        return this.base.put(key, value);\n    }\n    del(key) {\n        return this.base.del(key);\n    }\n}\nexports.default = Manager;\n_Manager_Type = new WeakMap(), _Manager_options = new WeakMap();\n//# sourceMappingURL=manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _TransactionManager_queue, _TransactionManager_paused, _TransactionManager_resumer, _TransactionManager_resolver, _TransactionManager_blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst transaction_pool_1 = __importDefault(require(\"../transaction-pool\"));\nconst promise_queue_1 = __importDefault(require(\"@ganache/promise-queue\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\n// since our Manager needs to receive and Instantiable class with a\n// consistent return type and our transaction factory can return\n// any number of transaction types, we pass in this empty\n// no op class to fool the Manager\nclass NoOp {\n}\nclass TransactionManager extends manager_1.default {\n    constructor(options, common, blockchain, base) {\n        super(base, ethereum_transaction_1.TransactionFactory, common);\n        _TransactionManager_queue.set(this, new promise_queue_1.default());\n        _TransactionManager_paused.set(this, false);\n        _TransactionManager_resumer.set(this, void 0);\n        _TransactionManager_resolver.set(this, void 0);\n        _TransactionManager_blockchain.set(this, void 0);\n        this.fromFallback = async (transactionHash) => {\n            const { fallback } = __classPrivateFieldGet(this, _TransactionManager_blockchain, \"f\");\n            const tx = await fallback.request(\"eth_getTransactionByHash\", [utils_1.Data.from(transactionHash).toString()]);\n            if (tx == null)\n                return null;\n            const blockHash = utils_1.Data.from(tx.blockHash, 32);\n            const blockNumber = utils_1.Quantity.from(tx.blockNumber);\n            const index = utils_1.Quantity.from(tx.transactionIndex);\n            // don't get the transaction if the requested transaction is _after_ our\n            // fallback's blocknumber because it doesn't exist in our local chain.\n            if (!fallback.isValidForkBlockNumber(blockNumber))\n                return null;\n            const extra = [\n                utils_1.Data.from(tx.from, 20).toBuffer(),\n                utils_1.Data.from(tx.hash, 32).toBuffer(),\n                blockHash.toBuffer(),\n                blockNumber.toBuffer(),\n                index.toBuffer(),\n                utils_1.Quantity.from(tx.gasPrice).toBuffer()\n            ];\n            const common = fallback.getCommonForBlockNumber(fallback.common, blockNumber.toBigInt());\n            const runTx = ethereum_transaction_1.TransactionFactory.fromRpc(tx, common, extra);\n            return runTx.serializeForDb(blockHash, blockNumber, index);\n        };\n        /**\n         * Resume processing transactions. Has no effect if not paused.\n         */\n        this.resume = () => {\n            if (!__classPrivateFieldGet(this, _TransactionManager_paused, \"f\"))\n                return;\n            __classPrivateFieldSet(this, _TransactionManager_paused, false, \"f\");\n            __classPrivateFieldGet(this, _TransactionManager_resolver, \"f\").call(this);\n        };\n        __classPrivateFieldSet(this, _TransactionManager_blockchain, blockchain, \"f\");\n        this.transactionPool = new transaction_pool_1.default(options, blockchain);\n    }\n    async getRaw(transactionHash) {\n        return super.getRaw(transactionHash).then(block => {\n            if (block == null && __classPrivateFieldGet(this, _TransactionManager_blockchain, \"f\").fallback) {\n                return this.fromFallback(transactionHash);\n            }\n            return block;\n        });\n    }\n    async get(key) {\n        const factory = (await super.get(key));\n        if (!factory)\n            return null;\n        return factory.tx;\n    }\n    /**\n     * Adds the transaction to the transaction pool.\n     *\n     * Returns a promise that is only resolved in the order it was added.\n     *\n     * @param transaction -\n     * @param secretKey -\n     * @returns `true` if the `transaction` is immediately executable, `false` if\n     * it may be valid in the future. Throws if the transaction is invalid.\n     */\n    async add(transaction, secretKey) {\n        if (__classPrivateFieldGet(this, _TransactionManager_paused, \"f\")) {\n            await __classPrivateFieldGet(this, _TransactionManager_resumer, \"f\");\n        }\n        // Because ganache requires determinism, we can't allow varying IO times to\n        // potentially affect the order in which transactions are inserted into the\n        // pool, so we use a FIFO queue to _return_ transaction insertions in the\n        // order the were received.\n        const insertion = this.transactionPool.prepareTransaction(transaction, secretKey);\n        const result = await __classPrivateFieldGet(this, _TransactionManager_queue, \"f\").add(insertion);\n        if (result) {\n            this.transactionPool.drain();\n        }\n        return result;\n    }\n    /**\n     * Immediately ignores all transactions that were in the process of being\n     * added to the pool. These transactions' `push` promises will be resolved\n     * immediately with the value `false` and will _not_ be added to the pool.\n     *\n     * Also clears all transactions that were already added to the pool.\n     *\n     * Transactions that are currently in the process of being mined may still be\n     * mined.\n     */\n    clear() {\n        __classPrivateFieldGet(this, _TransactionManager_queue, \"f\").clear(false);\n        this.transactionPool.clear();\n    }\n    /**\n     * Stop processing _new_ transactions; puts new requests in a queue. Has no\n     * affect if already paused.\n     */\n    async pause() {\n        if (!__classPrivateFieldGet(this, _TransactionManager_paused, \"f\")) {\n            // stop processing new transactions immediately\n            __classPrivateFieldSet(this, _TransactionManager_paused, true, \"f\");\n            __classPrivateFieldSet(this, _TransactionManager_resumer, new Promise(resolve => {\n                __classPrivateFieldSet(this, _TransactionManager_resolver, resolve, \"f\");\n            }), \"f\");\n        }\n        // then wait until all async things we were already processing are done\n        // before returning\n        if (__classPrivateFieldGet(this, _TransactionManager_queue, \"f\").isBusy()) {\n            await __classPrivateFieldGet(this, _TransactionManager_queue, \"f\").emit(\"idle\");\n        }\n    }\n}\nexports.default = TransactionManager;\n_TransactionManager_queue = new WeakMap(), _TransactionManager_paused = new WeakMap(), _TransactionManager_resumer = new WeakMap(), _TransactionManager_resolver = new WeakMap(), _TransactionManager_blockchain = new WeakMap();\n//# sourceMappingURL=transaction-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _TransactionReceiptManager_blockchain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst manager_1 = __importDefault(require(\"./manager\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nclass TransactionReceiptManager extends manager_1.default {\n    constructor(base, blockchain) {\n        super(base, ethereum_transaction_1.TransactionReceipt);\n        _TransactionReceiptManager_blockchain.set(this, void 0);\n        __classPrivateFieldSet(this, _TransactionReceiptManager_blockchain, blockchain, \"f\");\n    }\n    async get(key) {\n        const receipt = await super.get(key);\n        if (receipt) {\n            return receipt;\n        }\n        else if (__classPrivateFieldGet(this, _TransactionReceiptManager_blockchain, \"f\").fallback) {\n            const res = await __classPrivateFieldGet(this, _TransactionReceiptManager_blockchain, \"f\").fallback.request(\"eth_getTransactionReceipt\", [typeof key === \"string\" ? key : utils_1.Data.from(key)]);\n            if (!res)\n                return null;\n            const status = res.status === \"0x1\" ? utils_1.RPCQUANTITY_ONE.toBuffer() : utils_1.BUFFER_ZERO;\n            const cumulativeGasUsed = utils_1.Quantity.from(res.cumulativeGasUsed).toBuffer();\n            const logsBloom = utils_1.Data.from(res.logsBloom, 256).toBuffer();\n            const logs = res.logs.map(log => [\n                ethereum_address_1.Address.from(log.address).toBuffer(),\n                log.topics.map(topic => utils_1.Data.from(topic).toBuffer()),\n                Array.isArray(log.data)\n                    ? log.data.map(data => utils_1.Data.from(data).toBuffer())\n                    : utils_1.Data.from(log.data).toBuffer()\n            ]);\n            const gasUsed = utils_1.Quantity.from(res.gasUsed).toBuffer();\n            const contractAddress = res.contractAddress == null\n                ? utils_1.BUFFER_EMPTY\n                : ethereum_address_1.Address.from(res.contractAddress).toBuffer();\n            return ethereum_transaction_1.TransactionReceipt.fromValues(status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress);\n        }\n    }\n}\nexports.default = TransactionReceiptManager;\n_TransactionReceiptManager_blockchain = new WeakMap();\n//# sourceMappingURL=transaction-receipt-manager.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Database_options, _Database_cleanupDirectory, _Database_closed, _Database_rootStore, _Database_cleanup;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst tmp_promise_1 = require(\"tmp-promise\");\nconst levelup_1 = __importDefault(require(\"levelup\"));\nconst leveldown_1 = __importDefault(require(\"leveldown\"));\nconst subleveldown_1 = __importDefault(require(\"subleveldown\"));\nconst encoding_down_1 = __importDefault(require(\"encoding-down\"));\n(0, tmp_promise_1.setGracefulCleanup)();\nconst tmpOptions = { prefix: \"ganache_\", unsafeCleanup: true };\nconst noop = () => Promise.resolve();\nclass Database extends emittery_1.default {\n    /**\n     * The Database handles the creation of the database, and all access to it.\n     * Once the database has been fully initialized it will emit a `ready`\n     * event.\n     * @param options - Supports one of two options: `db` (a leveldown compliant\n     * store instance) or `dbPath` (the path to store/read the db instance)\n     * @param blockchain -\n     */\n    constructor(options, blockchain) {\n        super();\n        _Database_options.set(this, void 0);\n        _Database_cleanupDirectory.set(this, noop);\n        _Database_closed.set(this, false);\n        this.directory = null;\n        this.db = null;\n        _Database_rootStore.set(this, void 0);\n        this.initialize = async () => {\n            const levelupOptions = {\n                keyEncoding: \"binary\",\n                valueEncoding: \"binary\"\n            };\n            const store = __classPrivateFieldGet(this, _Database_options, \"f\").db;\n            let db;\n            if (store) {\n                __classPrivateFieldSet(this, _Database_rootStore, (0, encoding_down_1.default)(store, levelupOptions), \"f\");\n                db = (0, levelup_1.default)(__classPrivateFieldGet(this, _Database_rootStore, \"f\"), {});\n            }\n            else {\n                let directory = __classPrivateFieldGet(this, _Database_options, \"f\").dbPath;\n                if (!directory) {\n                    const dirInfo = await (0, tmp_promise_1.dir)(tmpOptions);\n                    directory = dirInfo.path;\n                    __classPrivateFieldSet(this, _Database_cleanupDirectory, dirInfo.cleanup, \"f\");\n                    // don't continue if we closed while we were waiting for the dir\n                    if (__classPrivateFieldGet(this, _Database_closed, \"f\"))\n                        return __classPrivateFieldGet(this, _Database_cleanup, \"f\").call(this);\n                }\n                this.directory = directory;\n                // specify an empty `prefix` for browser-based leveldown (level-js)\n                const leveldownOpts = { prefix: \"\" };\n                const store = (0, encoding_down_1.default)((0, leveldown_1.default)(directory, leveldownOpts), levelupOptions);\n                __classPrivateFieldSet(this, _Database_rootStore, store, \"f\");\n                db = (0, levelup_1.default)(store);\n            }\n            // don't continue if we closed while we were waiting for the db\n            if (__classPrivateFieldGet(this, _Database_closed, \"f\"))\n                return __classPrivateFieldGet(this, _Database_cleanup, \"f\").call(this);\n            const open = db.open();\n            this.trie = (0, subleveldown_1.default)(db, \"T\", levelupOptions);\n            this.db = db;\n            await open;\n            // don't continue if we closed while we were waiting for it to open\n            if (__classPrivateFieldGet(this, _Database_closed, \"f\"))\n                return __classPrivateFieldGet(this, _Database_cleanup, \"f\").call(this);\n            this.blocks = (0, subleveldown_1.default)(db, \"b\", levelupOptions);\n            this.blockIndexes = (0, subleveldown_1.default)(db, \"i\", levelupOptions);\n            this.blockLogs = (0, subleveldown_1.default)(db, \"l\", levelupOptions);\n            this.transactions = (0, subleveldown_1.default)(db, \"t\", levelupOptions);\n            this.transactionReceipts = (0, subleveldown_1.default)(db, \"r\", levelupOptions);\n            this.storageKeys = (0, subleveldown_1.default)(db, \"s\", levelupOptions);\n            return this.emit(\"ready\");\n        };\n        /**\n         * Cleans up the database connections and our tmp directory.\n         */\n        _Database_cleanup.set(this, async () => {\n            const db = this.db;\n            if (db) {\n                await new Promise((resolve, reject) => db.close(err => {\n                    if (err)\n                        return void reject(err);\n                    resolve(void 0);\n                }));\n                await Promise.all([\n                    this.blocks.close(),\n                    this.blockIndexes.close(),\n                    this.blockIndexes.close(),\n                    this.transactionReceipts.close(),\n                    this.transactions.close(),\n                    this.storageKeys.close(),\n                    this.trie.close()\n                ]);\n            }\n            return __classPrivateFieldGet(this, _Database_cleanupDirectory, \"f\").call(this);\n        });\n        __classPrivateFieldSet(this, _Database_options, options, \"f\");\n        this.blockchain = blockchain;\n    }\n    /**\n     * Call `batch` to batch `put` and `del` operations within the same\n     * event loop tick of the provided function. All db operations within the\n     * batch _must_ be executed synchronously.\n     * @param fn - Within this function's event loop tick, all `put` and\n     * `del` database operations are applied in a single atomic operation. This\n     * provides a single write call and if any individual put/del's fail the\n     * entire operation fails and no modifications are made.\n     * @returns a Promise that resolves to the return value\n     * of the provided function.\n     */\n    batch(fn) {\n        const rootDb = __classPrivateFieldGet(this, _Database_rootStore, \"f\").db;\n        const batch = this.db.batch();\n        const originalPut = rootDb.put;\n        const originalDel = rootDb.del;\n        rootDb.put = batch.put.bind(batch);\n        rootDb.del = batch.del.bind(batch);\n        let prom;\n        try {\n            const ret = fn();\n            // PSA: don't let vscode (or yourself) rewrite this to `await` the\n            // `batch.write` call. The `finally` block needs to run _before_ the\n            // write promise has resolved.\n            prom = batch.write().then(() => ret);\n        }\n        finally {\n            rootDb.put = originalPut;\n            rootDb.del = originalDel;\n        }\n        return prom;\n    }\n    /**\n     * Gracefully closes the database and cleans up the file system and waits for\n     * it to fully shut down. Emits a `close` event once complete.\n     * Note: only emits `close` once.\n     */\n    async close() {\n        const wasClosed = __classPrivateFieldGet(this, _Database_closed, \"f\");\n        __classPrivateFieldSet(this, _Database_closed, true, \"f\");\n        await __classPrivateFieldGet(this, _Database_cleanup, \"f\").call(this);\n        // only emit `close` once\n        if (!wasClosed) {\n            this.emit(\"close\");\n            return;\n        }\n    }\n}\nexports.default = Database;\n_Database_options = new WeakMap(), _Database_cleanupDirectory = new WeakMap(), _Database_closed = new WeakMap(), _Database_rootStore = new WeakMap(), _Database_cleanup = new WeakMap();\n//# sourceMappingURL=database.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkCache = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst cache_1 = __importDefault(require(\"@ethereumjs/vm/dist/state/cache\"));\nclass ForkCache extends cache_1.default {\n    constructor(trie) {\n        super(trie);\n        /**\n         * Looks up address in underlying trie.\n         * @param address - Address of account\n         */\n        this._lookupAccount = async (address) => {\n            const rlp = await this._trie.get(address.buf);\n            return rlp ? ethereumjs_util_1.Account.fromRlpSerializedAccount(rlp) : new ethereumjs_util_1.Account();\n        };\n    }\n}\nexports.ForkCache = ForkCache;\n//# sourceMappingURL=cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction Deferred() {\n    const deferred = {};\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n    return deferred;\n}\nexports.default = Deferred;\n//# sourceMappingURL=deferred.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Fork_abortController, _Fork_handler, _Fork_options, _Fork_accounts, _Fork_hardfork, _Fork_setCommonFromChain, _Fork_setBlockDataFromChainAndOptions, _Fork_syncAccounts;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fork = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst abort_controller_1 = __importDefault(require(\"abort-controller\"));\nconst common_1 = __importDefault(require(\"@ethereumjs/common\"));\nconst http_handler_1 = require(\"./handlers/http-handler\");\nconst ws_handler_1 = require(\"./handlers/ws-handler\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereum_block_1 = require(\"@ganache/ethereum-block\");\nconst block_manager_1 = __importDefault(require(\"../data-managers/block-manager\"));\nconst provider_handler_1 = require(\"./handlers/provider-handler\");\nconst persistent_cache_1 = require(\"./persistent-cache/persistent-cache\");\nconst url_1 = require(\"url\");\nasync function fetchChainId(fork) {\n    const chainIdHex = await fork.request(\"eth_chainId\", []);\n    return parseInt(chainIdHex, 16);\n}\nasync function fetchNetworkId(fork) {\n    const networkIdStr = await fork.request(\"net_version\", []);\n    return parseInt(networkIdStr, 10);\n}\nfunction fetchBlockNumber(fork) {\n    // {disableCache: true} required so we never cache the blockNumber, as forking\n    // shouldn't ever cache a method that can change!\n    return fork.request(\"eth_blockNumber\", [], { disableCache: true });\n}\nfunction fetchBlock(fork, blockNumber) {\n    return fork.request(\"eth_getBlockByNumber\", [blockNumber, true]);\n}\nasync function fetchNonce(fork, address, blockNumber) {\n    const nonce = await fork.request(\"eth_getTransactionCount\", [\n        address,\n        blockNumber\n    ]);\n    return utils_1.Quantity.from(nonce);\n}\nclass Fork {\n    constructor(options, accounts) {\n        _Fork_abortController.set(this, new abort_controller_1.default());\n        _Fork_handler.set(this, void 0);\n        _Fork_options.set(this, void 0);\n        _Fork_accounts.set(this, void 0);\n        _Fork_hardfork.set(this, void 0);\n        _Fork_setCommonFromChain.set(this, async (chainIdPromise) => {\n            const [chainId, networkId] = await Promise.all([\n                chainIdPromise,\n                fetchNetworkId(this)\n            ]);\n            this.chainId = chainId;\n            this.common = common_1.default.forCustomChain(utils_1.KNOWN_CHAINIDS.has(chainId) ? chainId : 1, {\n                name: \"ganache-fork\",\n                defaultHardfork: __classPrivateFieldGet(this, _Fork_hardfork, \"f\"),\n                // use the remote chain's network id mostly because truffle's debugger\n                // needs it to match in order to fetch sources\n                networkId,\n                // we use ganache's own chain id for blocks _after_ the fork to prevent\n                // replay attacks\n                chainId: __classPrivateFieldGet(this, _Fork_options, \"f\").chain.chainId,\n                comment: \"Local test network fork\"\n            });\n            // disable listeners to common since we don't actually cause any `emit`s,\n            // but other EVM parts to listen and will make node complain about too\n            // many listeners.\n            this.common.on = () => { };\n        });\n        _Fork_setBlockDataFromChainAndOptions.set(this, async (chainIdPromise) => {\n            const { fork: options } = __classPrivateFieldGet(this, _Fork_options, \"f\");\n            if (options.blockNumber === ethereum_utils_1.Tag.latest) {\n                const [latestBlock, chainId] = await Promise.all([\n                    fetchBlock(this, ethereum_utils_1.Tag.latest),\n                    chainIdPromise\n                ]);\n                let blockNumber = parseInt(latestBlock.number, 16);\n                const effectiveBlockNumber = utils_1.KNOWN_CHAINIDS.has(chainId)\n                    ? Math.max(blockNumber - options.preLatestConfirmations, 0)\n                    : blockNumber;\n                let block;\n                if (effectiveBlockNumber !== blockNumber) {\n                    block = await fetchBlock(this, utils_1.Quantity.from(effectiveBlockNumber));\n                }\n                else {\n                    block = latestBlock;\n                }\n                options.blockNumber = effectiveBlockNumber;\n                this.blockNumber = utils_1.Quantity.from(effectiveBlockNumber);\n                this.stateRoot = utils_1.Data.from(block.stateRoot);\n                await __classPrivateFieldGet(this, _Fork_syncAccounts, \"f\").call(this, this.blockNumber);\n                return block;\n            }\n            else if (Number.isInteger(options.blockNumber) &&\n                options.blockNumber >= 0) {\n                const blockNumber = utils_1.Quantity.from(options.blockNumber);\n                const [block] = await Promise.all([\n                    fetchBlock(this, blockNumber).then(async (block) => {\n                        this.stateRoot = block.stateRoot;\n                        await __classPrivateFieldGet(this, _Fork_syncAccounts, \"f\").call(this, blockNumber);\n                        return block;\n                    }),\n                    fetchBlockNumber(this).then((latestBlockNumberHex) => {\n                        const latestBlockNumberInt = parseInt(latestBlockNumberHex, 16);\n                        // if our block number option is _after_ the current block number\n                        // throw, as it likely wasn't intentional and doesn't make sense.\n                        if (options.blockNumber > latestBlockNumberInt) {\n                            throw new Error(`\\`fork.blockNumber\\` (${options.blockNumber}) must not be greater than the current block number (${latestBlockNumberInt})`);\n                        }\n                        else {\n                            this.blockNumber = blockNumber;\n                        }\n                    })\n                ]);\n                return block;\n            }\n            else {\n                throw new Error(`Invalid value for \\`fork.blockNumber\\` option: \"${options.blockNumber}\". Must be a positive integer or the string \"latest\".`);\n            }\n        });\n        _Fork_syncAccounts.set(this, (blockNumber) => {\n            return Promise.all(__classPrivateFieldGet(this, _Fork_accounts, \"f\").map(async (account) => {\n                const nonce = await fetchNonce(this, account.address, blockNumber);\n                account.nonce = nonce;\n            }));\n        });\n        __classPrivateFieldSet(this, _Fork_options, options, \"f\");\n        const forkingOptions = options.fork;\n        __classPrivateFieldSet(this, _Fork_hardfork, options.chain.hardfork, \"f\");\n        __classPrivateFieldSet(this, _Fork_accounts, accounts, \"f\");\n        const { url, network } = forkingOptions;\n        if (url) {\n            const { protocol } = url;\n            switch (protocol) {\n                case \"ws:\":\n                case \"wss:\":\n                    __classPrivateFieldSet(this, _Fork_handler, new ws_handler_1.WsHandler(options, __classPrivateFieldGet(this, _Fork_abortController, \"f\").signal), \"f\");\n                    break;\n                case \"http:\":\n                case \"https:\":\n                    __classPrivateFieldSet(this, _Fork_handler, new http_handler_1.HttpHandler(options, __classPrivateFieldGet(this, _Fork_abortController, \"f\").signal), \"f\");\n                    break;\n                default: {\n                    throw new Error(`Unsupported protocol: ${protocol}`);\n                }\n            }\n        }\n        else if (forkingOptions.provider) {\n            __classPrivateFieldSet(this, _Fork_handler, new provider_handler_1.ProviderHandler(options, __classPrivateFieldGet(this, _Fork_abortController, \"f\").signal), \"f\");\n        }\n        else if (network) {\n            let normalizedNetwork;\n            if (network === \"görli\") {\n                forkingOptions.network = normalizedNetwork = \"goerli\";\n            }\n            else {\n                normalizedNetwork = network;\n            }\n            // Note: `process.env.INFURA_KEY` is replaced by webpack with an infura\n            // key.\n            const infuraKey = process.env.INFURA_KEY;\n            if (!infuraKey) {\n                throw new Error(\"The INFURA_KEY environment variable was not given and is required when using Ganache's integrated archive network feature.\");\n            }\n            // any because the `network` check above narrowed the type to one\n            // that doesn't include `url`, but we still want to add it.\n            forkingOptions.url = new url_1.URL(`wss://${normalizedNetwork}.infura.io/ws/v3/${infuraKey}`);\n            __classPrivateFieldSet(this, _Fork_handler, new ws_handler_1.WsHandler(options, __classPrivateFieldGet(this, _Fork_abortController, \"f\").signal), \"f\");\n        }\n    }\n    async initialize() {\n        let cacheProm;\n        const { fork: options } = __classPrivateFieldGet(this, _Fork_options, \"f\");\n        if (options.deleteCache)\n            await persistent_cache_1.PersistentCache.deleteDb();\n        if (options.disableCache === false) {\n            // ignore cache start up errors as it is possible there is an `open`\n            // conflict if another ganache fork is running at the time this one is\n            // started. The cache isn't required (though performance will be\n            // degraded without it)\n            cacheProm = persistent_cache_1.PersistentCache.create().catch(_e => null);\n        }\n        else {\n            cacheProm = null;\n        }\n        const chainIdPromise = fetchChainId(this);\n        const [block, cache] = await Promise.all([\n            __classPrivateFieldGet(this, _Fork_setBlockDataFromChainAndOptions, \"f\").call(this, chainIdPromise),\n            cacheProm,\n            __classPrivateFieldGet(this, _Fork_setCommonFromChain, \"f\").call(this, chainIdPromise)\n        ]);\n        const common = this.getCommonForBlockNumber(this.common, this.blockNumber.toBigInt());\n        this.block = new ethereum_block_1.Block(block_manager_1.default.rawFromJSON(block, common), common);\n        if (cache)\n            await this.initCache(cache);\n    }\n    async initCache(cache) {\n        await cache.initialize(this.block.header.number, this.block.hash(), this.request.bind(this));\n        __classPrivateFieldGet(this, _Fork_handler, \"f\").setCache(cache);\n    }\n    request(method, params, options = { disableCache: false }) {\n        return __classPrivateFieldGet(this, _Fork_handler, \"f\").request(method, params, options);\n    }\n    abort() {\n        return __classPrivateFieldGet(this, _Fork_abortController, \"f\").abort();\n    }\n    close() {\n        return __classPrivateFieldGet(this, _Fork_handler, \"f\").close();\n    }\n    isValidForkBlockNumber(blockNumber) {\n        return blockNumber.toBigInt() <= this.blockNumber.toBigInt();\n    }\n    selectValidForkBlockNumber(blockNumber) {\n        return this.isValidForkBlockNumber(blockNumber)\n            ? blockNumber\n            : this.blockNumber;\n    }\n    /**\n     * If the `blockNumber` is before our `fork.blockNumber`, return a `Common`\n     * instance, applying the rules from the remote chain's `common` via its\n     * original `chainId`. If the remote chain's `chainId` is now \"known\", return\n     * a `Common` with our local `common`'s rules applied, but with the remote\n     * chain's `chainId`. If the block is greater than or equal to our\n     * `fork.blockNumber` return `common`.\n     * @param common -\n     * @param blockNumber -\n     */\n    getCommonForBlockNumber(common, blockNumber) {\n        if (blockNumber <= this.blockNumber.toBigInt()) {\n            // we are at or before our fork block\n            if (utils_1.KNOWN_CHAINIDS.has(this.chainId)) {\n                // we support this chain id, so let's use its rules\n                let hardfork;\n                // hardforks are iterated from earliest to latest\n                for (const hf of common.hardforks()) {\n                    if (hf.block === null)\n                        continue;\n                    if (blockNumber >= BigInt(hf.block)) {\n                        hardfork = hf.name;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                return new common_1.default({ chain: this.chainId, hardfork });\n            }\n            // we don't know about this chain or hardfork, so just carry on per usual,\n            // but with the fork's chainId (instead of our local chainId)\n            return common_1.default.forCustomChain(1, {\n                chainId: this.chainId\n            }, common.hardfork());\n        }\n        else {\n            return common;\n        }\n    }\n}\nexports.Fork = Fork;\n_Fork_abortController = new WeakMap(), _Fork_handler = new WeakMap(), _Fork_options = new WeakMap(), _Fork_accounts = new WeakMap(), _Fork_hardfork = new WeakMap(), _Fork_setCommonFromChain = new WeakMap(), _Fork_setBlockDataFromChainAndOptions = new WeakMap(), _Fork_syncAccounts = new WeakMap();\n//# sourceMappingURL=fork.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseHandler = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst rate_limiter_1 = __importDefault(require(\"../rate-limiter/rate-limiter\"));\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst INVALID_RESPONSE = \"Invalid response from fork provider: \";\nconst INVALID_AUTH_ERROR = \"Authentication via both username/password (Basic) and JWT (Bearer) is not possible\";\nconst WINDOW_SECONDS = 30;\nclass BaseHandler {\n    constructor(options, abortSignal) {\n        this.id = 1;\n        this.requestCache = new Map();\n        this.fireForget = new Set();\n        const forkingOptions = options.fork;\n        const { requestsPerSecond, url, userAgent, origin } = forkingOptions;\n        this.abortSignal = abortSignal;\n        this.limiter = new rate_limiter_1.default(\n        // convert `requestsPerSecond` to \"requests per window\"\n        requestsPerSecond * WINDOW_SECONDS, WINDOW_SECONDS * 1000, abortSignal);\n        this.valueCache = new lru_cache_1.default({\n            max: 1073741824,\n            length: (value, key) => {\n                return value.length + key.length;\n            }\n        });\n        // we don't need header-related things if we are using a provider\n        // instead of a url since we aren't in charge of sending requests at the\n        // header level.\n        if (url) {\n            const headers = {\n                \"user-agent\": userAgent\n            };\n            if (origin) {\n                headers[\"origin\"] = origin;\n            }\n            // we set our own Authentication headers, so username and password must be\n            // removed from the url. (The values have already been copied to the options)\n            url.password = url.username = \"\";\n            const isInfura = url.host.endsWith(\".infura.io\");\n            BaseHandler.setAuthHeaders(forkingOptions, headers);\n            BaseHandler.setUserHeaders(forkingOptions, headers, !isInfura);\n            this.headers = headers;\n        }\n    }\n    setCache(cache) {\n        this.persistentCache = cache;\n    }\n    /**\n     * Adds Authorization headers from the given options to the provided `headers`\n     * object. Overwrites an existing `Authorization` header value.\n     *\n     * @param options -\n     * @param headers -\n     */\n    static setAuthHeaders(options, headers) {\n        if (options.username != null || options.password != null) {\n            if (options.jwt != null)\n                throw new Error(INVALID_AUTH_ERROR);\n            headers.authorization = `Basic ${Buffer.from(`${options.username || \"\"}:${options.password || \"\"}`).toString(\"base64\")}`;\n        }\n        else if (options.jwt) {\n            headers.authorization = `Bearer ${options.jwt}`;\n        }\n    }\n    /**\n     * Adds user provided headers to the provided `headers`\n     * object.\n     *\n     * If the headers already contain an existing `Authorization` header\n     * value and the incoming values have compatible schemes\n     * (Bearer===Bearer, Basic===Basic) the values are merged. Note: if the\n     * `permitMultiAuth` option is `false` Bearer tokens can not be merged.\n     *\n     * @param options -\n     * @param headers -\n     * @param permitMultiAuth -\n     */\n    static setUserHeaders(options, headers, permitMultiAuth) {\n        // copy the user-provided headers over to the connection's headers\n        const userHeaders = options.headers;\n        if (userHeaders) {\n            for (let i = 0, l = userHeaders.length; i < l; i++) {\n                let { name, value } = userHeaders[i];\n                const key = name.toLowerCase();\n                // if the user specified multiple Authentication headers (.e.g, via\n                // username/password or the jwt field) we need to join them when\n                // they are both of the same scheme, otherwise we throw an exception.\n                if (key === \"authorization\" && \"authorization\" in headers) {\n                    if (!permitMultiAuth) {\n                        throw new Error(`Authentication with multiple auth-params is not allowed.`);\n                    }\n                    const currentScheme = headers.authorization.split(\" \", 1)[0];\n                    const [incomingScheme, authParams] = value.split(/\\.(?:.+)/);\n                    if (incomingScheme.toLowerCase() === currentScheme.toLowerCase()) {\n                        headers.authorization += \",\" + authParams;\n                    }\n                    else {\n                        throw new Error(`Authentication via both ${currentScheme} and ${incomingScheme} is not allowed.`);\n                    }\n                }\n                else {\n                    headers[key] = value;\n                }\n            }\n        }\n    }\n    getFromMemCache(key) {\n        const cachedRequest = this.requestCache.get(key);\n        if (cachedRequest !== undefined)\n            return cachedRequest;\n        const cachedValue = this.valueCache.get(key);\n        if (cachedValue !== undefined)\n            return JSON.parse(cachedValue).result;\n    }\n    async getFromSlowCache(method, params, key) {\n        if (!this.persistentCache)\n            return;\n        const raw = await this.persistentCache.get(method, params, key).catch(e => {\n            if (e.notFound)\n                return null;\n            // I/O or other error, throw as things are getting weird and the cache may\n            // have lost integrity\n            throw e;\n        });\n        if (raw != null)\n            return { result: JSON.parse(raw).result, raw };\n    }\n    async queueRequest(method, params, key, send, options = { disableCache: false }) {\n        if (!options.disableCache) {\n            const memCached = this.getFromMemCache(key);\n            if (memCached !== undefined)\n                return memCached;\n            const diskCached = await this.getFromSlowCache(method, params, key);\n            if (diskCached !== undefined) {\n                this.valueCache.set(key, Buffer.from(diskCached.raw));\n                return diskCached.result;\n            }\n        }\n        const promise = this.limiter\n            .handle(send)\n            .then(async ({ response, raw }) => {\n            if (this.abortSignal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            if ((0, utils_1.hasOwn)(response, \"result\")) {\n                if (!options.disableCache) {\n                    // cache non-error responses only\n                    this.valueCache.set(key, raw);\n                    // swallow errors for the persistentCache, since it's not vital that\n                    // it always works\n                    if (this.persistentCache) {\n                        const prom = this.persistentCache\n                            .put(method, params, key, typeof raw === \"string\" ? Buffer.from(raw) : raw)\n                            .catch(_ => {\n                            // the cache.put may fail if the db is closed while a request\n                            // is in flight. This is a \"fire and forget\" method.\n                        });\n                        // track these unawaited `puts`\n                        this.fireForget.add(prom);\n                        // clean up once complete\n                        prom.finally(() => {\n                            this.fireForget.delete(prom);\n                        });\n                    }\n                }\n                return response.result;\n            }\n            else if ((0, utils_1.hasOwn)(response, \"error\") && response.error != null) {\n                const { error } = response;\n                throw new ethereum_utils_1.CodedError(error.message, error.code);\n            }\n            throw new Error(`${INVALID_RESPONSE}\\`${JSON.stringify(response)}\\``);\n        });\n        this.requestCache.set(key, promise);\n        return await promise;\n    }\n    async close() {\n        await Promise.all(this.fireForget.keys());\n        this.persistentCache && (await this.persistentCache.close());\n    }\n}\nexports.BaseHandler = BaseHandler;\nBaseHandler.JSONRPC_PREFIX = '{\"jsonrpc\":\"2.0\",\"id\":';\n//# sourceMappingURL=base-handler.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpHandler = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\n// TODO: support http2\nconst http_1 = __importStar(require(\"http\"));\nconst https_1 = __importStar(require(\"https\"));\nconst base_handler_1 = require(\"./base-handler\");\nconst deferred_1 = __importDefault(require(\"../deferred\"));\nconst { JSONRPC_PREFIX } = base_handler_1.BaseHandler;\nclass HttpHandler extends base_handler_1.BaseHandler {\n    constructor(options, abortSignal) {\n        super(options, abortSignal);\n        this.url = options.fork.url;\n        this.headers.accept = this.headers[\"content-type\"] = \"application/json\";\n        if (this.url.protocol === \"http:\") {\n            this._request = http_1.default.request;\n            this.agent = new http_1.Agent({\n                keepAlive: true,\n                scheduling: \"fifo\"\n            });\n        }\n        else {\n            this._request = https_1.default.request;\n            this.agent = new https_1.Agent({\n                keepAlive: true,\n                scheduling: \"fifo\"\n            });\n        }\n    }\n    handleLengthedResponse(res, length) {\n        let buffer = Buffer.allocUnsafe(length);\n        let offset = 0;\n        return new Promise((resolve, reject) => {\n            function data(message) {\n                const messageLength = message.length;\n                // note: Node will NOT send us more data than the content-length header\n                // denotes, so we don't have to worry about it.\n                message.copy(buffer, offset, 0, messageLength);\n                offset += messageLength;\n            }\n            function end() {\n                // note: Node doesn't check if the content-length matches, so we do that\n                // here\n                if (offset !== buffer.length) {\n                    // if we didn't receive enough data, throw\n                    reject(new Error(\"content-length mismatch\"));\n                }\n                else {\n                    resolve(buffer);\n                }\n            }\n            res.on(\"data\", data);\n            res.on(\"end\", end);\n        });\n    }\n    handleChunkedResponse(res) {\n        let buffer;\n        return new Promise(resolve => {\n            res.on(\"data\", (message) => {\n                const chunk = message;\n                if (buffer) {\n                    buffer = Buffer.concat([buffer, chunk], buffer.length + chunk.length);\n                }\n                else {\n                    buffer = Buffer.concat([chunk], chunk.length);\n                }\n            });\n            res.on(\"end\", () => {\n                resolve(buffer);\n            });\n        });\n    }\n    async request(method, params, options = { disableCache: false }) {\n        const key = JSON.stringify({ method, params });\n        const { protocol, hostname: host, port, pathname, search } = this.url;\n        const requestOptions = {\n            protocol,\n            host,\n            port,\n            path: pathname + search,\n            headers: this.headers,\n            method: \"POST\",\n            agent: this.agent,\n            // Node v15 supports AbortSignals directly\n            signal: this.abortSignal\n        };\n        const send = () => {\n            if (this.abortSignal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            const deferred = (0, deferred_1.default)();\n            const postData = `${JSONRPC_PREFIX}${this.id++},${key.slice(1)}`;\n            this.headers[\"content-length\"] = postData.length;\n            const req = this._request(requestOptions);\n            req.on(\"response\", res => {\n                const { headers } = res;\n                let buffer;\n                // if we have a transfer-encoding we don't care about \"content-length\"\n                // (per HTTP spec). We also don't care about invalid lengths\n                if (\"transfer-encoding\" in headers) {\n                    buffer = this.handleChunkedResponse(res);\n                }\n                else {\n                    const length = headers[\"content-length\"] / 1;\n                    if (isNaN(length) || length <= 0) {\n                        buffer = this.handleChunkedResponse(res);\n                    }\n                    else {\n                        // we have a content-length; use it to pre-allocate the required memory\n                        buffer = this.handleLengthedResponse(res, length);\n                    }\n                }\n                // TODO: handle invalid JSON (throws on parse)?\n                buffer.then(buffer => {\n                    try {\n                        deferred.resolve({\n                            response: JSON.parse(buffer),\n                            raw: buffer\n                        });\n                    }\n                    catch {\n                        const resStr = buffer.toString();\n                        let shortStr;\n                        if (resStr.length > 340) {\n                            // truncate long errors so we don't blow up the user's logs\n                            shortStr = resStr.slice(0, 320) + \"…\";\n                        }\n                        else {\n                            shortStr = resStr;\n                        }\n                        let msg = `Invalid JSON response from fork provider:\\n\\n ${shortStr}`;\n                        if ((resStr.startsWith(\"invalid project id\") ||\n                            resStr.startsWith(\"project id required in the url\")) &&\n                            this.url.host.endsWith(\"infura.io\")) {\n                            msg += `\\n\\nThe provided fork url, ${this.url}, may be an invalid or incorrect Infura endpoint.`;\n                            msg += `\\nVisit https://infura.io/docs/ethereum for Infura documentation.`;\n                        }\n                        deferred.reject(new Error(msg));\n                    }\n                });\n            });\n            // after 5 seconds of idle abort the request\n            req.setTimeout(5000, req.abort.bind(req, null));\n            req.on(\"error\", deferred.reject);\n            req.write(postData);\n            req.end();\n            return deferred.promise.finally(() => this.requestCache.delete(key));\n        };\n        return await this.queueRequest(method, params, key, send, options);\n    }\n}\nexports.HttpHandler = HttpHandler;\n//# sourceMappingURL=http-handler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProviderHandler = void 0;\nconst base_handler_1 = require(\"./base-handler\");\nclass ProviderHandler extends base_handler_1.BaseHandler {\n    constructor(options, abortSignal) {\n        super(options, abortSignal);\n        const provider = options.fork.provider;\n        if (typeof provider.request === \"function\") {\n            this._request = async (method, params) => {\n                try {\n                    const result = await provider.request({ method, params });\n                    const response = { result };\n                    return { response, raw: JSON.stringify(response) };\n                }\n                catch (error) {\n                    // if this doesn't appear to be a JSON-RPC \"coded\" error it might be\n                    // a network level error, or something else we don't know how to\n                    // handle. Throw so stack traces are preserved.\n                    if (typeof error.code !== \"number\")\n                        throw error;\n                    return {\n                        response: { error },\n                        raw: null\n                    };\n                }\n            };\n        }\n        else if (typeof provider.send === \"function\") {\n            // TODO: remove support for legacy providers' legacy `.send`\n            console.warn(\"WARNING: Ganache forking only supports EIP-1193-compliant providers. Legacy support for send is currently enabled, but will be removed in a future version _without_ a breaking change. To remove this warning, switch to an EIP-1193 provider. This error is probably caused by an old version of Web3's HttpProvider (or ganache < v7)\");\n            this._request = async (method, params) => {\n                return await new Promise((resolve, reject) => {\n                    const request = {\n                        id: this.id++,\n                        jsonrpc: \"2.0\",\n                        method,\n                        params\n                    };\n                    provider.send(request, (err, response) => {\n                        if (err)\n                            return void reject(err);\n                        resolve({\n                            response,\n                            raw: JSON.stringify(response)\n                        });\n                    });\n                });\n            };\n        }\n        else {\n            throw new Error(\"Forking `provider` must be EIP-1193 compatible\");\n        }\n    }\n    async request(method, params, options = { disableCache: false }) {\n        // format params via JSON stringification because the params might\n        // be Quantity or Data, which aren't valid as `params` themselves,\n        // but when JSON stringified they are\n        const strParams = JSON.stringify(params);\n        return await this.queueRequest(method, params, `${method}:${strParams}`, () => this._request(method, JSON.parse(strParams)), options);\n    }\n}\nexports.ProviderHandler = ProviderHandler;\n//# sourceMappingURL=provider-handler.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WsHandler = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ws_1 = __importDefault(require(\"ws\"));\nconst base_handler_1 = require(\"./base-handler\");\nconst deferred_1 = __importDefault(require(\"../deferred\"));\nconst { JSONRPC_PREFIX } = base_handler_1.BaseHandler;\nclass WsHandler extends base_handler_1.BaseHandler {\n    constructor(options, abortSignal) {\n        super(options, abortSignal);\n        this.inFlightRequests = new Map();\n        const { url, origin } = options.fork;\n        this.connection = new ws_1.default(url.toString(), {\n            origin,\n            headers: this.headers\n        });\n        // `nodebuffer` is already the default, but I just wanted to be explicit\n        // here because when `nodebuffer` is the binaryType the `message` event's\n        // data type is guaranteed to be a `Buffer`. We don't need to check for\n        // different types of data.\n        // I mention all this because if `arraybuffer` or `fragment` is used for the\n        // binaryType the `\"message\"` event's `data` may end up being\n        // `ArrayBuffer | Buffer`, or `Buffer[] | Buffer`, respectively.\n        // If you need to change this, you probably need to change our `onMessage`\n        // handler too.\n        this.connection.binaryType = \"nodebuffer\";\n        this.open = this.connect(this.connection);\n        this.connection.onclose = () => {\n            // try to connect again...\n            // TODO: backoff and eventually fail\n            this.open = this.connect(this.connection);\n        };\n        this.abortSignal.addEventListener(\"abort\", () => {\n            this.connection.onclose = null;\n            this.connection.close(1000);\n        });\n        this.connection.onmessage = this.onMessage.bind(this);\n    }\n    async request(method, params, options = { disableCache: false }) {\n        await this.open;\n        if (this.abortSignal.aborted)\n            return Promise.reject(new ethereum_utils_1.AbortError());\n        const key = JSON.stringify({ method, params });\n        const send = () => {\n            if (this.abortSignal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            const messageId = this.id++;\n            const deferred = (0, deferred_1.default)();\n            // TODO: timeout an in-flight request after some amount of time\n            this.inFlightRequests.set(messageId, deferred);\n            this.connection.send(`${JSONRPC_PREFIX}${messageId},${key.slice(1)}`);\n            return deferred.promise.finally(() => this.requestCache.delete(key));\n        };\n        return await this.queueRequest(method, params, key, send, options);\n    }\n    onMessage(event) {\n        if (event.type !== \"message\")\n            return;\n        // data is always a `Buffer` because the websocket's binaryType is set to\n        // `nodebuffer`\n        const raw = event.data;\n        // TODO: handle invalid JSON (throws on parse)?\n        const response = JSON.parse(raw);\n        const id = response.id;\n        const prom = this.inFlightRequests.get(id);\n        if (prom) {\n            this.inFlightRequests.delete(id);\n            prom.resolve({ response, raw: raw });\n        }\n    }\n    connect(connection) {\n        let open = new Promise((resolve, reject) => {\n            connection.onopen = resolve;\n            connection.onerror = reject;\n        });\n        open.then(() => {\n            connection.onopen = null;\n            connection.onerror = null;\n        }, err => {\n            console.log(err);\n        });\n        return open;\n    }\n    async close() {\n        await super.close();\n        this.connection.close();\n    }\n}\nexports.WsHandler = WsHandler;\n//# sourceMappingURL=ws-handler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nfunction encode(parts) {\n    const l = parts.length;\n    let totalLength = 0;\n    const pieces = [];\n    for (let i = 0; i < l; i++) {\n        const part = parts[i];\n        if (part === null) {\n            totalLength += 2; // {length of the length} (`1`) + {length} (`0`)\n            pieces.push([utils_1.BUFFER_ZERO, utils_1.BUFFER_EMPTY]);\n        }\n        else {\n            const length = part.length;\n            const lengthBuffer = utils_1.Quantity.from(length).toBuffer();\n            const lengthLength = lengthBuffer.length;\n            totalLength += 1 + lengthLength + length;\n            pieces.push([lengthBuffer, part]);\n        }\n    }\n    const encoded = Buffer.allocUnsafe(totalLength);\n    let offset = 0;\n    for (let i = 0; i < l; i++) {\n        const [lengthBuffer, part] = pieces[i];\n        const lengthLength = lengthBuffer.length;\n        encoded[offset++] = lengthLength;\n        lengthBuffer.copy(encoded, offset, 0, lengthLength);\n        part.copy(encoded, (offset += lengthLength), 0, part.length);\n        offset += part.length;\n    }\n    return encoded;\n}\nexports.encode = encode;\nfunction decode(encoded) {\n    const parts = [];\n    for (let i = 0, l = encoded.length; i < l;) {\n        const lengthLength = encoded[i++];\n        const length = utils_1.Quantity.from(encoded.slice(i, (i += lengthLength))).toNumber();\n        parts.push(encoded.slice(i, (i += length)));\n    }\n    return parts;\n}\nexports.decode = decode;\n//# sourceMappingURL=lexicographic-key-codec.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ancestry = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst tree_1 = require(\"./tree\");\nclass Ancestry {\n    constructor(db, parent) {\n        /**\n         * Prevents fetching the same key from the database simultaneously.\n         */\n        this.cacheLock = new Map();\n        this.db = db;\n        if (parent == null) {\n            this.next = null;\n            this.knownAncestors = new Set();\n        }\n        else {\n            this.next = parent.closestKnownAncestor.equals(utils_1.BUFFER_EMPTY)\n                ? null\n                : parent.closestKnownAncestor;\n            this.knownAncestors = new Set([parent.hash.toString(\"hex\")]);\n        }\n    }\n    async loadNextAncestor(next) {\n        const k = next.toString(\"hex\");\n        if (this.cacheLock.has(k)) {\n            throw new Error(\"couldn't load next ancestor as it is locked\");\n        }\n        let resolver;\n        this.cacheLock.set(k, new Promise(resolve => {\n            resolver = resolve;\n        }));\n        const value = await this.db.get(next);\n        const node = tree_1.Tree.deserialize(next, value);\n        this.next = node.closestKnownAncestor.equals(utils_1.BUFFER_EMPTY)\n            ? null\n            : node.closestKnownAncestor;\n        this.knownAncestors.add(node.hash.toString(\"hex\"));\n        this.cacheLock.delete(k);\n        resolver();\n    }\n    async has(key) {\n        const strKey = key.toString(\"hex\");\n        if (this.knownAncestors.has(strKey)) {\n            return true;\n        }\n        else if (this.next) {\n            const cacheLock = this.cacheLock.get(this.next.toString(\"hex\"));\n            if (cacheLock) {\n                await cacheLock;\n                return this.has(key);\n            }\n            await this.loadNextAncestor(this.next);\n            return this.has(key);\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.Ancestry = Ancestry;\n//# sourceMappingURL=ancestry.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBlockByNumber = exports.findClosestDescendants = exports.findClosestAncestor = exports.findRelated = exports.resolveTargetAndClosestAncestor = exports.setDbVersion = exports.getBlockNumberFromParams = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst tree_1 = require(\"./tree\");\nfunction getBlockNumberFromParams(method, params) {\n    // get the request's block number\n    switch (method) {\n        case \"eth_getBlockByNumber\":\n            return params[0];\n        case \"eth_getTransactionCount\":\n        case \"eth_getCode\":\n        case \"eth_getBalance\":\n            return params[1];\n        case \"eth_getStorageAt\":\n            return params[2];\n        default:\n            return null;\n    }\n}\nexports.getBlockNumberFromParams = getBlockNumberFromParams;\nasync function setDbVersion(db, version) {\n    // set the version if the DB was just created, or error if we already have\n    // a version, but it isn't what we expected\n    try {\n        const recordedVersion = await db.get(\"version\");\n        if (!version.equals(recordedVersion)) {\n            // in the future this is where database migrations would go\n            throw new Error(`Persistent cache version \"${version.toString()}\"\" is not understood.`);\n        }\n    }\n    catch (e) {\n        if (!e.notFound)\n            throw e;\n        // if we didn't have a `version` key we need to set one\n        await db.put(\"version\", version);\n    }\n}\nexports.setDbVersion = setDbVersion;\nasync function resolveTargetAndClosestAncestor(db, request, targetHeight, targetHash) {\n    let targetBlock;\n    let closestAncestor;\n    let previousClosestAncestor;\n    try {\n        const key = tree_1.Tree.encodeKey(targetHeight, targetHash);\n        targetBlock = tree_1.Tree.deserialize(key, await db.get(key));\n        if (targetBlock.closestKnownAncestor.equals(utils_1.BUFFER_EMPTY)) {\n            // we are the genesis/earliest block\n            closestAncestor = null;\n            previousClosestAncestor = null;\n        }\n        else {\n            previousClosestAncestor = tree_1.Tree.deserialize(targetBlock.closestKnownAncestor, await db.get(targetBlock.closestKnownAncestor));\n            // check if we are still the closest known ancestor\n            closestAncestor =\n                (await findClosestAncestor(db, request, targetHeight, previousClosestAncestor.key)) || previousClosestAncestor;\n        }\n    }\n    catch (e) {\n        // something bad happened (I/O failure?), bail\n        if (!e.notFound)\n            throw e;\n        previousClosestAncestor = null;\n        // we couldn't find our target block in the database so we need to figure\n        // out it's relationships via the blockchain.\n        // In order to avoid requesting the \"earliest\" block unnecessarily, we\n        // assume the \"earliest\" block can't be before block 0 (which seems like a\n        // reasonable assumption to me!).\n        // If our target is block `0` then we can't have a closest ancestor since\n        // we are the first block\n        if (targetHeight.toBigInt() === 0n) {\n            closestAncestor = null;\n            targetBlock = new tree_1.Tree(targetHeight, targetHash);\n        }\n        else {\n            const earliestBlock = await getBlockByNumber(request, ethereum_utils_1.Tag.earliest);\n            if (!earliestBlock)\n                throw new Error('Could not find \"earliest\" block.');\n            const { hash: earliestHash, number: earliestNumber } = earliestBlock;\n            const hash = utils_1.Data.from(earliestHash, 32);\n            const earliest = new tree_1.Tree(utils_1.Quantity.from(earliestNumber), hash);\n            closestAncestor =\n                (await findClosestAncestor(db, request, targetHeight, earliest.key)) ||\n                    earliest;\n            targetBlock = new tree_1.Tree(targetHeight, targetHash, closestAncestor.key);\n        }\n    }\n    return {\n        targetBlock,\n        closestAncestor,\n        previousClosestAncestor\n    };\n}\nexports.resolveTargetAndClosestAncestor = resolveTargetAndClosestAncestor;\nasync function* findRelated(db, request, options) {\n    const readStream = db.createReadStream({\n        keys: true,\n        values: true,\n        ...options\n    });\n    for await (const pair of readStream) {\n        const { key, value } = pair;\n        const node = tree_1.Tree.deserialize(key, value);\n        const { height: candidateHeight } = node.decodeKey();\n        const block = await getBlockByNumber(request, candidateHeight);\n        // if the chain has a block at this height, and the hash of the\n        // block is the same as the one in the db we've found our closest\n        // ancestor!\n        if (block != null && block.hash === utils_1.Data.from(node.hash).toString()) {\n            yield node;\n        }\n    }\n}\nexports.findRelated = findRelated;\n/**\n *\n * @param height - Search only before this block height (exclusive)\n * @param upTo - Search up to this key (inclusive)\n * @returns the closest known ancestor, or `upTo` if we know of no ancestors\n */\nasync function findClosestAncestor(db, request, height, upTo) {\n    const generator = findRelated(db, request, {\n        gte: upTo,\n        lt: tree_1.Tree.encodeKey(height, utils_1.DATA_EMPTY),\n        reverse: true\n    });\n    const first = await generator.next();\n    await generator.return();\n    return first.value;\n}\nexports.findClosestAncestor = findClosestAncestor;\n/**\n *\n * @param height - Search only after this block height (exclusive)\n * @returns the closest known descendants, or null\n */\nasync function* findClosestDescendants(db, request, height) {\n    const generator = findRelated(db, request, {\n        gte: tree_1.Tree.encodeKey(utils_1.Quantity.from(height.toBigInt() + 1n), utils_1.DATA_EMPTY),\n        reverse: false\n    });\n    for await (const node of generator) {\n        yield node;\n    }\n}\nexports.findClosestDescendants = findClosestDescendants;\nasync function getBlockByNumber(request, blockNumber) {\n    return await request(\"eth_getBlockByNumber\", [blockNumber.toString(), false]);\n}\nexports.getBlockByNumber = getBlockByNumber;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersistentCache = void 0;\nconst tree_1 = require(\"./tree\");\nconst fs_1 = require(\"fs\");\nconst env_paths_1 = __importDefault(require(\"env-paths\"));\nconst levelup_1 = __importDefault(require(\"levelup\"));\nconst leveldown_1 = __importDefault(require(\"leveldown\"));\nconst subleveldown_1 = __importDefault(require(\"subleveldown\"));\nconst encoding_down_1 = __importDefault(require(\"encoding-down\"));\nconst lexico = __importStar(require(\"../lexicographic-key-codec\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ancestry_1 = require(\"./ancestry\");\nconst helpers_1 = require(\"./helpers\");\nconst levelupOptions = {\n    keyEncoding: \"binary\",\n    valueEncoding: \"binary\"\n};\nconst leveldownOpts = { prefix: \"\" };\n/**\n * A leveldb-backed cache that enables associating immutable data as it existed\n * at a specific height on a blockchain.\n *\n * The design affords faster db reads (one read to get known closest ancestors\n * and descendants) and fast db writes (one write per node in a relationship).\n */\nclass PersistentCache {\n    constructor() {\n        this.version = utils_1.BUFFER_ZERO;\n        /**\n         * `reBalancePromise` is used at shutdown to ensure we are done balancing the\n         * tree\n         *\n         */\n        this._reBalancePromise = null;\n        this.status = \"open\";\n    }\n    static async deleteDb(dbSuffix) {\n        return new Promise((resolve, reject) => {\n            const directory = PersistentCache.getDbDirectory(dbSuffix);\n            leveldown_1.default.destroy(directory, err => {\n                if (err)\n                    return void reject(err);\n                resolve(void 0);\n            });\n        });\n    }\n    /**\n     * Serializes the entire database world state into a JSON tree\n     */\n    static async serializeDb(dbSuffix) {\n        const cache = await PersistentCache.create(dbSuffix);\n        return await new Promise(async (resolve) => {\n            const rs = cache.ancestorDb.createReadStream({\n                gte: utils_1.BUFFER_ZERO,\n                keys: true,\n                values: true\n            });\n            const tree = {};\n            const collection = {};\n            for await (const data of rs) {\n                const { key, value } = data;\n                const node = tree_1.Tree.deserialize(key, value);\n                node.height = node.decodeKey().height.toNumber();\n                const keyHex = key.toString(\"hex\");\n                const parentKeyHex = node.closestKnownAncestor.toString(\"hex\");\n                collection[keyHex] = node;\n                if (node.closestKnownAncestor.length === 0) {\n                    tree[keyHex] = node;\n                }\n                else {\n                    const descendants = collection[parentKeyHex].descendants || {};\n                    descendants[keyHex] = node;\n                    collection[parentKeyHex].descendants = descendants;\n                }\n                node.hash = utils_1.Data.from(node.hash).toString();\n                node.parent =\n                    node.closestKnownAncestor.length > 0\n                        ? utils_1.Data.from(collection[parentKeyHex].hash).toString()\n                        : null;\n                delete node.key;\n                // delete node.hash;\n                delete node.closestKnownDescendants;\n                delete node.closestKnownAncestor;\n            }\n            await cache.close();\n            resolve(JSON.parse(JSON.stringify(tree)));\n        });\n    }\n    static getDbDirectory(suffix = \"\") {\n        const { data: directory } = (0, env_paths_1.default)(\"Ganache/db\", {\n            suffix\n        });\n        return directory;\n    }\n    static async create(dbSuffix) {\n        const cache = new PersistentCache();\n        const directory = PersistentCache.getDbDirectory(dbSuffix);\n        await fs_1.promises.mkdir(directory, { recursive: true });\n        const store = (0, encoding_down_1.default)((0, leveldown_1.default)(directory, leveldownOpts), levelupOptions);\n        const db = await new Promise((resolve, reject) => {\n            const db = (0, levelup_1.default)(store, (err) => {\n                if (err)\n                    return void reject(err);\n                resolve(db);\n            });\n        });\n        cache.db = db;\n        cache.cacheDb = (0, subleveldown_1.default)(db, \"c\", levelupOptions);\n        cache.ancestorDb = (0, subleveldown_1.default)(db, \"a\", levelupOptions);\n        await cache.cacheDb.open();\n        await cache.ancestorDb.open();\n        await (0, helpers_1.setDbVersion)(cache.db, cache.version);\n        return cache;\n    }\n    async initialize(height, hash, request) {\n        this.hash = hash;\n        this.request = request;\n        const { targetBlock, closestAncestor, previousClosestAncestor } = await (0, helpers_1.resolveTargetAndClosestAncestor)(this.ancestorDb, this.request, height, hash);\n        this.ancestry = new ancestry_1.Ancestry(this.ancestorDb, closestAncestor);\n        const atomicBatch = this.ancestorDb.batch();\n        // if we changed closest ancestors remove our targetBlock from the previous\n        // ancestor so our target block doesn't appear in the database more than\n        // once, and update our targetBlock to point to this new ancestor\n        if (previousClosestAncestor &&\n            !previousClosestAncestor.key.equals(closestAncestor.key)) {\n            targetBlock.closestKnownAncestor = closestAncestor.key;\n            const index = previousClosestAncestor.closestKnownDescendants.findIndex(buf => buf.equals(targetBlock.key));\n            previousClosestAncestor.closestKnownDescendants.splice(index, 1);\n            atomicBatch.put(previousClosestAncestor.key, previousClosestAncestor.serialize());\n        }\n        let allKnownDescendants = [...targetBlock.closestKnownDescendants];\n        // if we don't have a closestAncestor it because the target block is block 0\n        if (closestAncestor == null) {\n            atomicBatch.put(targetBlock.key, targetBlock.serialize());\n        }\n        else {\n            const ancestorsDescendants = [targetBlock.key];\n            await Promise.all(closestAncestor.closestKnownDescendants.map(async (descendantKey) => {\n                // don't match ourself\n                if (descendantKey.equals(targetBlock.key))\n                    return;\n                const { height: descendantHeight } = tree_1.Tree.decodeKey(descendantKey);\n                // if the block number is less than our own it can't be our descendant\n                if (descendantHeight.toBigInt() <= height.toBigInt()) {\n                    ancestorsDescendants.push(descendantKey);\n                    return;\n                }\n                const descendantValue = await this.ancestorDb.get(descendantKey);\n                const descendantNode = tree_1.Tree.deserialize(descendantKey, descendantValue);\n                const descendantRawBlock = await this.getBlock(descendantHeight);\n                // if the block doesn't exist on our chain, it can't be our child,\n                // keep it in the parent\n                if (descendantRawBlock == null ||\n                    descendantRawBlock.hash !==\n                        utils_1.Data.from(descendantNode.hash, 32).toString()) {\n                    ancestorsDescendants.push(descendantKey);\n                }\n                else {\n                    targetBlock.closestKnownDescendants.push(descendantNode.key);\n                    // keep track of *all* known descendants so we don't bother\n                    // checking if they are a known closest descendant later on\n                    allKnownDescendants.push(...descendantNode.closestKnownDescendants);\n                    descendantNode.closestKnownAncestor = targetBlock.key;\n                    // update the descendant node with its newly assigned\n                    // closestKnownAncestor\n                    atomicBatch.put(descendantNode.key, descendantNode.serialize());\n                }\n            }));\n            closestAncestor.closestKnownDescendants = ancestorsDescendants;\n            atomicBatch.put(closestAncestor.key, closestAncestor.serialize());\n        }\n        // TODO(perf): we always re-save the targetBlock but could optimize to only\n        // resave if it is needed.\n        atomicBatch.put(targetBlock.key, targetBlock.serialize());\n        await atomicBatch.write();\n        // we DO want to re-balance the descendants, but we don't want to wait for\n        // it because it can't effect our current fork block's cache results since\n        // these caches will be for blocks higher than our own fork block\n        // Do not `await` this.\n        this._reBalancePromise = this.reBalanceDescendantTree(height, targetBlock, allKnownDescendants)\n            // we don't care if it fails because this is an optimization that only\n            // matters for _future_ runs of ganache for blocks beyond our current fork\n            // block\n            .catch(_ => { })\n            .finally(() => {\n            this._reBalancePromise = null;\n        });\n    }\n    async getBlock(height) {\n        return await (0, helpers_1.getBlockByNumber)(this.request, height);\n    }\n    async reBalanceDescendantTree(height, targetBlock, allKnownDescendants) {\n        const atomicBatch = this.ancestorDb.batch();\n        const closestKnownDescendants = targetBlock.closestKnownDescendants;\n        const startSize = closestKnownDescendants.length;\n        for await (const maybeDescendant of (0, helpers_1.findClosestDescendants)(this.ancestorDb, this.request, height)) {\n            const key = maybeDescendant.key;\n            // don't match with our own self\n            if (targetBlock.key.equals(key))\n                continue;\n            // this possibleDescendent's descendants can't be our direct descendants\n            // because trees can't merge\n            allKnownDescendants.push(...maybeDescendant.closestKnownDescendants);\n            // if this already is a descendent of ours we can skip it\n            if (closestKnownDescendants.some(d => d.equals(key)))\n                continue;\n            // if this already is a descendent of one of our descendants skip it\n            if (allKnownDescendants.some(d => d.equals(key)))\n                continue;\n            // move the descendant from the parent to the target\n            const parentTree = tree_1.Tree.deserialize(maybeDescendant.closestKnownAncestor, await this.ancestorDb.get(maybeDescendant.closestKnownAncestor));\n            parentTree.closestKnownDescendants.splice(parentTree.closestKnownDescendants.findIndex(d => d.equals(key)), 1);\n            maybeDescendant.closestKnownAncestor = targetBlock.key;\n            closestKnownDescendants.push(maybeDescendant.key);\n            atomicBatch.put(parentTree.key, parentTree.serialize());\n            atomicBatch.put(maybeDescendant.key, maybeDescendant.serialize());\n            // if the cache has been closed stop doing work so we can flush what we\n            // have to the database; descendant resolution shouldn't prevent us from\n            // fulling closing.\n            if (this.status === \"closed\") {\n                break;\n            }\n        }\n        // only write if we have changes to write\n        if (startSize !== closestKnownDescendants.length) {\n            atomicBatch.put(targetBlock.key, targetBlock.serialize());\n            // check `this.ancestorDb.isOpen()` as we don't need to try to write if\n            // the db was shutdown in the meantime. This can happen if ganache was\n            // closed while we were still updating the descendants\n            if (atomicBatch.length > 0 && this.ancestorDb.isOpen())\n                await atomicBatch.write();\n        }\n    }\n    async get(method, params, key) {\n        const blockNumber = (0, helpers_1.getBlockNumberFromParams)(method, params);\n        if (blockNumber == null)\n            return;\n        const height = utils_1.Quantity.from(blockNumber);\n        const bufKey = Buffer.from(key);\n        const start = lexico.encode([height.toBuffer(), bufKey]);\n        const end = lexico.encode([\n            utils_1.Quantity.from(height.toBigInt() + 1n).toBuffer()\n        ]);\n        const readStream = this.cacheDb.createReadStream({\n            gt: start,\n            lt: end,\n            keys: true,\n            values: true\n        });\n        const hashBuf = this.hash.toBuffer();\n        for await (const data of readStream) {\n            const { key: k, value } = data;\n            const [_height, _key, blockHash] = lexico.decode(k);\n            // if our key no longer matches make sure we don't keep searching\n            if (!_key.equals(bufKey))\n                return;\n            if (hashBuf.equals(blockHash) || (await this.ancestry.has(blockHash))) {\n                return value;\n            }\n        }\n    }\n    async put(method, params, key, value) {\n        const blockNumber = (0, helpers_1.getBlockNumberFromParams)(method, params);\n        if (blockNumber == null)\n            return false;\n        const height = utils_1.Quantity.from(blockNumber);\n        const dbKey = lexico.encode([\n            height.toBuffer(),\n            Buffer.from(key),\n            this.hash.toBuffer()\n        ]);\n        await this.cacheDb.put(dbKey, value);\n        return true;\n    }\n    async close() {\n        if (this.status === \"closed\")\n            return;\n        this.status = \"closed\";\n        if (this.cacheDb) {\n            await this.cacheDb.close();\n        }\n        if (this.ancestorDb) {\n            await this._reBalancePromise;\n            await this.ancestorDb.close();\n        }\n        if (this.db) {\n            await this.db.close();\n        }\n    }\n}\nexports.PersistentCache = PersistentCache;\n//# sourceMappingURL=persistent-cache.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tree = void 0;\nconst lexico = __importStar(require(\"../lexicographic-key-codec\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp = __importStar(require(\"@ganache/rlp\"));\n/**\n * A tree: https://en.wikipedia.org/wiki/Rose_tree\n * One parent, multiple children\n */\nclass Tree {\n    constructor(height, hash, closestKnownAncestor = utils_1.BUFFER_EMPTY) {\n        this.closestKnownDescendants = [];\n        this.key = Tree.encodeKey(height, hash);\n        this.hash = hash.toBuffer();\n        this.closestKnownAncestor = closestKnownAncestor;\n    }\n    serialize() {\n        return rlp.encode([\n            this.hash,\n            this.closestKnownAncestor,\n            this.closestKnownDescendants\n        ]);\n    }\n    decodeKey() {\n        return Tree.decodeKey(this.key);\n    }\n    static decodeKey(key) {\n        const [height, hash] = lexico.decode(key);\n        return {\n            height: utils_1.Quantity.from(height),\n            hash: utils_1.Data.from(hash)\n        };\n    }\n    static deserialize(key, value) {\n        const [hash, parent, children] = rlp.decode(value);\n        const tree = Object.create(Tree.prototype);\n        tree.key = key;\n        tree.hash = hash;\n        tree.closestKnownAncestor = parent;\n        tree.closestKnownDescendants = children;\n        return tree;\n    }\n    static encodeKey(height, hash) {\n        return lexico.encode([height.toBuffer(), hash.toBuffer()]);\n    }\n}\nexports.Tree = Tree;\n//# sourceMappingURL=tree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LimitCounter = void 0;\n/**\n * @param timestamp -\n * @returns the milliseconds that have elapsed since `timestamp`\n */\nfunction timeSince(timestamp) {\n    return Date.now() - timestamp;\n}\nclass LimitCounter {\n    constructor(windowLength) {\n        this.counters = new Map();\n        this.windowLength = windowLength;\n    }\n    evict() {\n        const d = this.windowLength * 3;\n        if (timeSince(this.lastEvict) < d) {\n            return;\n        }\n        this.lastEvict = Date.now();\n        const counters = this.counters;\n        counters.forEach((v, k) => {\n            if (timeSince(v.updatedAt) >= d) {\n                counters.delete(k);\n            }\n        });\n    }\n    increment(currentWindow) {\n        this.evict();\n        let v = this.counters.get(currentWindow);\n        if (v == null) {\n            this.counters.set(currentWindow, { value: 1, updatedAt: Date.now() });\n        }\n        else {\n            v.value += 1;\n            v.updatedAt = Date.now();\n        }\n    }\n    get(currentWindow, previousWindow) {\n        let curr = this.counters.get(currentWindow);\n        if (curr == null) {\n            curr = { value: 0, updatedAt: Date.now() };\n        }\n        let prev = this.counters.get(previousWindow);\n        if (prev == null) {\n            prev = { value: 0, updatedAt: Date.now() };\n        }\n        return [curr.value, prev.value];\n    }\n}\nexports.LimitCounter = LimitCounter;\n//# sourceMappingURL=limit-counter.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst semaphore_1 = __importDefault(require(\"semaphore\"));\nconst limit_counter_1 = require(\"./limit-counter\");\n/**\n * Sleeps the specified number of milliseconds, then resolves the Promise.\n * Rejects with an `AbortError` if the provided `signal` is already aborted. If\n * the signal's `\"abort\"` event is invoked while sleeping, the the promise\n * rejects with an `AbortError`.\n *\n * @param ms - the number of milliseconds to wait before resolving\n * @param abortSignal - the\n * @returns a promise that resolves when `ms`milliseconds have elapsed, or\n * rejects if the `signal` is aborted.\n */\nconst sleep = (ms, signal) => {\n    if (signal.aborted)\n        return Promise.reject(new ethereum_utils_1.AbortError());\n    return new Promise((resolve, reject) => {\n        function abort() {\n            clearTimeout(timer);\n            signal.removeEventListener(\"abort\", abort);\n            reject(new ethereum_utils_1.AbortError());\n        }\n        const timer = setTimeout(() => {\n            signal.removeEventListener(\"abort\", abort);\n            resolve();\n        }, ms);\n        signal.addEventListener(\"abort\", abort);\n    });\n};\n/**\n * @param timestamp -\n * @param duration -\n * @returns the result of rounding `timestamp` toward zero to a multiple of\n * `duration`.\n */\nfunction timeTruncate(timestamp, duration) {\n    return timestamp - (timestamp % duration);\n}\n/**\n * @param result -\n * @returns true if the result is a JSON-RPC LIMIT_EXCEEDED error\n */\nfunction isExceededLimitError(response) {\n    return ((0, utils_1.hasOwn)(response, \"error\") &&\n        response.error != null &&\n        response.error.code === utils_1.JsonRpcErrorCode.LIMIT_EXCEEDED);\n}\n/**\n * A sliding window rate limiter.\n *\n * Rate estimation from\n * https://blog.cloudflare.com/counting-things-a-lot-of-different-things/\n *\n * Let's say we set a limit of 50 requests per minute. The counter can be\n * thought of like this:\n *\n * ```ascii\n *         ╔══════════════════════════════════╗\n *         ║   sampling period: 60 seconds    ║\n * ╭───────╫────────────────────────┬─────────╫──────────────────────╮\n * │       ║previous minute         │         current minute         │\n * │       ║  42 requests           │         ║18 requests           │\n * ╰───────╫────────────────────────┼─────────╫──────────────────────╯\n *         ║         45 secs        │ 15 secs ║\n *         ╚════════════════════════╧═════════╝\n * ```\n *\n * In this situation, we did 18 requests during the current minute, which\n * started 15 seconds ago, and 42 requests during the entire previous minute.\n * Based on this information, the rate approximation is calculated like this:\n *\n * ```javascript\n * rate = (42 * (45 / 60)) + 18\n *      = (42 * 0.75) + 18\n *      = 49.5 // requests\n *\n *      = 59.5 // requests\n * ```\n *\n * One more request during the next second and the rate limiter will kick in.\n *\n * This algorithm assumes a constant rate of requests during the previous\n * sampling period (which can be any time span), so the result is only\n * an approximation of the actual rate, but it is quick to calculate and\n * lightweight.\n */\nclass RateLimiter {\n    constructor(requestLimit, windowSizeMs, abortSignal) {\n        this.sem = (0, semaphore_1.default)(1);\n        this.take = () => new Promise(resolve => this.sem.take(resolve));\n        this.mustBackoff = null;\n        this.counter = 0;\n        this.requestLimit = requestLimit;\n        // the rate limiter splits the window in 2 to measure the RPS\n        this.windowSizeMs = windowSizeMs / 2;\n        this.limitCounter = new limit_counter_1.LimitCounter(this.windowSizeMs);\n        this.abortSignal = abortSignal;\n    }\n    /**\n     * @param now -\n     * @param currentWindow -\n     * @returns the current request rate and the allowed execution time of the\n     * next request\n     */\n    status(now, currentWindow) {\n        const limit = this.requestLimit;\n        const windowSizeMs = this.windowSizeMs;\n        const currWindow = currentWindow;\n        const prevWindow = currWindow - windowSizeMs;\n        const [currCount, prevCount] = this.limitCounter.get(currWindow, prevWindow);\n        let rate;\n        if (prevCount === 0) {\n            rate = currCount;\n        }\n        else {\n            // use the average for the previous window, plus everything for this\n            // window\n            rate =\n                prevCount * ((windowSizeMs - (now - currWindow)) / windowSizeMs) +\n                    currCount;\n        }\n        // limit <= 0 means the limiter is disabled\n        if (limit > 0 && rate + 1 > limit) {\n            const nextCount = currCount + 1;\n            const nextLimit = limit + 1;\n            const next = prevCount === 0\n                ? currWindow + windowSizeMs + windowSizeMs / nextLimit\n                : (windowSizeMs * (prevCount + nextCount - nextLimit)) / prevCount +\n                    currWindow;\n            return { rate, next };\n        }\n        return { rate, next: now };\n    }\n    /**\n     * Executes the given fn within the confines of the configured rate limit. If\n     * the function's return value is a JSON-RPC LIMIT_EXCEEDED error, it will\n     * automatically retry with the given `backoff_seconds`\n     * @param fn -\n     */\n    async handle(fn) {\n        // allow scheduling one fn at a time\n        await this.take();\n        try {\n            return await this.schedule(fn);\n        }\n        finally {\n            this.sem.leave();\n        }\n    }\n    async schedule(fn) {\n        const signal = this.abortSignal;\n        while (true) {\n            if (signal.aborted)\n                return Promise.reject(new ethereum_utils_1.AbortError());\n            if (this.mustBackoff)\n                await this.mustBackoff;\n            const now = Date.now();\n            const currentWindow = timeTruncate(now, this.windowSizeMs);\n            const { rate, next } = this.status(now, currentWindow);\n            // process.stdout.write(\n            //   `rate: ${rate}, wait: ${next - now}              \\r`\n            // );\n            // if this request would be over the rate limit and the amount of time\n            // we'd need to back off is > 1ms we need to schedule this in the future\n            if (rate + 1 > this.requestLimit && next > now) {\n                await sleep(Date.now() - next, signal);\n            }\n            else {\n                this.limitCounter.increment(currentWindow);\n                const result = await fn();\n                if (isExceededLimitError(result.response)) {\n                    if ((0, utils_1.hasOwn)(result.response.error.data, \"rate\")) {\n                        const backoffSeconds = result.response.error.data.rate.backoff_seconds;\n                        // console.log(`backing off for ${backoffSeconds}`);\n                        // console.log(result.error.data.rate);\n                        // TODO: I need to make all in-flight requests that will soon return\n                        // a LIMIT_EXCEEDED error behave, otherwise we'll just send ALL\n                        // requests back to Infura simultaneously after their initial 30\n                        // backoff_seconds have elapsed.\n                        //\n                        // When we are *not* self-rate limited (meaning fork.rps isn't set)\n                        // we need to be able to go at full speed until we are, and THEN we\n                        // need to go at whatever infura wants.\n                        //\n                        // TODO: TODO: ask infura to add the X-Rate-Limit* headers to all\n                        // HTTP responses so we can poll for info to help us avoid ever\n                        // getting rate limited in the first place.\n                        // this is part of an attempt at solving the above comment\n                        this.requestLimit =\n                            result.response.error.data.rate.allowed_rps *\n                                (this.windowSizeMs / 1000);\n                        const limiter = (this.mustBackoff = sleep(backoffSeconds * 1000, signal));\n                        await this.mustBackoff;\n                        if (this.mustBackoff === limiter) {\n                            this.mustBackoff = null;\n                        }\n                        continue;\n                    }\n                    else {\n                        // we don't know how to parse this error, so we do nothing, I guess?\n                    }\n                }\n                return result;\n            }\n        }\n    }\n}\nexports.default = RateLimiter;\n//# sourceMappingURL=rate-limiter.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkStateManager = void 0;\nconst rlp_1 = require(\"rlp\");\nconst stateManager_1 = __importDefault(require(\"@ethereumjs/vm/dist/state/stateManager\"));\nconst cache_1 = require(\"./cache\");\n/**\n * Interface for getting and setting data from an underlying\n * state trie.\n */\nclass ForkStateManager extends stateManager_1.default {\n    /**\n     * Instantiate the StateManager interface.\n     */\n    constructor(opts) {\n        super(opts);\n        this._cache = new cache_1.ForkCache(opts.trie);\n    }\n    /**\n     * Copies the current instance of the `StateManager`\n     * at the last fully committed point, i.e. as if all current\n     * checkpoints were reverted.\n     */\n    copy() {\n        return new ForkStateManager({\n            trie: this._trie.copy(false),\n            common: this._common\n        });\n    }\n    /**\n     * Creates a storage trie from the primary storage trie\n     * for an account and saves this in the storage cache.\n     * @private\n     */\n    async _lookupStorageTrie(address) {\n        // from state trie\n        const account = await this.getAccount(address);\n        const storageTrie = this._trie.copy(true);\n        storageTrie.setContext(account.stateRoot, address.buf, storageTrie.blockNumber);\n        // we copy checkpoints over only for the metadata checkpoints, not the trie\n        // checkpoints.\n        storageTrie.db.checkpoints = [];\n        return storageTrie;\n    }\n    /**\n     * Gets the storage value associated with the provided `address` and `key`.\n     * This method returns the shortest representation of the stored value.\n     * @param address - Address of the account to get the storage for\n     * @param key - Key in the account's storage to get the value for. Must be 32\n     * bytes long.\n     * @returns {Promise<Buffer>} - The storage value for the account\n     * corresponding to the provided address at the provided key. If this does not\n     * exist an empty `Buffer` is returned.\n     */\n    async getContractStorage(address, key) {\n        const trie = (await this._getStorageTrie(address));\n        const value = await trie.get(key);\n        return (0, rlp_1.decode)(value);\n    }\n}\nexports.ForkStateManager = ForkStateManager;\n//# sourceMappingURL=state-manager.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkTrie = void 0;\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst utils_1 = require(\"@ganache/utils\");\nconst trie_1 = require(\"../helpers/trie\");\nconst subleveldown_1 = __importDefault(require(\"subleveldown\"));\nconst checkpointDb_1 = require(\"merkle-patricia-tree/dist/checkpointDb\");\nconst lexico = __importStar(require(\"./lexicographic-key-codec\"));\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst DELETED_VALUE = Buffer.allocUnsafe(1).fill(1);\nconst GET_CODE = \"eth_getCode\";\nconst GET_NONCE = \"eth_getTransactionCount\";\nconst GET_BALANCE = \"eth_getBalance\";\nconst GET_STORAGE_AT = \"eth_getStorageAt\";\nconst MetadataSingletons = new WeakMap();\nconst LEVELDOWN_OPTIONS = {\n    keyEncoding: \"binary\",\n    valueEncoding: \"binary\"\n};\nfunction isEqualKey(encodedKey, address, key) {\n    const decodedKey = lexico.decode(encodedKey);\n    const [_, keyAddress, deletedKey] = decodedKey;\n    return keyAddress.equals(address) && deletedKey.equals(key);\n}\nclass ForkTrie extends trie_1.GanacheTrie {\n    constructor(db, root, blockchain) {\n        super(db, root, blockchain);\n        this.address = null;\n        this.isPreForkBlock = false;\n        /**\n         * Gets an account from the fork/fallback.\n         *\n         * @param address - the address of the account\n         * @param blockNumber - the block number at which to query the fork/fallback.\n         * @param stateRoot - the state root at the given blockNumber\n         */\n        this.accountFromFallback = async (address, blockNumber) => {\n            const { fallback } = this.blockchain;\n            const number = this.blockchain.fallback.selectValidForkBlockNumber(blockNumber);\n            // get nonce, balance, and code from the fork/fallback\n            const codeProm = fallback.request(GET_CODE, [address, number]);\n            const promises = [\n                fallback.request(GET_NONCE, [address, number]),\n                fallback.request(GET_BALANCE, [address, number]),\n                null\n            ];\n            // create an account so we can serialize everything later\n            const account = new ethereum_utils_1.Account(address);\n            // because code requires additional asynchronous processing, we await and\n            // process it ASAP\n            try {\n                const codeHex = await codeProm;\n                if (codeHex !== \"0x\") {\n                    const code = utils_1.Data.from(codeHex).toBuffer();\n                    // the codeHash is just the keccak hash of the code itself\n                    account.codeHash = (0, utils_1.keccak)(code);\n                    if (!account.codeHash.equals(ethereumjs_util_1.KECCAK256_NULL)) {\n                        // insert the code directly into the database with a key of `codeHash`\n                        promises[2] = this.db.put(account.codeHash, code);\n                    }\n                }\n            }\n            catch (e) {\n                // Since we fired off some promises that may throw themselves we need to\n                // catch these errors and discard them.\n                Promise.all(promises).catch(e => { });\n                throw e;\n            }\n            // finally, set the `nonce` and `balance` on the account before returning\n            // the serialized data\n            const [nonce, balance] = await Promise.all(promises);\n            account.nonce =\n                nonce === \"0x0\" ? utils_1.RPCQUANTITY_EMPTY : utils_1.Quantity.from(nonce, true);\n            account.balance =\n                balance === \"0x0\" ? utils_1.RPCQUANTITY_EMPTY : utils_1.Quantity.from(balance);\n            return account.serialize();\n        };\n        this.storageFromFallback = async (address, key, blockNumber) => {\n            const result = await this.blockchain.fallback.request(GET_STORAGE_AT, [\n                `0x${address.toString(\"hex\")}`,\n                `0x${key.toString(\"hex\")}`,\n                this.blockchain.fallback.selectValidForkBlockNumber(blockNumber)\n            ]);\n            if (!result)\n                return null;\n            // remove the `0x` and all leading 0 pairs:\n            const compressed = result.replace(/^0x(00)*/, \"\");\n            const buf = Buffer.from(compressed, \"hex\");\n            return (0, rlp_1.encode)(buf);\n        };\n        this.accounts = blockchain.accounts;\n        this.blockNumber = this.blockchain.fallback.blockNumber;\n        this.forkBlockNumber = this.blockNumber.toBigInt();\n        if (MetadataSingletons.has(db)) {\n            this.metadata = new checkpointDb_1.CheckpointDB(MetadataSingletons.get(db));\n        }\n        else {\n            const metadataDb = (0, subleveldown_1.default)(db, \"f\", LEVELDOWN_OPTIONS);\n            MetadataSingletons.set(db, metadataDb);\n            this.metadata = new checkpointDb_1.CheckpointDB(metadataDb);\n        }\n    }\n    set root(value) {\n        this._root = value;\n    }\n    get root() {\n        return this._root;\n    }\n    checkpoint() {\n        super.checkpoint();\n        this.metadata.checkpoint(this.root);\n    }\n    async commit() {\n        await Promise.all([super.commit(), this.metadata.commit()]);\n    }\n    async revert() {\n        await Promise.all([super.revert(), this.metadata.revert()]);\n    }\n    setContext(stateRoot, address, blockNumber) {\n        this._root = stateRoot;\n        this.address = address;\n        this.blockNumber = blockNumber;\n        this.isPreForkBlock = blockNumber.toBigInt() < this.forkBlockNumber;\n    }\n    async put(key, val) {\n        return super.put(key, val);\n    }\n    /**\n     * Removes saved metadata from the given block range (inclusive)\n     * @param startBlockNumber - (inclusive)\n     * @param endBlockNumber - (inclusive)\n     */\n    async revertMetaData(startBlockNumber, endBlockNumber) {\n        const db = this.metadata._leveldb;\n        const stream = db.createKeyStream({\n            gte: lexico.encode([startBlockNumber.toBuffer()]),\n            lt: lexico.encode([\n                utils_1.Quantity.from(endBlockNumber.toBigInt() + 1n).toBuffer()\n            ])\n        });\n        const batch = db.batch();\n        for await (const key of stream)\n            batch.del(key);\n        await batch.write();\n    }\n    createDelKey(key) {\n        const blockNum = this.blockNumber.toBuffer();\n        return lexico.encode([blockNum, this.address, key]);\n    }\n    /**\n     * Checks if the key was deleted (locally -- not on the fork)\n     * @param key -\n     */\n    async keyWasDeleted(key) {\n        const selfAddress = this.address === null ? utils_1.BUFFER_EMPTY : this.address;\n        // check the uncommitted checkpoints for deleted keys before\n        // checking the database itself\n        // TODO(perf): there is probably a better/faster way of doing this for the\n        // common case.\n        const checkpoints = this.metadata.checkpoints;\n        for (let i = checkpoints.length - 1; i >= 0; i--) {\n            for (let [encodedKeyStr, value] of checkpoints[i].keyValueMap.entries()) {\n                if (!value || !value.equals(DELETED_VALUE))\n                    continue;\n                const encodedKey = Buffer.from(encodedKeyStr, \"binary\");\n                if (isEqualKey(encodedKey, selfAddress, key))\n                    return true;\n            }\n        }\n        // since we didn't find proof of deletion in a checkpoint let's check the\n        // database for it.\n        // We start searching from our database key (blockNum + address + key)\n        // down to the earliest block we know about.\n        // TODO(perf): this is just going to be slow once we get lots of keys\n        // because it just checks every single key we've ever deleted (before this\n        // one).\n        const stream = this.metadata._leveldb.createReadStream({\n            lte: this.createDelKey(key),\n            reverse: true\n        });\n        for await (const data of stream) {\n            const { key: encodedKey, value } = data;\n            if (!value || !value.equals(DELETED_VALUE))\n                continue;\n            if (isEqualKey(encodedKey, selfAddress, key))\n                return true;\n        }\n        // we didn't find proof of deletion so we return `false`\n        return false;\n    }\n    async del(key) {\n        await this.lock.wait();\n        // we only track if the key was deleted (locally) for state tries _after_\n        // the fork block because we can't possibly delete keys _before_ the fork\n        // block, since those happened before ganache was even started\n        // This little optimization can cut debug_traceTransaction time _in half_.\n        if (!this.isPreForkBlock) {\n            const delKey = this.createDelKey(key);\n            const metaDataPutPromise = this.metadata.put(delKey, DELETED_VALUE);\n            const hash = (0, utils_1.keccak)(key);\n            const { node, stack } = await this.findPath(hash);\n            if (node)\n                await this._deleteNode(hash, stack);\n            await metaDataPutPromise;\n        }\n        else {\n            const hash = (0, utils_1.keccak)(key);\n            const { node, stack } = await this.findPath(hash);\n            if (node)\n                await this._deleteNode(hash, stack);\n        }\n        this.lock.signal();\n    }\n    async get(key) {\n        const value = await super.get(key);\n        if (value != null)\n            return value;\n        // since we don't have this key in our local trie check if we've have\n        // deleted it (locally)\n        // we only check if the key was deleted (locally) for state tries _after_\n        // the fork block because we can't possibly delete keys _before_ the fork\n        // block, since those happened before ganache was even started\n        // This little optimization can cut debug_traceTransaction time _in half_.\n        if (!this.isPreForkBlock && (await this.keyWasDeleted(key)))\n            return null;\n        if (this.address === null) {\n            // if the trie context's address isn't set, our key represents an address:\n            return this.accountFromFallback(ethereum_address_1.Address.from(key), this.blockNumber);\n        }\n        else {\n            // otherwise the key represents storage at the given address:\n            return this.storageFromFallback(this.address, key, this.blockNumber);\n        }\n    }\n    /**\n     * Returns a copy of the underlying trie with the interface of ForkTrie.\n     * @param includeCheckpoints - If true and during a checkpoint, the copy will\n     * contain the checkpointing metadata and will use the same scratch as\n     * underlying db.\n     */\n    copy(includeCheckpoints = true) {\n        const db = this.db.copy();\n        const secureTrie = new ForkTrie(db._leveldb, this.root, this.blockchain);\n        secureTrie.accounts = this.accounts;\n        secureTrie.address = this.address;\n        secureTrie.blockNumber = this.blockNumber;\n        if (includeCheckpoints && this.isCheckpoint) {\n            secureTrie.db.checkpoints = [...this.db.checkpoints];\n            // Our `metadata.checkpoints` needs to be the same reference to the\n            // parent's metadata.checkpoints so that we can continue to track these\n            // changes on this copy, otherwise deletions made to a contract's storage\n            // may not be tracked.\n            // Note: db.checkpoints don't need this same treatment because of the way\n            // the statemanager uses a contract's trie: it doesn't ever save to it.\n            // Instead, it saves to its own internal cache, which eventually gets\n            // reverted or committed (flushed). Our metadata doesn't utilize a central\n            // cache.\n            secureTrie.metadata.checkpoints = this.metadata.checkpoints;\n        }\n        return secureTrie;\n    }\n}\nexports.ForkTrie = ForkTrie;\n//# sourceMappingURL=trie.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deriveFromIndex = exports.deriveFromPath = exports.createAccountFromSeed = exports.createAccountGeneratorFromSeedAndPath = void 0;\nconst crypto_1 = require(\"crypto\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst HARDENED_OFFSET = 0x80000000;\nconst MASTER_SECRET = Buffer.from(\"Bitcoin seed\", \"utf8\");\nfunction createAccountGeneratorFromSeedAndPath(seedBuffer, hdPath) {\n    const parent = createAccountFromSeed(seedBuffer);\n    const path = deriveFromPath(hdPath, parent);\n    return (index) => {\n        return deriveFromIndex(index, path);\n    };\n}\nexports.createAccountGeneratorFromSeedAndPath = createAccountGeneratorFromSeedAndPath;\nfunction createAccountFromSeed(seedBuffer) {\n    const I = (0, crypto_1.createHmac)(\"sha512\", MASTER_SECRET).update(seedBuffer).digest();\n    const privateKey = I.slice(0, 32);\n    const chainCode = I.slice(32);\n    const publicKey = makePublicKey(privateKey);\n    return {\n        privateKey,\n        chainCode,\n        publicKey\n    };\n}\nexports.createAccountFromSeed = createAccountFromSeed;\nfunction deriveFromPath(fullPath, child) {\n    fullPath.forEach(function (c, i) {\n        if (i === 0) {\n            if (!/^[mM]{1}/.test(c)) {\n                throw new Error('Path must start with \"m\" or \"M\"');\n            }\n            return;\n        }\n        const hardened = c.length > 1 && c[c.length - 1] === \"'\";\n        let childIndex = parseInt(c, 10);\n        if (childIndex >= HARDENED_OFFSET)\n            throw new Error(\"Invalid index\");\n        if (hardened)\n            childIndex += HARDENED_OFFSET;\n        child = deriveChild(childIndex, hardened, child.privateKey, child.publicKey, child.chainCode);\n    });\n    return child;\n}\nexports.deriveFromPath = deriveFromPath;\nfunction deriveFromIndex(index, child) {\n    if (index >= HARDENED_OFFSET)\n        throw new Error(\"Invalid index\");\n    return deriveChild(index, false, child.privateKey, child.publicKey, child.chainCode);\n}\nexports.deriveFromIndex = deriveFromIndex;\nfunction makePublicKey(privateKey) {\n    const publicKey = Buffer.allocUnsafe(33);\n    switch (secp256k1_1.default.publicKeyCreate(publicKey, privateKey)) {\n        case 0:\n            return publicKey;\n        case 1:\n            throw new Error(\"Private Key is invalid\");\n        case 2:\n            throw new Error(\"Public Key serialization error\");\n    }\n}\n/**\n * A buffer of size 4 that can be reused as long as all changes are consumed\n * within the same event loop.\n */\nconst SHARED_BUFFER_4 = Buffer.allocUnsafe(4);\nfunction deriveChild(index, isHardened, privateKey, publicKey, chainCode) {\n    const indexBuffer = SHARED_BUFFER_4;\n    indexBuffer.writeUInt32BE(index, 0);\n    let data;\n    const privateKeyLength = privateKey.length;\n    if (isHardened) {\n        // Hardened child\n        // privateKeyLength + 1 (BUFFER_ZERO.length) + 4 (indexBuffer.length)\n        const dataLength = privateKeyLength + 1 + 4;\n        data = Buffer.concat([utils_1.BUFFER_ZERO, privateKey, indexBuffer], dataLength);\n    }\n    else {\n        // Normal child\n        data = Buffer.concat([publicKey, indexBuffer], publicKey.length + 4);\n    }\n    const I = (0, crypto_1.createHmac)(\"sha512\", chainCode).update(data).digest();\n    const IL = I.slice(0, 32);\n    try {\n        const newPrivK = Buffer.allocUnsafe(privateKeyLength);\n        privateKey.copy(newPrivK, 0, 0, privateKeyLength);\n        switch (secp256k1_1.default.privateKeyTweakAdd(newPrivK, IL)) {\n            case 0:\n                return {\n                    privateKey: newPrivK,\n                    publicKey: makePublicKey(newPrivK),\n                    chainCode: I.slice(32)\n                };\n            case 1:\n                throw new Error(\"The tweak was out of range or the resulted private key is invalid\");\n        }\n    }\n    catch {\n        return deriveChild(index + 1, isHardened, privateKey, publicKey, chainCode);\n    }\n}\n//# sourceMappingURL=hdkey.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertArgLength = void 0;\nfunction assertArgLength(min, max = min) {\n    return function (target, propertyKey, descriptor) {\n        const original = descriptor.value;\n        descriptor.value = function () {\n            const length = arguments.length;\n            if (length < min || length > max) {\n                throw new Error(`Incorrect number of arguments. '${propertyKey}' requires ${min === max\n                    ? `exactly ${min} ${min === 1 ? \"argument\" : \"arguments\"}.`\n                    : `between ${min} and ${max} arguments.`}`);\n            }\n            return Reflect.apply(original, this, arguments);\n        };\n        return descriptor;\n    };\n}\nexports.assertArgLength = assertArgLength;\n//# sourceMappingURL=assert-arg-length.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferify = void 0;\nconst PARTS = Buffer.from('[]{},\"\":null');\nconst SQUARE_BRACKET_PAIR = PARTS.slice(0, 2);\nconst SQUARE_BRACKET_OPEN = SQUARE_BRACKET_PAIR.slice(0, 1);\nconst SQUARE_BRACKET_CLOSE = SQUARE_BRACKET_PAIR.slice(1, 2);\nconst CURLY_BRACKET_PAIR = PARTS.slice(2, 4);\nconst CURLY_BRACKET_OPEN = CURLY_BRACKET_PAIR.slice(0, 1);\nconst CURLY_BRACKET_CLOSE = CURLY_BRACKET_PAIR.slice(1, 2);\nconst COMMA_QUOTE = PARTS.slice(4, 6);\nconst COMMA = COMMA_QUOTE.slice(0, 1);\nconst QUOTE_PAIR = PARTS.slice(5, 7);\nconst QUOTE_COLON = PARTS.slice(6, 8);\nconst COLON = QUOTE_COLON.slice(1, 2);\nconst NULL = PARTS.slice(8, 12);\nconst _EMPTY = PARTS.slice(0, 0);\nconst toStr = Object.prototype.toString;\nconst isObj = (val) => toStr.call(val) === \"[object Object]\";\nfunction numberToBuffer(value) {\n    const str = value.toString();\n    const { length } = str;\n    if (length > 0) {\n        const buf = Buffer.allocUnsafe(length);\n        buf.utf8Write(str, 0, length);\n        return buf;\n    }\n    else {\n        return _EMPTY;\n    }\n}\nfunction stringToQuotedBuffer(value) {\n    const { length } = value;\n    if (length > 0) {\n        const buf = Buffer.allocUnsafe(length + 2); // + 2 for the quotation marks\n        buf[0] = 34; // DOUBLE QUOTE\n        buf[length + 1] = 34; // DOUBLE QUOTE\n        buf.utf8Write(value, 1, length);\n        return buf;\n    }\n    else {\n        return QUOTE_PAIR;\n    }\n}\nfunction* arrayToBuffer(value) {\n    const { length } = value;\n    if (length === 0) {\n        yield SQUARE_BRACKET_PAIR;\n        return;\n    }\n    else {\n        yield SQUARE_BRACKET_OPEN;\n        // sends the first array value:\n        for (const chunkified of bufferify(value[0], \"0\")) {\n            // if the value ends up being nothing (undefined), return null\n            yield chunkified.length === 0 ? NULL : chunkified;\n        }\n        // sends the rest of the array values:\n        for (let i = 1; i < length; i++) {\n            yield COMMA;\n            for (const chunkified of bufferify(value[i], i.toString())) {\n                // if the value ends up being nothing (undefined), return null\n                yield chunkified.length === 0 ? NULL : chunkified;\n            }\n        }\n        yield SQUARE_BRACKET_CLOSE;\n        return;\n    }\n}\nfunction bufferToQuotedBuffer(value) {\n    const { length } = value;\n    const buf = Buffer.allocUnsafe(length + 2);\n    buf[0] = 34;\n    value.copy(buf, 1, 0, length);\n    buf[length + 1] = 34;\n    return buf;\n}\nfunction* objectToBuffer(obj, nameOrIndex) {\n    if (\"toJSON\" in obj) {\n        yield* bufferify(obj.toJSON(nameOrIndex), nameOrIndex);\n        return;\n    }\n    let yieldedOpen = false;\n    for (const key in obj) {\n        const value = obj[key];\n        let yieldPrefix = true;\n        for (const chunkified of bufferify(value, key)) {\n            // if the chunkified value ends up being nothing (undefined) ignore\n            // the property\n            const chunkLength = chunkified.length;\n            if (chunkLength === 0)\n                continue;\n            // only yield the prefix once per `key`\n            if (yieldPrefix) {\n                yieldPrefix = false;\n                const quotedKey = stringToQuotedBuffer(key);\n                if (!yieldedOpen) {\n                    yield Buffer.concat([\n                        CURLY_BRACKET_OPEN,\n                        quotedKey,\n                        COLON,\n                        chunkified\n                    ]);\n                    yieldedOpen = true;\n                }\n                else {\n                    yield Buffer.concat([COMMA, quotedKey, COLON, chunkified]);\n                }\n            }\n            else {\n                yield chunkified;\n            }\n        }\n    }\n    // if we yielded the\n    if (yieldedOpen) {\n        yield CURLY_BRACKET_CLOSE;\n        return;\n    }\n    else {\n        yield CURLY_BRACKET_PAIR;\n        return;\n    }\n}\n/**\n * Converts a JavaScript value to a JavaScript Object Notation (JSON) Buffer\n * (utf-8 encoded).\n *\n * This is a hack. It:\n *  * Does not support circular references.\n *  * Does not support double quotes within Object keys; only alphanumerics are\n *    considered safe to use\n *  * Probably doesn't support non-ASCII characters\n *  * Is only tested on transaction traces\n *\n * Only useful if the `JSON.stringify`ed version would create a string larger\n * than what the JavaScript engine can handle.\n *\n * What is the maximum string size in Node/V8? It depends on the version! Some\n * versions are 256MB, some are ~1GB, and others are ~0.5GB.\n * See: https://stackoverflow.com/a/47781288/160173\n *\n * CAUTION: This method is approx 3 - 20 times slower than using:\n * `Buffer.from(JSON.stringify(value), \"utf-8\")`\n *\n * @param value - A JavaScript value, usually an object or array, to be converted.\n * @param nameOrIndex - JSON.stringify calls an object's toJSON method, and this\n * property is used by internal recursive calls to bufferify.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#tojson_behavior\n */\nfunction* bufferify(value, nameOrIndex) {\n    const type = typeof value;\n    if (type === \"number\" || type === \"boolean\") {\n        yield numberToBuffer(value);\n    }\n    else if (type === \"string\") {\n        yield stringToQuotedBuffer(value);\n    }\n    else if (Buffer.isBuffer(value)) {\n        yield bufferToQuotedBuffer(value);\n    }\n    else if (Array.isArray(value)) {\n        yield* arrayToBuffer(value);\n    }\n    else if (isObj(value)) {\n        yield* objectToBuffer(value, nameOrIndex);\n    }\n    else if (value === null) {\n        yield NULL;\n    }\n    else if (type === \"undefined\") {\n        // nothing is returned for undefined\n        yield _EMPTY;\n    }\n    else if (\"toJSON\" in value && typeof value.toJSON === \"function\") {\n        yield* bufferify(value.toJSON(), nameOrIndex);\n    }\n    else {\n        throw new Error(\"unsupported value in bufferify\");\n    }\n}\nexports.bufferify = bufferify;\n//# sourceMappingURL=bufferify.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseFilter = exports.parseFilterRange = exports.parseFilterDetails = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nfunction parseFilterDetails(filter) {\n    // `filter.address` may be a single address or an array\n    const addresses = filter.address\n        ? (Array.isArray(filter.address) ? filter.address : [filter.address]).map(a => ethereum_address_1.Address.from(a.toLowerCase()).toBuffer())\n        : [];\n    const topics = filter.topics ? filter.topics : [];\n    return { addresses, topics };\n}\nexports.parseFilterDetails = parseFilterDetails;\nfunction parseFilterRange(filter, blockchain) {\n    const latestBlock = blockchain.blocks.latest.header.number;\n    const fromBlock = blockchain.blocks.getEffectiveNumber(filter.fromBlock || ethereum_utils_1.Tag.latest);\n    const latestBlockNumber = latestBlock.toNumber();\n    const toBlock = blockchain.blocks.getEffectiveNumber(filter.toBlock || ethereum_utils_1.Tag.latest);\n    let toBlockNumber;\n    // don't search after the \"latest\" block, unless it's \"pending\", of course.\n    if (toBlock > latestBlock) {\n        toBlockNumber = latestBlockNumber;\n    }\n    else {\n        toBlockNumber = toBlock.toNumber();\n    }\n    return {\n        fromBlock,\n        toBlock,\n        toBlockNumber\n    };\n}\nexports.parseFilterRange = parseFilterRange;\nfunction parseFilter(filter = { address: [], topics: [] }, blockchain) {\n    const { addresses, topics } = parseFilterDetails(filter);\n    const { fromBlock, toBlock, toBlockNumber } = parseFilterRange(filter, blockchain);\n    return {\n        addresses,\n        fromBlock,\n        toBlock,\n        toBlockNumber,\n        topics\n    };\n}\nexports.parseFilter = parseFilter;\n//# sourceMappingURL=filter-parsing.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst bn = (val = 0) => new ethereumjs_util_1.BN(val);\nconst STIPEND = bn(2300);\nconst MULTIPLE = 64 / 63;\nconst check = set => opname => set.has(opname);\nconst isCall = check(new Set([\"CALL\", \"DELEGATECALL\", \"STATICCALL\", \"CALLCODE\"]));\nconst isCallOrCallcode = check(new Set([\"CALL\", \"CALLCODE\"]));\nconst isCreate = check(new Set([\"CREATE\", \"CREATE2\"]));\nconst isTerminator = check(new Set([\"STOP\", \"RETURN\", \"REVERT\", \"INVALID\", \"SELFDESTRUCT\"]));\nconst stepTracker = () => {\n    const sysOps = [];\n    const allOps = [];\n    const preCompile = new Set();\n    let preCompileCheck = false;\n    let precompileCallDepth = 0;\n    return {\n        collect: info => {\n            if (preCompileCheck) {\n                if (info.depth === precompileCallDepth) {\n                    // If the current depth is unchanged.\n                    // we record its position.\n                    preCompile.add(allOps.length - 1);\n                }\n                // Reset the flag immediately here\n                preCompileCheck = false;\n            }\n            if (isCall(info.opcode.name)) {\n                info.stack = info.stack.map(val => val.clone());\n                preCompileCheck = true;\n                precompileCallDepth = info.depth;\n                sysOps.push({\n                    index: allOps.length,\n                    depth: info.depth,\n                    name: info.opcode.name\n                });\n            }\n            else if (isCreate(info.opcode.name) || isTerminator(info.opcode.name)) {\n                sysOps.push({\n                    index: allOps.length,\n                    depth: info.depth,\n                    name: info.opcode.name\n                });\n            }\n            // This goes last so we can use the length for the index ^\n            allOps.push(info);\n        },\n        isPrecompile: index => preCompile.has(index),\n        done: () => !allOps.length ||\n            sysOps.length < 2 ||\n            !isTerminator(allOps[allOps.length - 1].opcode.name),\n        ops: allOps,\n        systemOps: sysOps\n    };\n};\nconst estimateGas = (generateVM, runArgs, callback) => {\n    exactimate(generateVM(), runArgs, (err, result) => {\n        if (err)\n            return callback(err);\n        binSearch(generateVM, runArgs, result, (err, result) => {\n            if (err)\n                return callback(err);\n            callback(null, result);\n        });\n    });\n};\nconst binSearch = async (generateVM, runArgs, result, callback) => {\n    const MAX = runArgs.block.header.gasLimit;\n    const gasRefund = result.execResult.gasRefund;\n    const startingGas = gasRefund\n        ? result.gasEstimate.add(gasRefund)\n        : result.gasEstimate;\n    const range = { lo: startingGas, hi: startingGas };\n    const isEnoughGas = async (gas) => {\n        const vm = generateVM(); // Generate fresh VM\n        runArgs.tx.gasLimit = new ethereumjs_util_1.BN(gas.toArrayLike(Buffer));\n        await vm.stateManager.checkpoint();\n        const result = await vm.runTx(runArgs).catch(vmerr => ({ vmerr }));\n        await vm.stateManager.revert();\n        return !result.vmerr && !result.execResult.exceptionError;\n    };\n    if (!(await isEnoughGas(range.hi))) {\n        do {\n            range.hi = range.hi.muln(MULTIPLE);\n        } while (!(await isEnoughGas(range.hi)));\n        while (range.lo.addn(1).lt(range.hi)) {\n            const mid = range.lo.add(range.hi).divn(2);\n            if (await isEnoughGas(mid)) {\n                range.hi = mid;\n            }\n            else {\n                range.lo = mid;\n            }\n        }\n        if (range.hi.gte(MAX)) {\n            if (!(await isEnoughGas(range.hi))) {\n                return callback(new Error(\"gas required exceeds allowance or always failing transaction\"));\n            }\n        }\n    }\n    result.gasEstimate = range.hi;\n    callback(null, result);\n};\nconst exactimate = async (vm, runArgs, callback) => {\n    const steps = stepTracker();\n    vm.on(\"step\", steps.collect);\n    const Context = (index, fee) => {\n        const base = index === 0;\n        let start = index;\n        let stop = 0;\n        const cost = bn();\n        let sixtyFloorths = bn();\n        const op = steps.ops[index];\n        const next = steps.ops[index + 1];\n        const intermediateCost = op.gasLeft.sub(next.gasLeft);\n        const callingFee = fee || bn();\n        let compositeContext = false;\n        function addGas(val) {\n            // Add to our current context, but accounted for in sixtyfloorths\n            if (sixtyFloorths.gtn(0)) {\n                if (val.gte(sixtyFloorths)) {\n                    sixtyFloorths = bn();\n                }\n                else {\n                    sixtyFloorths.isub(val);\n                }\n            }\n            cost.iadd(val);\n        }\n        return {\n            start: () => start,\n            stop: () => stop,\n            setStart: val => {\n                start = val;\n                compositeContext = true;\n            },\n            setStop: val => {\n                stop = val;\n            },\n            getCost: () => ({ cost, sixtyFloorths }),\n            transfer: ctx => {\n                const values = ctx.getCost();\n                addGas(values.cost);\n                sixtyFloorths.iadd(values.sixtyFloorths);\n            },\n            addSixtyFloorth: sixtyFloorth => {\n                sixtyFloorths.iadd(sixtyFloorth);\n            },\n            addRange: (fee = bn()) => {\n                // only occurs on stack increasing ops\n                addGas(steps.ops[base || compositeContext ? start : start + 1].gasLeft\n                    .sub(steps.ops[stop].gasLeft)\n                    .add(fee));\n            },\n            finalizeRange: () => {\n                let range;\n                // if we have a composite context and we are NOT at the final terminator\n                if (compositeContext && stop !== steps.ops.length - 1) {\n                    range = steps.ops[start].gasLeft.sub(steps.ops[stop - 1].gasLeft);\n                    addGas(range);\n                    const tail = steps.ops[stop - 1].gasLeft.sub(steps.ops[stop].gasLeft);\n                    range = tail.add(intermediateCost);\n                }\n                else {\n                    range = steps.ops[start].gasLeft.sub(steps.ops[stop].gasLeft);\n                }\n                range.isub(callingFee);\n                addGas(range);\n                if (isCallOrCallcode(op.opcode.name) &&\n                    !op.stack[op.stack.length - 3].isZero()) {\n                    cost.iadd(sixtyFloorths);\n                    const innerCost = next.gasLeft.sub(steps.ops[stop - 1].gasLeft);\n                    if (innerCost.gt(STIPEND)) {\n                        sixtyFloorths = cost.divn(63);\n                    }\n                    else if (innerCost.lte(STIPEND)) {\n                        sixtyFloorths = STIPEND.sub(innerCost);\n                    }\n                }\n                else if (stop !== steps.ops.length - 1) {\n                    cost.iadd(sixtyFloorths);\n                    sixtyFloorths = cost.divn(63);\n                }\n            }\n        };\n    };\n    const getTotal = () => {\n        const sysops = steps.systemOps;\n        const ops = steps.ops;\n        const opIndex = cursor => sysops[cursor].index;\n        const stack = [];\n        let cursor = 0;\n        let context = Context(0);\n        while (cursor < sysops.length) {\n            const currentIndex = opIndex(cursor);\n            const current = ops[currentIndex];\n            const name = current.opcode.name;\n            if (isCall(name) || isCreate(name)) {\n                if (steps.isPrecompile(currentIndex)) {\n                    context.setStop(currentIndex + 1);\n                    context.addRange();\n                    context.setStart(currentIndex + 1);\n                    context.addSixtyFloorth(STIPEND);\n                }\n                else {\n                    context.setStop(currentIndex);\n                    context.addRange(bn(current.opcode.fee));\n                    stack.push(context);\n                    context = Context(currentIndex, bn(current.opcode.fee)); // setup next context\n                }\n            }\n            else if (isTerminator(name)) {\n                // only on the last operation\n                context.setStop(currentIndex + 1 < steps.ops.length ? currentIndex + 1 : currentIndex);\n                context.finalizeRange();\n                const ctx = stack.pop();\n                if (ctx) {\n                    ctx.transfer(context);\n                    context = ctx;\n                    context.setStart(currentIndex + 1);\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                throw new Error(\"INVALID OPCODE\");\n            }\n            cursor++;\n        }\n        const gas = context.getCost();\n        return gas.cost.add(gas.sixtyFloorths);\n    };\n    await vm.stateManager.checkpoint();\n    const result = await vm.runTx(runArgs).catch(vmerr => ({ vmerr }));\n    await vm.stateManager.revert();\n    const vmerr = result.vmerr;\n    if (vmerr) {\n        return callback(vmerr);\n    }\n    else if (result.execResult.exceptionError) {\n        const error = new ethereum_utils_1.RuntimeError(\n        // erroneous gas estimations don't have meaningful hashes\n        utils_1.RPCQUANTITY_EMPTY, result, ethereum_utils_1.RETURN_TYPES.RETURN_VALUE);\n        return callback(error, result);\n    }\n    else if (steps.done()) {\n        const estimate = result.gasUsed;\n        result.gasEstimate = estimate;\n    }\n    else {\n        const actualUsed = steps.ops[0].gasLeft.sub(steps.ops[steps.ops.length - 1].gasLeft);\n        const sixtyFloorths = getTotal().sub(actualUsed);\n        result.gasEstimate = result.gasUsed.add(sixtyFloorths);\n    }\n    callback(vmerr, result);\n};\nexports.default = estimateGas;\n//# sourceMappingURL=gas-estimator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.warmPrecompiles = exports.activatePrecompiles = void 0;\nconst NUM_PRECOMPILES = 18;\n/**\n * An account with a balance of 1\n */\nconst SERIALIZED_PRECOMPILE = Uint8Array.from([\n    248,\n    68,\n    128,\n    1,\n    160,\n    86,\n    232,\n    31,\n    23,\n    27,\n    204,\n    85,\n    166,\n    255,\n    131,\n    69,\n    230,\n    146,\n    192,\n    248,\n    110,\n    91,\n    72,\n    224,\n    27,\n    153,\n    108,\n    173,\n    192,\n    1,\n    98,\n    47,\n    181,\n    227,\n    99,\n    180,\n    33,\n    160,\n    197,\n    210,\n    70,\n    1,\n    134,\n    247,\n    35,\n    60,\n    146,\n    126,\n    125,\n    178,\n    220,\n    199,\n    3,\n    192,\n    229,\n    0,\n    182,\n    83,\n    202,\n    130,\n    39,\n    59,\n    123,\n    250,\n    216,\n    4,\n    93,\n    133,\n    164,\n    112\n]);\nconst PRECOMPILED_ACCOUNT = {\n    serialize: () => SERIALIZED_PRECOMPILE\n};\nconst accountCache = [];\nconst makeAccount = (i) => {\n    if (accountCache[i])\n        return accountCache[i];\n    // 10 bytes, the first 19 are 0, the last byte is the address\n    const buf = Buffer.allocUnsafe(20).fill(0, 0, 19);\n    buf[19] = i;\n    return (accountCache[i] = { buf });\n};\n/**\n * Puts the precompile accounts into the state tree\n * @param stateManager -\n */\nconst activatePrecompiles = async (stateManager) => {\n    await stateManager.checkpoint();\n    const cache = stateManager._cache;\n    for (let i = 1; i <= NUM_PRECOMPILES; i++) {\n        const account = makeAccount(i);\n        cache.put(account, PRECOMPILED_ACCOUNT);\n        stateManager.touchAccount(account);\n    }\n    await stateManager.commit();\n};\nexports.activatePrecompiles = activatePrecompiles;\n/**\n * Puts the precompile accounts into the warmed addresses\n * @param stateManager -\n */\nconst warmPrecompiles = async (stateManager) => {\n    for (let i = 1; i <= NUM_PRECOMPILES; i++) {\n        const account = makeAccount(i);\n        stateManager.addWarmedAddress(account.buf);\n    }\n};\nexports.warmPrecompiles = warmPrecompiles;\n//# sourceMappingURL=precompiles.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GanacheTrie = void 0;\nconst merkle_patricia_tree_1 = require(\"merkle-patricia-tree\");\nclass GanacheTrie extends merkle_patricia_tree_1.SecureTrie {\n    constructor(db, root, blockchain) {\n        super(db, root);\n        this.blockchain = blockchain;\n    }\n    setContext(stateRoot, address, blockNumber) {\n        this.root = stateRoot;\n    }\n    /**\n     * Returns a copy of the underlying trie with the interface of GanacheTrie.\n     * @param includeCheckpoints - If true and during a checkpoint, the copy will contain the checkpointing metadata and will use the same scratch as underlying db.\n     */\n    copy(includeCheckpoints = true) {\n        const db = this.db.copy();\n        const secureTrie = new GanacheTrie(db._leveldb, this.root, this.blockchain);\n        if (includeCheckpoints && this.isCheckpoint) {\n            secureTrie.db.checkpoints = [...this.db.checkpoints];\n        }\n        return secureTrie;\n    }\n}\nexports.GanacheTrie = GanacheTrie;\n//# sourceMappingURL=trie.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Miner_currentlyExecutingPrice, _Miner_origins, _Miner_pending, _Miner_isBusy, _Miner_paused, _Miner_resumer, _Miner_currentBlockBaseFeePerGas, _Miner_resolver, _Miner_emitStepEvent, _Miner_executables, _Miner_options, _Miner_vm, _Miner_createBlock, _Miner_priced, _Miner_mine, _Miner_mineTxs, _Miner_runTx, _Miner_removeBestAndOrigin, _Miner_reset, _Miner_setPricedHeap, _Miner_updatePricedHeap, _Miner_setCurrentBlockBaseFeePerGas;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Capacity = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst merkle_patricia_tree_1 = require(\"merkle-patricia-tree\");\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst replace_from_heap_1 = __importDefault(require(\"./replace-from-heap\"));\nconst ethereum_transaction_1 = require(\"@ganache/ethereum-transaction\");\nconst provider_events_1 = require(\"../provider-events\");\n/**\n * How many transactions should be in the block.\n */\nvar Capacity;\n(function (Capacity) {\n    /**\n     * Keep mining transactions until there are no more transactions that can fit\n     * in the block, or there are no transactions left to mine.\n     */\n    Capacity[Capacity[\"FillBlock\"] = -1] = \"FillBlock\";\n    /**\n     * Mine an empty block, even if there are executable transactions available to\n     * mine.\n     */\n    Capacity[Capacity[\"Empty\"] = 0] = \"Empty\";\n    /**\n     * Mine a block with a single transaction, or empty if there are no executable\n     * transactions available to mine.\n     */\n    Capacity[Capacity[\"Single\"] = 1] = \"Single\";\n})(Capacity = exports.Capacity || (exports.Capacity = {}));\nconst updateBloom = (blockBloom, bloom) => {\n    let i = 256;\n    while (--i)\n        blockBloom[i] |= bloom[i];\n};\nconst sortByPrice = (values, a, b) => values[a].effectiveGasPrice > values[b].effectiveGasPrice;\nconst refresher = (item, context) => item.updateEffectiveGasPrice(context);\nclass Miner extends emittery_1.default {\n    /*\n     * @param executables - A live Map of pending transactions from the transaction\n     * pool. The miner will update this Map by removing the best transactions\n     * and putting them in new blocks.\n     */\n    constructor(options, executables, vm, createBlock) {\n        super();\n        _Miner_currentlyExecutingPrice.set(this, 0n);\n        _Miner_origins.set(this, new Set());\n        _Miner_pending.set(this, void 0);\n        _Miner_isBusy.set(this, false);\n        _Miner_paused.set(this, false);\n        _Miner_resumer.set(this, void 0);\n        _Miner_currentBlockBaseFeePerGas.set(this, void 0);\n        _Miner_resolver.set(this, void 0);\n        /**\n         * Because step events are expensive, CPU-wise, to create and emit we only do\n         * it conditionally.\n         */\n        _Miner_emitStepEvent.set(this, false);\n        _Miner_executables.set(this, void 0);\n        _Miner_options.set(this, void 0);\n        _Miner_vm.set(this, void 0);\n        _Miner_createBlock.set(this, void 0);\n        // create a Heap that sorts by gasPrice\n        _Miner_priced.set(this, new utils_1.Heap(sortByPrice, refresher));\n        _Miner_mine.set(this, async (block, maxTransactions = Capacity.FillBlock, onlyOneBlock = false) => {\n            const { block: lastBlock, transactions } = await __classPrivateFieldGet(this, _Miner_mineTxs, \"f\").call(this, block, maxTransactions, onlyOneBlock);\n            // if there are more txs to mine, start mining them without awaiting their\n            // result.\n            if (__classPrivateFieldGet(this, _Miner_pending, \"f\")) {\n                __classPrivateFieldGet(this, _Miner_setPricedHeap, \"f\").call(this);\n                __classPrivateFieldSet(this, _Miner_pending, false, \"f\");\n                if (!onlyOneBlock && __classPrivateFieldGet(this, _Miner_priced, \"f\").length > 0) {\n                    const nextBlock = __classPrivateFieldGet(this, _Miner_createBlock, \"f\").call(this, lastBlock);\n                    await __classPrivateFieldGet(this, _Miner_mine, \"f\").call(this, nextBlock, maxTransactions);\n                }\n            }\n            return transactions;\n        });\n        _Miner_mineTxs.set(this, async (runtimeBlock, maxTransactions, onlyOneBlock) => {\n            let block;\n            const vm = __classPrivateFieldGet(this, _Miner_vm, \"f\");\n            const { pending, inProgress } = __classPrivateFieldGet(this, _Miner_executables, \"f\");\n            const options = __classPrivateFieldGet(this, _Miner_options, \"f\");\n            let keepMining = true;\n            const priced = __classPrivateFieldGet(this, _Miner_priced, \"f\");\n            const storageKeys = new Map();\n            let blockTransactions;\n            do {\n                keepMining = false;\n                __classPrivateFieldSet(this, _Miner_isBusy, true, \"f\");\n                blockTransactions = [];\n                const transactionsTrie = new merkle_patricia_tree_1.BaseTrie(null, null);\n                const receiptTrie = new merkle_patricia_tree_1.BaseTrie(null, null);\n                // don't mine anything at all if maxTransactions is `0`\n                if (maxTransactions === Capacity.Empty) {\n                    await vm.stateManager.checkpoint();\n                    await vm.stateManager.commit();\n                    const finalizedBlockData = runtimeBlock.finalize(transactionsTrie.root, receiptTrie.root, utils_1.BUFFER_256_ZERO, vm.stateManager._trie.root, 0n, // gas used\n                    options.extraData, [], storageKeys);\n                    this.emit(\"block\", finalizedBlockData);\n                    __classPrivateFieldGet(this, _Miner_reset, \"f\").call(this);\n                    return { block: finalizedBlockData.block, transactions: [] };\n                }\n                let numTransactions = 0;\n                let blockGasLeft = options.blockGasLimit.toBigInt();\n                let blockGasUsed = 0n;\n                const blockBloom = Buffer.allocUnsafe(256).fill(0);\n                const promises = [];\n                // Set a block-level checkpoint so our unsaved trie doesn't update the\n                // vm's \"live\" trie.\n                await vm.stateManager.checkpoint();\n                const TraceData = (0, ethereum_utils_1.TraceDataFactory)();\n                // We need to listen for any SSTORE opcodes so we can grab the raw, unhashed version\n                // of the storage key and save it to the db along with it's keccak hashed version of\n                // the storage key. Why you might ask? So we can reference the raw version in\n                // debug_storageRangeAt.\n                const stepListener = (event, next) => {\n                    if (event.opcode.name === \"SSTORE\") {\n                        const key = TraceData.from(event.stack[event.stack.length - 1].toArrayLike(Buffer)).toBuffer();\n                        const hashedKey = (0, utils_1.keccak)(key);\n                        storageKeys.set(hashedKey.toString(), { key, hashedKey });\n                    }\n                    next();\n                };\n                vm.on(\"step\", stepListener);\n                // Run until we run out of items, or until the inner loop stops us.\n                // we don't call `shift()` here because we will may need to `replace`\n                // this `best` transaction with the next best transaction from the same\n                // origin later.\n                let best;\n                while ((best = priced.peek())) {\n                    const origin = best.from.toString();\n                    if (best.calculateIntrinsicGas() > blockGasLeft) {\n                        // if the current best transaction can't possibly fit in this block\n                        // go ahead and run the next best transaction, ignoring all other\n                        // pending transactions from this account for this block.\n                        //  * We don't replace this \"best\" transaction with another from the\n                        // same account.\n                        //  * We do \"unlock\" this transaction in the transaction pool's `pending`\n                        // queue so it can be replaced, if needed.\n                        best.locked = false;\n                        __classPrivateFieldGet(this, _Miner_removeBestAndOrigin, \"f\").call(this, origin);\n                        continue;\n                    }\n                    __classPrivateFieldSet(this, _Miner_currentlyExecutingPrice, best.effectiveGasPrice.toBigInt(), \"f\");\n                    // Set a transaction-level checkpoint so we can undo state changes in\n                    // the case where the transaction is rejected by the VM.\n                    await vm.stateManager.checkpoint();\n                    // Set the internal trie's block number (for forking)\n                    vm.stateManager._trie.blockNumber = utils_1.Quantity.from(runtimeBlock.header.number.toArrayLike(Buffer));\n                    const result = await __classPrivateFieldGet(this, _Miner_runTx, \"f\").call(this, best, runtimeBlock, origin, pending);\n                    if (result !== null) {\n                        const gasUsed = utils_1.Quantity.from(result.gasUsed.toArrayLike(Buffer)).toBigInt();\n                        if (blockGasLeft >= gasUsed) {\n                            // if the transaction will fit in the block, commit it!\n                            await vm.stateManager.commit();\n                            blockTransactions[numTransactions] = best;\n                            blockGasLeft -= gasUsed;\n                            blockGasUsed += gasUsed;\n                            // calculate receipt and tx tries\n                            const txKey = (0, rlp_1.encode)(numTransactions === 0\n                                ? utils_1.BUFFER_EMPTY\n                                : (0, utils_1.uintToBuffer)(numTransactions));\n                            promises.push(transactionsTrie.put(txKey, best.serialized));\n                            const receipt = best.fillFromResult(result, blockGasUsed);\n                            promises.push(receiptTrie.put(txKey, receipt));\n                            // update the block's bloom\n                            updateBloom(blockBloom, result.bloom.bitvector);\n                            numTransactions++;\n                            const pendingOrigin = pending.get(origin);\n                            // since this transaction was successful, remove it from the \"pending\"\n                            // transaction pool.\n                            keepMining = pendingOrigin.removeBest();\n                            inProgress.add(best);\n                            best.once(\"finalized\").then(() => {\n                                // it is in the database (or thrown out) so delete it from the\n                                // `inProgress` Set\n                                inProgress.delete(best);\n                            });\n                            // if we:\n                            //  * don't have enough gas left for even the smallest of transactions\n                            //  * Or if we've mined enough transactions\n                            // we're done with this block!\n                            // notice: when `maxTransactions` is `-1` (AKA infinite), `numTransactions === maxTransactions`\n                            // will always return false, so this comparison works out fine.\n                            if (blockGasLeft <= ethereum_transaction_1.Params.TRANSACTION_GAS ||\n                                numTransactions === maxTransactions) {\n                                if (keepMining) {\n                                    // remove the newest (`best`) tx from this account's pending queue\n                                    // as we know we can fit another transaction in the block. Stick\n                                    // this tx into our `priced` heap.\n                                    keepMining = (0, replace_from_heap_1.default)(priced, pendingOrigin);\n                                }\n                                else {\n                                    keepMining = __classPrivateFieldGet(this, _Miner_removeBestAndOrigin, \"f\").call(this, origin);\n                                }\n                                break;\n                            }\n                            if (keepMining) {\n                                // remove the newest (`best`) tx from this account's pending queue\n                                // as we know we can fit another transaction in the block. Stick\n                                // this tx into our `priced` heap.\n                                keepMining = (0, replace_from_heap_1.default)(priced, pendingOrigin);\n                            }\n                            else {\n                                // since we don't have any more txs from this account, just get the\n                                // next bext transaction sorted in our `priced` heap.\n                                keepMining = __classPrivateFieldGet(this, _Miner_removeBestAndOrigin, \"f\").call(this, origin);\n                            }\n                        }\n                        else {\n                            // didn't fit in the current block\n                            await vm.stateManager.revert();\n                            // unlock the transaction so the transaction pool can reconsider this\n                            // transaction\n                            best.locked = false;\n                            // didn't fit. remove it from the priced transactions without replacing\n                            // it with another from the account. This transaction will have to be\n                            // run again in another block.\n                            keepMining = priced.removeBest();\n                        }\n                    }\n                    else {\n                        // no result means the transaction is an \"always failing tx\", so we\n                        // revert its changes here.\n                        // Note: we don't clean up (`removeBest`, etc) because `runTx`'s\n                        // error handler does the clean up itself.\n                        await vm.stateManager.revert();\n                    }\n                }\n                await Promise.all(promises);\n                await vm.stateManager.commit();\n                vm.removeListener(\"step\", stepListener);\n                const finalizedBlockData = runtimeBlock.finalize(transactionsTrie.root, receiptTrie.root, blockBloom, vm.stateManager._trie.root, blockGasUsed, options.extraData, blockTransactions, storageKeys);\n                block = finalizedBlockData.block;\n                this.emit(\"block\", finalizedBlockData);\n                if (onlyOneBlock) {\n                    __classPrivateFieldSet(this, _Miner_currentlyExecutingPrice, 0n, \"f\");\n                    __classPrivateFieldGet(this, _Miner_reset, \"f\").call(this);\n                    break;\n                }\n                else {\n                    __classPrivateFieldSet(this, _Miner_currentlyExecutingPrice, 0n, \"f\");\n                    __classPrivateFieldGet(this, _Miner_updatePricedHeap, \"f\").call(this);\n                    if (priced.length !== 0) {\n                        runtimeBlock = __classPrivateFieldGet(this, _Miner_createBlock, \"f\").call(this, block);\n                        // if baseFeePerGas is undefined, we are pre london hard fork.\n                        // no need to refresh the order of the heap because all Txs only have gasPrice.\n                        if (__classPrivateFieldGet(this, _Miner_currentBlockBaseFeePerGas, \"f\") !== undefined) {\n                            priced.refresh(__classPrivateFieldGet(this, _Miner_currentBlockBaseFeePerGas, \"f\"));\n                        }\n                    }\n                    else {\n                        // reset the miner\n                        __classPrivateFieldGet(this, _Miner_reset, \"f\").call(this);\n                    }\n                }\n            } while (keepMining);\n            return { block, transactions: blockTransactions };\n        });\n        _Miner_runTx.set(this, async (tx, block, origin, pending) => {\n            const context = {};\n            const vm = __classPrivateFieldGet(this, _Miner_vm, \"f\");\n            this.emit(\"ganache:vm:tx:before\", { context });\n            // we always listen to the step event even if `#emitStepEvent` is false in\n            // case the user starts listening in the middle of the transaction.\n            const stepListener = event => {\n                if (!__classPrivateFieldGet(this, _Miner_emitStepEvent, \"f\"))\n                    return;\n                this.emit(\"ganache:vm:tx:step\", (0, provider_events_1.makeStepEvent)(context, event));\n            };\n            vm.on(\"step\", stepListener);\n            try {\n                return await vm.runTx({\n                    tx: tx.toVmTransaction(),\n                    block: block\n                });\n            }\n            catch (err) {\n                const errorMessage = err.message;\n                // We do NOT want to re-run this transaction.\n                // Update the `priced` heap with the next best transaction from this\n                // account\n                const pendingOrigin = pending.get(origin);\n                if (pendingOrigin.removeBest()) {\n                    (0, replace_from_heap_1.default)(__classPrivateFieldGet(this, _Miner_priced, \"f\"), pendingOrigin);\n                }\n                else {\n                    // if there are no more transactions from this origin remove this tx\n                    // from the priced heap and clear out it's origin so it can accept new\n                    // transactions from this origin.\n                    __classPrivateFieldGet(this, _Miner_removeBestAndOrigin, \"f\").call(this, origin);\n                }\n                const e = {\n                    execResult: {\n                        runState: { programCounter: 0 },\n                        exceptionError: { error: errorMessage },\n                        returnValue: utils_1.BUFFER_EMPTY\n                    }\n                };\n                const error = new ethereum_utils_1.RuntimeError(tx.hash, e, ethereum_utils_1.RETURN_TYPES.TRANSACTION_HASH);\n                tx.finalize(\"rejected\", error);\n                return null;\n            }\n            finally {\n                vm.removeListener(\"step\", stepListener);\n                this.emit(\"ganache:vm:tx:after\", { context });\n            }\n        });\n        _Miner_removeBestAndOrigin.set(this, (origin) => {\n            __classPrivateFieldGet(this, _Miner_origins, \"f\").delete(origin);\n            return __classPrivateFieldGet(this, _Miner_priced, \"f\").removeBest();\n        });\n        _Miner_reset.set(this, () => {\n            __classPrivateFieldGet(this, _Miner_origins, \"f\").clear();\n            __classPrivateFieldGet(this, _Miner_priced, \"f\").clear();\n            __classPrivateFieldSet(this, _Miner_isBusy, false, \"f\");\n        });\n        /**\n         * Adds one transaction from each origin into the \"priced\" heap, which\n         * sorts each tx by gasPrice (high to low)\n         */\n        _Miner_setPricedHeap.set(this, () => {\n            const { pending } = __classPrivateFieldGet(this, _Miner_executables, \"f\");\n            const origins = __classPrivateFieldGet(this, _Miner_origins, \"f\");\n            const priced = __classPrivateFieldGet(this, _Miner_priced, \"f\");\n            for (let mapping of pending) {\n                const heap = mapping[1];\n                const next = heap.peek();\n                if (next && !next.locked) {\n                    const origin = next.from.toString();\n                    origins.add(origin);\n                    next.updateEffectiveGasPrice(__classPrivateFieldGet(this, _Miner_currentBlockBaseFeePerGas, \"f\"));\n                    priced.push(next);\n                    next.locked = true;\n                }\n            }\n        });\n        /**\n         * Updates the \"priced\" heap with transactions from origins it doesn't yet\n         * contain.\n         */\n        _Miner_updatePricedHeap.set(this, () => {\n            const { pending } = __classPrivateFieldGet(this, _Miner_executables, \"f\");\n            const origins = __classPrivateFieldGet(this, _Miner_origins, \"f\");\n            const priced = __classPrivateFieldGet(this, _Miner_priced, \"f\");\n            // Note: the `pending` Map passed here is \"live\", meaning it is constantly\n            // being updated by the `transactionPool`. This allows us to begin\n            // processing a block with the _current_ pending transactions, and while\n            // that is processing, to receive new transactions, updating our `priced`\n            // heap with these new pending transactions.\n            for (let mapping of pending) {\n                const heap = mapping[1];\n                const next = heap.peek();\n                if (next && !next.locked) {\n                    const price = next.effectiveGasPrice.toBigInt();\n                    if (__classPrivateFieldGet(this, _Miner_currentlyExecutingPrice, \"f\") > price) {\n                        // don't insert a transaction into the miner's `priced` heap\n                        // if it will be better than its last\n                        continue;\n                    }\n                    const origin = next.from.toString();\n                    if (origins.has(origin)) {\n                        // don't insert a transaction into the miner's `priced` heap if it\n                        // has already queued up transactions for that origin\n                        continue;\n                    }\n                    origins.add(origin);\n                    next.updateEffectiveGasPrice(__classPrivateFieldGet(this, _Miner_currentBlockBaseFeePerGas, \"f\"));\n                    priced.push(next);\n                    next.locked = true;\n                }\n            }\n        });\n        /**\n         * Sets the #currentBlockBaseFeePerGas property if the current block\n         * has a baseFeePerGas property\n         */\n        _Miner_setCurrentBlockBaseFeePerGas.set(this, (block) => {\n            const baseFeePerGas = block.header.baseFeePerGas;\n            // before london hard fork, there will be no baseFeePerGas on the block\n            __classPrivateFieldSet(this, _Miner_currentBlockBaseFeePerGas, baseFeePerGas === undefined\n                ? undefined\n                : utils_1.Quantity.from(baseFeePerGas.buf), \"f\");\n        });\n        __classPrivateFieldSet(this, _Miner_vm, vm, \"f\");\n        __classPrivateFieldSet(this, _Miner_options, options, \"f\");\n        __classPrivateFieldSet(this, _Miner_executables, executables, \"f\");\n        __classPrivateFieldSet(this, _Miner_createBlock, (previousBlock) => {\n            const newBlock = createBlock(previousBlock);\n            __classPrivateFieldGet(this, _Miner_setCurrentBlockBaseFeePerGas, \"f\").call(this, newBlock);\n            return newBlock;\n        }, \"f\");\n        // initialize the heap with an empty array\n        __classPrivateFieldGet(this, _Miner_priced, \"f\").init([]);\n    }\n    async pause() {\n        if (!__classPrivateFieldGet(this, _Miner_paused, \"f\")) {\n            __classPrivateFieldSet(this, _Miner_paused, true, \"f\");\n            __classPrivateFieldSet(this, _Miner_resumer, new Promise(resolve => {\n                __classPrivateFieldSet(this, _Miner_resolver, resolve, \"f\");\n            }), \"f\");\n        }\n        if (__classPrivateFieldGet(this, _Miner_isBusy, \"f\")) {\n            await this.once(\"idle\");\n        }\n    }\n    resume() {\n        if (!__classPrivateFieldGet(this, _Miner_paused, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _Miner_paused, false, \"f\");\n        __classPrivateFieldGet(this, _Miner_resolver, \"f\").call(this);\n    }\n    /**\n     * @param maxTransactions: - maximum number of transactions per block. If `-1`,\n     * unlimited.\n     * @param onlyOneBlock: - set to `true` if only 1 block should be mined.\n     *\n     * @returns the transactions mined in the _first_ block\n     */\n    async mine(block, maxTransactions = Capacity.FillBlock, onlyOneBlock = false) {\n        if (__classPrivateFieldGet(this, _Miner_paused, \"f\")) {\n            await __classPrivateFieldGet(this, _Miner_resumer, \"f\");\n        }\n        // only allow mining a single block at a time (per miner)\n        if (__classPrivateFieldGet(this, _Miner_isBusy, \"f\")) {\n            // if we are currently mining a block, set the `pending` property\n            // so the miner knows it can immediately start mining another block once\n            // it is done with its current work.\n            __classPrivateFieldSet(this, _Miner_pending, true, \"f\");\n            __classPrivateFieldGet(this, _Miner_updatePricedHeap, \"f\").call(this);\n            return;\n        }\n        else {\n            __classPrivateFieldGet(this, _Miner_setCurrentBlockBaseFeePerGas, \"f\").call(this, block);\n            __classPrivateFieldGet(this, _Miner_setPricedHeap, \"f\").call(this);\n            const result = await __classPrivateFieldGet(this, _Miner_mine, \"f\").call(this, block, maxTransactions, onlyOneBlock);\n            this.emit(\"idle\");\n            return result;\n        }\n    }\n    toggleStepEvent(enable) {\n        __classPrivateFieldSet(this, _Miner_emitStepEvent, enable, \"f\");\n    }\n}\nexports.default = Miner;\n_Miner_currentlyExecutingPrice = new WeakMap(), _Miner_origins = new WeakMap(), _Miner_pending = new WeakMap(), _Miner_isBusy = new WeakMap(), _Miner_paused = new WeakMap(), _Miner_resumer = new WeakMap(), _Miner_currentBlockBaseFeePerGas = new WeakMap(), _Miner_resolver = new WeakMap(), _Miner_emitStepEvent = new WeakMap(), _Miner_executables = new WeakMap(), _Miner_options = new WeakMap(), _Miner_vm = new WeakMap(), _Miner_createBlock = new WeakMap(), _Miner_priced = new WeakMap(), _Miner_mine = new WeakMap(), _Miner_mineTxs = new WeakMap(), _Miner_runTx = new WeakMap(), _Miner_removeBestAndOrigin = new WeakMap(), _Miner_reset = new WeakMap(), _Miner_setPricedHeap = new WeakMap(), _Miner_updatePricedHeap = new WeakMap(), _Miner_setCurrentBlockBaseFeePerGas = new WeakMap();\n//# sourceMappingURL=miner.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction replaceFromHeap(priced, source) {\n    // get the next best for this account, removing from the source Heap:\n    const next = source.peek();\n    if (next) {\n        // remove the current best priced transaction from this account and replace\n        // it with the account's next lowest nonce transaction:\n        priced.replaceBest(next);\n        next.locked = true;\n        return true;\n    }\n    else {\n        // since we don't have a next, just remove this item from priced\n        return priced.removeBest();\n    }\n}\nexports.default = replaceFromHeap;\n//# sourceMappingURL=replace-from-heap.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeStepEvent = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nfunction normalizeEvent(event) {\n    const { account, memory: originalMemory, opcode } = event;\n    const memoryLength = originalMemory.length;\n    // We need to copy some buffers so the user can't mutate them on us:\n    // Instead of making a bunch of individual buffers, we just make 1 and then\n    // fill it in as needed.\n    const sharedBuffer = Buffer.allocUnsafe(104 + memoryLength);\n    account.stateRoot.copy(sharedBuffer, 0, 0, 32); // always 32 bytes\n    account.codeHash.copy(sharedBuffer, 32, 0, 32); // always 32 bytes\n    event.address.buf.copy(sharedBuffer, 64, 0, 20); // always 20 bytes\n    event.codeAddress.buf.copy(sharedBuffer, 84, 0, 20); // always 20 bytes\n    const stateRoot = sharedBuffer.slice(0, 32);\n    const codeHash = sharedBuffer.slice(32, 64);\n    const address = sharedBuffer.slice(64, 84);\n    const codeAddress = sharedBuffer.slice(84, 104);\n    let memory;\n    if (memoryLength !== 0) {\n        originalMemory.copy(sharedBuffer, 104, 0, memoryLength);\n        memory = sharedBuffer.slice(104, 104 + memoryLength);\n    }\n    else {\n        memory = utils_1.BUFFER_ZERO;\n    }\n    return {\n        account: {\n            nonce: utils_1.Quantity.from(account.nonce.toArrayLike(Buffer)).toBigInt(),\n            balance: utils_1.Quantity.from(account.balance.toArrayLike(Buffer)).toBigInt(),\n            stateRoot,\n            codeHash\n        },\n        address,\n        codeAddress,\n        depth: BigInt(event.depth),\n        gasLeft: utils_1.Quantity.from(event.gasLeft.toArrayLike(Buffer)).toBigInt(),\n        gasRefund: utils_1.Quantity.from(event.gasRefund.toArrayLike(Buffer)).toBigInt(),\n        memory,\n        memoryWordCount: utils_1.Quantity.from(event.memoryWordCount.toArrayLike(Buffer)).toBigInt(),\n        opcode: {\n            name: opcode.name,\n            fee: opcode.fee\n        },\n        pc: BigInt(event.pc),\n        returnStack: event.returnStack.map(rs => rs.toArrayLike(Buffer)),\n        stack: event.stack.map(s => s.toArrayLike(Buffer))\n    };\n}\nfunction makeStepEvent(context, event) {\n    return {\n        context,\n        data: normalizeEvent(event)\n    };\n}\nexports.makeStepEvent = makeStepEvent;\n//# sourceMappingURL=provider-events.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _EthereumProvider_options, _EthereumProvider_api, _EthereumProvider_executor, _EthereumProvider_wallet, _EthereumProvider_blockchain, _EthereumProvider_send, _EthereumProvider_logRequest, _EthereumProvider_legacySendPayloads, _EthereumProvider_legacySendPayload;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst api_1 = __importDefault(require(\"./api\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_options_1 = require(\"@ganache/ethereum-options\");\nconst lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\nconst wallet_1 = __importDefault(require(\"./wallet\"));\nconst blockchain_1 = __importDefault(require(\"./blockchain\"));\nconst fork_1 = require(\"./forking/fork\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nfunction parseCoinbase(coinbase, initialAccounts) {\n    switch (typeof coinbase) {\n        case \"object\":\n            return coinbase;\n        case \"number\":\n            const account = initialAccounts[coinbase];\n            if (account) {\n                return account.address;\n            }\n            else {\n                throw new Error(`invalid coinbase address index: ${coinbase}`);\n            }\n        case \"string\":\n            return ethereum_address_1.Address.from(coinbase);\n        default: {\n            throw new Error(`coinbase address must be string or number, received: ${coinbase}`);\n        }\n    }\n}\n/**\n * Detects when a ganache:vm:tx:step listener is active and signals the onChange\n * function when the status changes\n * @param provider -\n * @param onChange -\n */\nfunction hookEventSystem(provider, onChange) {\n    let listenerCount = 0;\n    provider.on(emittery_1.default.listenerAdded, ({ eventName }) => {\n        if (eventName === \"ganache:vm:tx:step\" || eventName === undefined) {\n            if (listenerCount === 0) {\n                onChange(true);\n            }\n            listenerCount++;\n        }\n    });\n    provider.on(emittery_1.default.listenerRemoved, ({ eventName }) => {\n        if (eventName === \"ganache:vm:tx:step\" || eventName === undefined) {\n            listenerCount--;\n            if (listenerCount === 0) {\n                onChange(false);\n            }\n        }\n    });\n}\nclass EthereumProvider extends emittery_1.default {\n    constructor(options = {}, executor) {\n        super();\n        _EthereumProvider_options.set(this, void 0);\n        _EthereumProvider_api.set(this, void 0);\n        _EthereumProvider_executor.set(this, void 0);\n        _EthereumProvider_wallet.set(this, void 0);\n        _EthereumProvider_blockchain.set(this, void 0);\n        /**\n         * Remove an event subscription\n         */\n        this.removeListener = this.off;\n        _EthereumProvider_send.set(this, (arg1, arg2) => {\n            let method;\n            let params;\n            let response;\n            if (typeof arg1 === \"string\") {\n                // this signature is (not) non-standard and is only a ganache thing!!!\n                // we should probably remove it, but I really like it so I haven't yet.\n                method = arg1;\n                params = arg2;\n                response = this.request({ method, params });\n            }\n            else if (typeof arg2 === \"function\") {\n                // handle backward compatibility with callback-style ganache-core\n                if (Array.isArray(arg1)) {\n                    const callback = arg2;\n                    __classPrivateFieldGet(this, _EthereumProvider_legacySendPayloads, \"f\").call(this, arg1).then(({ error, result }) => {\n                        callback(error, result);\n                    });\n                }\n                else {\n                    const callback = arg2;\n                    __classPrivateFieldGet(this, _EthereumProvider_legacySendPayload, \"f\").call(this, arg1).then(({ error, result }) => {\n                        callback(error, result);\n                    });\n                }\n            }\n            else {\n                throw new Error(\"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n                    \"is no longer synchronous and must be passed a callback as its final argument.\");\n            }\n            return response;\n        });\n        _EthereumProvider_logRequest.set(this, (method, params) => {\n            const options = __classPrivateFieldGet(this, _EthereumProvider_options, \"f\");\n            if (options.logging.verbose) {\n                options.logging.logger.log(`   >  ${method}: ${params == null\n                    ? params\n                    : JSON.stringify(params, null, 2).split(\"\\n\").join(\"\\n   > \")}`);\n            }\n            else {\n                options.logging.logger.log(method);\n            }\n        });\n        this.disconnect = async () => {\n            await __classPrivateFieldGet(this, _EthereumProvider_blockchain, \"f\").stop();\n            this.emit(\"disconnect\");\n            return;\n        };\n        //#region legacy\n        _EthereumProvider_legacySendPayloads.set(this, (payloads) => {\n            return Promise.all(payloads.map(__classPrivateFieldGet(this, _EthereumProvider_legacySendPayload, \"f\"))).then(results => {\n                let mainError = null;\n                const responses = [];\n                results.forEach(({ error, result }, i) => {\n                    responses.push(result);\n                    if (error) {\n                        if (mainError == null) {\n                            mainError = new Error(\"Batch error:\");\n                        }\n                        mainError.errors[i] = error;\n                    }\n                });\n                return { error: mainError, result: responses };\n            });\n        });\n        _EthereumProvider_legacySendPayload.set(this, async (payload) => {\n            const method = payload.method;\n            const params = payload.params;\n            try {\n                const result = await this.request({ method, params });\n                return {\n                    error: null,\n                    result: (0, utils_1.makeResponse)(payload.id, JSON.parse(JSON.stringify(result)))\n                };\n            }\n            catch (error) {\n                let result;\n                // In order to provide `vmErrorsOnRPCResponse`, the `error` might have\n                // a `result` property that we need to move to the result field. Yes,\n                // it's super weird behavior!\n                if ((0, utils_1.hasOwn)(error, \"result\")) {\n                    result = error.result;\n                    delete error.result;\n                }\n                return { error, result: (0, utils_1.makeError)(payload.id, error, result) };\n            }\n        });\n        __classPrivateFieldSet(this, _EthereumProvider_executor, executor, \"f\");\n        const providerOptions = (__classPrivateFieldSet(this, _EthereumProvider_options, ethereum_options_1.EthereumOptionsConfig.normalize(options), \"f\"));\n        const wallet = (__classPrivateFieldSet(this, _EthereumProvider_wallet, new wallet_1.default(providerOptions.wallet), \"f\"));\n        const accounts = wallet.initialAccounts;\n        const fork = providerOptions.fork.url ||\n            providerOptions.fork.provider ||\n            providerOptions.fork.network;\n        const fallback = fork ? new fork_1.Fork(providerOptions, accounts) : null;\n        const coinbase = parseCoinbase(providerOptions.miner.coinbase, accounts);\n        const blockchain = new blockchain_1.default(providerOptions, coinbase, fallback);\n        __classPrivateFieldSet(this, _EthereumProvider_blockchain, blockchain, \"f\");\n        blockchain.on(\"ganache:vm:tx:before\", event => {\n            this.emit(\"ganache:vm:tx:before\", event);\n        });\n        blockchain.on(\"ganache:vm:tx:step\", event => {\n            this.emit(\"ganache:vm:tx:step\", event);\n        });\n        blockchain.on(\"ganache:vm:tx:after\", event => {\n            this.emit(\"ganache:vm:tx:after\", event);\n        });\n        hookEventSystem(this, (enable) => {\n            blockchain.toggleStepEvent(enable);\n        });\n        __classPrivateFieldSet(this, _EthereumProvider_api, new api_1.default(providerOptions, wallet, blockchain), \"f\");\n    }\n    async initialize() {\n        await __classPrivateFieldGet(this, _EthereumProvider_blockchain, \"f\").initialize(__classPrivateFieldGet(this, _EthereumProvider_wallet, \"f\").initialAccounts);\n        this.emit(\"connect\");\n    }\n    /**\n     * Returns the options, including defaults and generated, used to start Ganache.\n     */\n    getOptions() {\n        return (0, lodash_clonedeep_1.default)(__classPrivateFieldGet(this, _EthereumProvider_options, \"f\"));\n    }\n    /**\n     * Returns the unlocked accounts\n     */\n    getInitialAccounts() {\n        const accounts = {};\n        const wallet = __classPrivateFieldGet(this, _EthereumProvider_wallet, \"f\");\n        const unlockedAccounts = __classPrivateFieldGet(this, _EthereumProvider_wallet, \"f\").unlockedAccounts;\n        wallet.initialAccounts.forEach(account => {\n            const address = account.address.toString();\n            accounts[address] = {\n                secretKey: account.privateKey.toString(),\n                balance: account.balance.toBigInt(),\n                unlocked: unlockedAccounts.has(address)\n            };\n        });\n        return accounts;\n    }\n    send(arg1, arg2) {\n        return __classPrivateFieldGet(this, _EthereumProvider_send, \"f\").call(this, arg1, arg2);\n    }\n    sendAsync(arg1, arg2) {\n        __classPrivateFieldGet(this, _EthereumProvider_send, \"f\").call(this, arg1, arg2);\n    }\n    /**\n     * EIP-1193 style request method\n     * @param args -\n     * @returns A Promise that resolves with the method's result or rejects with a CodedError\n     * @EIP [1193](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md)\n     */\n    async request(args) {\n        const rawResult = await this._requestRaw(args);\n        const value = await rawResult.value;\n        return JSON.parse(JSON.stringify(value));\n    }\n    /**\n     * INTERNAL. Used when the caller wants to access the original `PromiEvent`,\n     * which would otherwise be flattened into a regular Promise through the\n     * Promise chain.\n     * @param request - the request\n     */\n    async _requestRaw({ method, params }) {\n        __classPrivateFieldGet(this, _EthereumProvider_logRequest, \"f\").call(this, method, params);\n        const result = await __classPrivateFieldGet(this, _EthereumProvider_executor, \"f\").execute(__classPrivateFieldGet(this, _EthereumProvider_api, \"f\"), method, params);\n        const promise = result.value;\n        if (promise instanceof utils_1.PromiEvent) {\n            promise.on(\"message\", data => {\n                // EIP-1193\n                this.emit(\"message\", data);\n                // legacy\n                this.emit(\"data\", {\n                    jsonrpc: \"2.0\",\n                    method: \"eth_subscription\",\n                    params: data.data\n                });\n            });\n        }\n        const value = promise.catch((error) => {\n            if (__classPrivateFieldGet(this, _EthereumProvider_options, \"f\").chain.vmErrorsOnRPCResponse) {\n                if ((0, utils_1.hasOwn)(error, \"result\")) {\n                    // stringify the result here\n                    // TODO: not sure why the stringification is even needed.\n                    error.result = JSON.parse(JSON.stringify(error.result));\n                }\n            }\n            // then rethrow\n            throw error;\n        });\n        return { value: value };\n    }\n}\nexports.default = EthereumProvider;\n_EthereumProvider_options = new WeakMap(), _EthereumProvider_api = new WeakMap(), _EthereumProvider_executor = new WeakMap(), _EthereumProvider_wallet = new WeakMap(), _EthereumProvider_blockchain = new WeakMap(), _EthereumProvider_send = new WeakMap(), _EthereumProvider_logRequest = new WeakMap(), _EthereumProvider_legacySendPayloads = new WeakMap(), _EthereumProvider_legacySendPayload = new WeakMap();\n//# sourceMappingURL=provider.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _TransactionPool_options, _TransactionPool_priceBump, _TransactionPool_blockchain, _TransactionPool_accountPromises, _TransactionPool_validateTransaction;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TriageOption = void 0;\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst utils_1 = require(\"@ganache/utils\");\nconst utils_2 = require(\"@ganache/utils\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\n/**\n * Checks if the `replacer` is eligible to replace the `replacee` transaction\n * in the transaction pool queue. Replacement eligibility requires that\n * the transactions have the same nonce and the `replacer` has a gas price\n * that is `gasPrice * priceBump` better than our `replacee`.\n * @param replacee -\n * @param replaceeNonce -\n * @param replacerNonce -\n * @param replacerGasPrice -\n * @param priceBump -\n */\nfunction shouldReplace(replacee, replacerNonce, replacer, priceBump) {\n    const replaceeNonce = replacee.nonce.toBigInt();\n    // if the nonces differ, our replacer is not eligible to replace\n    if (replaceeNonce !== replacerNonce) {\n        return false;\n    }\n    // if the transaction being replaced is in the middle of being mined, we can't\n    // replpace it so let's back out early\n    if (replacee.locked) {\n        throw new ethereum_utils_1.CodedError(ethereum_utils_1.TRANSACTION_LOCKED, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED);\n    }\n    const replacerTip = \"maxPriorityFeePerGas\" in replacer\n        ? replacer.maxPriorityFeePerGas.toBigInt()\n        : replacer.effectiveGasPrice.toBigInt();\n    const replacerMaxFee = \"maxFeePerGas\" in replacer\n        ? replacer.maxFeePerGas.toBigInt()\n        : replacer.effectiveGasPrice.toBigInt();\n    const replaceeTip = \"maxPriorityFeePerGas\" in replacee\n        ? replacee.maxPriorityFeePerGas.toBigInt()\n        : replacee.effectiveGasPrice.toBigInt();\n    const replaceeMaxFee = \"maxFeePerGas\" in replacee\n        ? replacee.maxFeePerGas.toBigInt()\n        : replacee.effectiveGasPrice.toBigInt();\n    const tipPremium = replaceeTip + (replaceeTip * priceBump) / 100n;\n    const maxFeePremium = replaceeMaxFee + (replaceeMaxFee * priceBump) / 100n;\n    // if both the tip and max fee of the new transaction aren't\n    // `priceBumpPercent` more than the existing transaction, this transaction is\n    // underpriced\n    if (replacerTip < tipPremium || replacerMaxFee < maxFeePremium) {\n        throw new ethereum_utils_1.CodedError(ethereum_utils_1.UNDERPRICED, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED);\n    }\n    else {\n        return true;\n    }\n}\nfunction byNonce(values, a, b) {\n    return ((values[b].nonce.toBigInt() || 0n) > (values[a].nonce.toBigInt() || 0n));\n}\n/**\n * Used to track a transaction's placement in the transaction pool based off\n * of the its nonce.\n */\nvar TriageOption;\n(function (TriageOption) {\n    /**\n     * Default value. A tx will be added to the future queue if it is not yet\n     * executable based off of the transaction's nonce.\n     */\n    TriageOption[TriageOption[\"FutureQueue\"] = 0] = \"FutureQueue\";\n    /**\n     * The transaction is currently executable based off the transaction's nonce.\n     */\n    TriageOption[TriageOption[\"Executable\"] = 1] = \"Executable\";\n    /**\n     * The transaction is currently executable, has the same nonce as a pending\n     * transaction of the same origin, and has a gas price that is high enough to\n     * replace the currently pending transaction.\n     */\n    TriageOption[TriageOption[\"ReplacesPendingExecutable\"] = 2] = \"ReplacesPendingExecutable\";\n    /**\n     * The transaction is not currently executable but has the same nonce as a\n     * future queued transaction of the same origin and has a gas price that is\n     * high enough to replace the future queued transaction.\n     */\n    TriageOption[TriageOption[\"ReplacesFutureTransaction\"] = 3] = \"ReplacesFutureTransaction\";\n})(TriageOption = exports.TriageOption || (exports.TriageOption = {}));\nclass TransactionPool extends emittery_1.default {\n    constructor(options, blockchain, origins = new Map()) {\n        super();\n        _TransactionPool_options.set(this, void 0);\n        /**\n         * Minimum price bump percentage needed to replace a transaction that already exists in the transaction pool.\n         */\n        _TransactionPool_priceBump.set(this, void 0);\n        _TransactionPool_blockchain.set(this, void 0);\n        this.executables = {\n            inProgress: new Set(),\n            pending: new Map()\n        };\n        _TransactionPool_accountPromises.set(this, new Map());\n        this.drain = () => {\n            // notify listeners (the blockchain, then the miner, eventually) that we\n            // have executable transactions ready\n            this.emit(\"drain\");\n        };\n        _TransactionPool_validateTransaction.set(this, (transaction) => {\n            // Check the transaction doesn't exceed the current block limit gas.\n            if (transaction.gas > __classPrivateFieldGet(this, _TransactionPool_options, \"f\").blockGasLimit) {\n                return new ethereum_utils_1.CodedError(ethereum_utils_1.GAS_LIMIT, utils_2.JsonRpcErrorCode.INVALID_INPUT);\n            }\n            // Should supply enough intrinsic gas\n            const gas = transaction.calculateIntrinsicGas();\n            if (gas === -1n || transaction.gas.toBigInt() < gas) {\n                return new ethereum_utils_1.CodedError(ethereum_utils_1.INTRINSIC_GAS_TOO_LOW, utils_2.JsonRpcErrorCode.INVALID_INPUT);\n            }\n            return null;\n        });\n        __classPrivateFieldSet(this, _TransactionPool_blockchain, blockchain, \"f\");\n        __classPrivateFieldSet(this, _TransactionPool_options, options, \"f\");\n        this.origins = origins;\n        __classPrivateFieldSet(this, _TransactionPool_priceBump, options.priceBump, \"f\");\n    }\n    /**\n     * Inserts a transaction into the pending queue, if executable, or future pool\n     * if not.\n     *\n     * @param transaction -\n     * @param secretKey -\n     * @returns data that can be used to drain the queue\n     */\n    async prepareTransaction(transaction, secretKey) {\n        let err;\n        err = __classPrivateFieldGet(this, _TransactionPool_validateTransaction, \"f\").call(this, transaction);\n        if (err != null) {\n            throw err;\n        }\n        const from = transaction.from;\n        let txNonce;\n        if (!transaction.nonce.isNull()) {\n            txNonce = transaction.nonce.toBigInt();\n        }\n        const origin = from.toString();\n        // We await the `transactorNoncePromise` async request to ensure we process\n        // transactions in FIFO order *by account*. We look up accounts because\n        // ganache fills in missing nonces automatically, and we need to do it in\n        // order.\n        // The trick here is that we might actually get the next nonce from the\n        // account's pending executable transactions, not the account...\n        // But another transaction might currently be getting the nonce from the\n        // account, if it is, we need to wait for it to be done doing that. Hence:\n        let transactorPromise = __classPrivateFieldGet(this, _TransactionPool_accountPromises, \"f\").get(origin);\n        if (transactorPromise) {\n            await transactorPromise;\n        }\n        // if the user called sendTransaction or sendRawTransaction, effectiveGasPrice\n        // hasn't been set yet on the tx. calculating the effectiveGasPrice requires\n        // the block context, so we need to set it outside of the transaction. this\n        // value is updated in the miner as we're more sure of what block the tx will\n        // actually go on, but we still need to set it here to check for valid\n        // transaction replacements of same origin/nonce transactions\n        if (!transaction.effectiveGasPrice &&\n            __classPrivateFieldGet(this, _TransactionPool_blockchain, \"f\").common.isActivatedEIP(1559)) {\n            const baseFeePerGas = __classPrivateFieldGet(this, _TransactionPool_blockchain, \"f\").blocks.latest.header.baseFeePerGas;\n            transaction.updateEffectiveGasPrice(baseFeePerGas);\n        }\n        // we should _probably_ cache `highestNonce`, but it's actually a really hard thing to cache as the current highest\n        // nonce might be invalidated (like if the sender doesn't have enough funds), so we'd have to go back to the previous\n        // highest nonce... but what if that previous highest nonce was also invalidated?! we have to go back to the... you\n        // get the picture.\n        // So... we currently do things sub-optimally:\n        // if we currently have txs in `executableOriginTransactions`, we iterate over them to find the highest nonce\n        // and use that. Otherwise, we just fetch it from the database.\n        // Beware! There might still be race conditions here:\n        //  * if the highest tx executes, which causes it to be removed from the `executableOriginTransactions` heap,\n        // then a new tx comes in _before_ the block is persisted to the database, the nonce might be of the second\n        // tx would be too low.\n        //  * rough idea for a fix: transactions have a `finalize` method that is called _after_ the tx is saved. Maybe\n        // when tx's are executed their nonce is moved to a `highNonceByOrigin` map? We'd check this map in addition to the\n        // `executableOriginTransactions` map, always taking the highest of the two.\n        let highestNonce = 0n;\n        if (!transactorPromise) {\n            transactorPromise = __classPrivateFieldGet(this, _TransactionPool_blockchain, \"f\").accounts.getNonceAndBalance(from);\n            __classPrivateFieldGet(this, _TransactionPool_accountPromises, \"f\").set(origin, transactorPromise);\n            transactorPromise.then(() => {\n                __classPrivateFieldGet(this, _TransactionPool_accountPromises, \"f\").delete(origin);\n            });\n        }\n        const transactor = await transactorPromise;\n        const cost = transaction.gas.toBigInt() * transaction.maxGasPrice().toBigInt() +\n            transaction.value.toBigInt();\n        if (transactor.balance.toBigInt() < cost) {\n            throw new ethereum_utils_1.CodedError(ethereum_utils_1.INSUFFICIENT_FUNDS, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED);\n        }\n        const origins = this.origins;\n        const queuedOriginTransactions = origins.get(origin);\n        let transactionPlacement = TriageOption.FutureQueue;\n        const executables = this.executables.pending;\n        let executableOriginTransactions = executables.get(origin);\n        const priceBump = __classPrivateFieldGet(this, _TransactionPool_priceBump, \"f\");\n        let length;\n        if (executableOriginTransactions &&\n            (length = executableOriginTransactions.length)) {\n            // check if a transaction with the same nonce is in the origin's\n            // executables queue already. Replace the matching transaction or throw this\n            // new transaction away as necessary.\n            const pendingArray = executableOriginTransactions.array;\n            // Notice: we're iterating over the raw heap array, which isn't\n            // necessarily sorted\n            for (let i = 0; i < length; i++) {\n                const pendingTx = pendingArray[i];\n                if (shouldReplace(pendingTx, txNonce, transaction, priceBump)) {\n                    // do an in-place replace without triggering a re-sort because we\n                    // already know where this transaction should go in this \"byNonce\"\n                    // heap.\n                    pendingArray[i] = transaction;\n                    // we don't want to mark this transaction as \"executable\" and thus\n                    // have it added to the pool again. so use this flag to skip\n                    // a re-queue.\n                    transactionPlacement = TriageOption.ReplacesPendingExecutable;\n                    pendingTx.finalize(\"rejected\", new ethereum_utils_1.CodedError(ethereum_utils_1.REPLACED, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED));\n                    break;\n                }\n                // track the highest nonce for all transactions pending from this\n                // origin. If this transaction can't be used as a replacement, it will\n                // use this next highest nonce.\n                const pendingTxNonce = pendingTx.nonce.toBigInt();\n                if (pendingTxNonce > highestNonce)\n                    highestNonce = pendingTxNonce;\n            }\n            if (txNonce === void 0) {\n                // if we aren't signed and don't have a transactionNonce yet set it now\n                txNonce = highestNonce + 1n;\n                transaction.nonce = utils_2.Quantity.from(txNonce);\n                transactionPlacement = TriageOption.Executable;\n            }\n            else if (txNonce === highestNonce + 1n) {\n                // if our transaction's nonce is 1 higher than the last transaction in the\n                // origin's heap we are executable.\n                transactionPlacement = TriageOption.Executable;\n            }\n        }\n        else {\n            // since we don't have any executable transactions at the moment, we need\n            // to find our nonce from the account itself...\n            const transactorNonce = transactor.nonce.toBigInt();\n            if (txNonce === void 0) {\n                // if we don't have a transactionNonce, just use the account's next\n                // nonce and mark as executable\n                txNonce = transactorNonce ? transactorNonce : 0n;\n                transaction.nonce = utils_2.Quantity.from(txNonce);\n                transactionPlacement = TriageOption.Executable;\n            }\n            else if (txNonce < transactorNonce) {\n                // it's an error if the transaction's nonce is <= the persisted nonce\n                throw new ethereum_utils_1.CodedError(`the tx doesn't have the correct nonce. account has nonce of: ${transactorNonce} tx has nonce of: ${txNonce}`, utils_2.JsonRpcErrorCode.INVALID_INPUT);\n            }\n            else if (txNonce === transactorNonce) {\n                transactionPlacement = TriageOption.Executable;\n            }\n        }\n        // we have future transactions for this origin, this transaction is not yet\n        // executable, and this transaction is not replacing a previously queued/\n        // executable transaction, then this is potentially eligible to replace a\n        // future transaction\n        if (queuedOriginTransactions &&\n            transactionPlacement !== TriageOption.Executable &&\n            transactionPlacement !== TriageOption.ReplacesPendingExecutable &&\n            (length = queuedOriginTransactions.length)) {\n            // check if a transaction with the same nonce is in the origin's\n            // future queue already. Replace the matching transaction or throw this\n            // new transaction away as necessary.\n            const queuedArray = queuedOriginTransactions.array;\n            // Notice: we're iterating over the raw heap array, which isn't\n            // necessarily sorted\n            for (let i = 0; i < length; i++) {\n                const queuedTx = queuedArray[i];\n                if (shouldReplace(queuedTx, txNonce, transaction, priceBump)) {\n                    // do an in-place replace without triggering a re-sort because we\n                    // already know where this transaction should go in this \"byNonce\"\n                    // heap.\n                    queuedArray[i] = transaction;\n                    // we don't want to mark this transaction as \"FutureQueue\" and thus\n                    // have it added to the pool again. so use this flag to skip\n                    // a re-queue.\n                    transactionPlacement = TriageOption.ReplacesFutureTransaction;\n                    queuedTx.finalize(\"rejected\", new ethereum_utils_1.CodedError(ethereum_utils_1.REPLACED, utils_2.JsonRpcErrorCode.TRANSACTION_REJECTED));\n                    break;\n                }\n            }\n        }\n        // now that we know we have a transaction nonce we can sign the transaction\n        // (if we have the secret key)\n        if (secretKey) {\n            transaction.signAndHash(secretKey.toBuffer());\n        }\n        switch (transactionPlacement) {\n            case TriageOption.Executable:\n                // if it is executable add it to the executables queue\n                if (executableOriginTransactions) {\n                    executableOriginTransactions.push(transaction);\n                }\n                else {\n                    // if we don't yet have an executables queue for this origin make one now\n                    executableOriginTransactions = utils_1.Heap.from(transaction, byNonce);\n                    executables.set(origin, executableOriginTransactions);\n                }\n                // Now we need to drain any queued transactions that were previously\n                // not executable due to nonce gaps into the origin's queue...\n                if (queuedOriginTransactions) {\n                    let nextExpectedNonce = txNonce + 1n;\n                    while (true) {\n                        const nextTx = queuedOriginTransactions.peek();\n                        const nextTxNonce = nextTx.nonce.toBigInt() || 0n;\n                        if (nextTxNonce !== nextExpectedNonce) {\n                            break;\n                        }\n                        // we've got a an executable nonce! Put it in the executables queue.\n                        executableOriginTransactions.push(nextTx);\n                        // And then remove this transaction from its origin's queue\n                        if (!queuedOriginTransactions.removeBest()) {\n                            // removeBest() returns `false` when there are no more items after\n                            // the removed item. Let's do some cleanup when that happens.\n                            origins.delete(origin);\n                            break;\n                        }\n                        nextExpectedNonce += 1n;\n                    }\n                }\n                return true;\n            case TriageOption.FutureQueue:\n                // otherwise, put it in the future queue\n                if (queuedOriginTransactions) {\n                    queuedOriginTransactions.push(transaction);\n                }\n                else {\n                    origins.set(origin, utils_1.Heap.from(transaction, byNonce));\n                }\n                return false;\n            case TriageOption.ReplacesPendingExecutable:\n                // we've replaced the best transaction from this origin for this nonce,\n                // and it is executable\n                return true;\n            case TriageOption.ReplacesFutureTransaction:\n                // we've replaced the best transaction from this origin for a future\n                // nonce, so this one isn't executable\n                return false;\n        }\n    }\n    clear() {\n        this.origins.clear();\n        __classPrivateFieldGet(this, _TransactionPool_accountPromises, \"f\").clear();\n        this.executables.pending.clear();\n    }\n    /**\n     * Returns the transaction matching the given hash.\n     *\n     * This isn't the fastest thing... but querying for pending transactions is\n     * likely rare, so leaving this slow so other code paths can be faster might\n     * be okay.\n     *\n     * @param transactionHash -\n     */\n    find(transactionHash) {\n        const { pending, inProgress } = this.executables;\n        // first search pending transactions\n        for (let [_, transactions] of this.origins) {\n            if (transactions === undefined)\n                continue;\n            const arr = transactions.array;\n            for (let i = 0; i < transactions.length; i++) {\n                const tx = arr[i];\n                if (tx.hash.toBuffer().equals(transactionHash)) {\n                    return tx;\n                }\n            }\n        }\n        // then transactions eligible for execution\n        for (let [_, transactions] of pending) {\n            const arr = transactions.array;\n            for (let i = 0; i < transactions.length; i++) {\n                const tx = arr[i];\n                if (tx.hash.toBuffer().equals(transactionHash)) {\n                    return tx;\n                }\n            }\n        }\n        // and finally transactions that have just been processed, but not yet saved\n        for (let tx of inProgress) {\n            if (tx.hash.toBuffer().equals(transactionHash)) {\n                return tx;\n            }\n        }\n        return null;\n    }\n}\nexports.default = TransactionPool;\n_TransactionPool_options = new WeakMap(), _TransactionPool_priceBump = new WeakMap(), _TransactionPool_blockchain = new WeakMap(), _TransactionPool_accountPromises = new WeakMap(), _TransactionPool_validateTransaction = new WeakMap();\n//# sourceMappingURL=transaction-pool.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Wallet_randomRng, _Wallet_randomBytes, _Wallet_initializeAccounts, _Wallet_intializeAccountFromKey, _Wallet_initializeAccountWithoutKey, _Wallet_initializeAccount, _Wallet_lockAccount;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst hdkey_1 = require(\"./hdkey\");\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst bip39_1 = require(\"bip39\");\nconst seedrandom_1 = require(\"seedrandom\");\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst keccak_1 = __importDefault(require(\"keccak\"));\nconst fs_1 = require(\"fs\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\n//#region Constants\nconst SCRYPT_PARAMS = {\n    dklen: 32,\n    n: 1024,\n    p: 8,\n    r: 1\n};\nconst CIPHER = \"aes-128-ctr\";\nconst scrypt = (...args) => {\n    return new Promise((resolve, reject) => {\n        crypto_1.default.scrypt.call(crypto_1.default, ...args, (err, derivedKey) => {\n            if (err) {\n                return void reject(err);\n            }\n            return resolve(derivedKey);\n        });\n    });\n};\nconst scryptSync = (...args) => {\n    return crypto_1.default.scryptSync.call(crypto_1.default, ...args);\n};\n/**\n * A Buffer that can be reused by `uncompressedPublicKeyToAddress`.\n */\nconst SHARED_BUFFER = Buffer.allocUnsafe(65);\nconst uncompressedPublicKeyToAddress = (uncompressedPublicKey) => {\n    const status = secp256k1_1.default.publicKeyConvert(SHARED_BUFFER, uncompressedPublicKey);\n    switch (status) {\n        case 0:\n            return ethereum_address_1.Address.from((0, utils_1.keccak)(SHARED_BUFFER.slice(1)).slice(-20));\n        case 1:\n            throw new Error(\"Public Key could not be parsed\");\n        case 2:\n            throw new Error(\"Public Key serialization error\");\n    }\n};\nconst asUUID = (uuid) => {\n    return `${uuid.toString(\"hex\", 0, 4)}-${uuid.toString(\"hex\", 4, 6)}-${uuid.toString(\"hex\", 6, 8)}-${uuid.toString(\"hex\", 8, 10)}-${uuid.toString(\"hex\", 10)}`;\n};\nclass Wallet {\n    constructor(opts) {\n        this.knownAccounts = new Set();\n        this.keyFiles = new Map();\n        this.unlockedAccounts = new Map();\n        this.lockTimers = new Map();\n        _Wallet_randomRng.set(this, void 0);\n        _Wallet_randomBytes.set(this, (length) => {\n            // Since this is a mock RPC library, the rng doesn't need to be\n            // cryptographically secure, and determinism is desired.\n            const buf = Buffer.allocUnsafe(length);\n            const rand = __classPrivateFieldGet(this, _Wallet_randomRng, \"f\");\n            for (let i = 0; i < length; i++) {\n                buf[i] = (rand() * 256) | 0; // generates a random number from 0 to 255\n            }\n            return buf;\n        });\n        _Wallet_initializeAccounts.set(this, (options) => {\n            const makeAccountAtIndex = (0, hdkey_1.createAccountGeneratorFromSeedAndPath)((0, bip39_1.mnemonicToSeedSync)(options.mnemonic, null), options.hdPath);\n            // convert a potentially fractional balance of Ether to WEI\n            const balanceParts = options.defaultBalance.toString().split(\".\", 2);\n            const significand = BigInt(balanceParts[0]);\n            const fractionalStr = balanceParts[1] || \"0\";\n            const fractional = BigInt(fractionalStr);\n            const magnitude = 10n ** BigInt(fractionalStr.length);\n            const defaultBalanceInWei = utils_1.WEI * significand + fractional * (utils_1.WEI / magnitude);\n            const etherInWei = utils_1.Quantity.from(defaultBalanceInWei);\n            const accounts = new Map();\n            const givenAccounts = options.accounts;\n            let accountsLength;\n            if (givenAccounts && (accountsLength = givenAccounts.length) !== 0) {\n                for (let i = 0; i < accountsLength; i++) {\n                    const givenAccount = givenAccounts[i];\n                    const secretKey = givenAccount.secretKey;\n                    let account;\n                    if (secretKey) {\n                        const balance = utils_1.Quantity.from(givenAccount.balance);\n                        account = __classPrivateFieldGet(this, _Wallet_intializeAccountFromKey, \"f\").call(this, balance, secretKey, options);\n                    }\n                    else {\n                        const acct = makeAccountAtIndex(i);\n                        account = __classPrivateFieldGet(this, _Wallet_initializeAccountWithoutKey, \"f\").call(this, etherInWei, acct, options);\n                    }\n                    accounts.set(account.address.toString(), account);\n                }\n            }\n            else {\n                const numberOfAccounts = options.totalAccounts;\n                if (numberOfAccounts != null) {\n                    for (let i = 0; i < numberOfAccounts; i++) {\n                        const acct = makeAccountAtIndex(i);\n                        const account = __classPrivateFieldGet(this, _Wallet_initializeAccountWithoutKey, \"f\").call(this, etherInWei, acct, options);\n                        accounts.set(account.address.toString(), account);\n                    }\n                }\n            }\n            return accounts;\n        });\n        _Wallet_intializeAccountFromKey.set(this, (balance, secretKey, options) => {\n            const privateKey = utils_1.Data.from(secretKey);\n            const account = Wallet.createAccountFromPrivateKey(privateKey);\n            account.balance = balance;\n            const address = account.address;\n            __classPrivateFieldGet(this, _Wallet_initializeAccount, \"f\").call(this, address, privateKey, options);\n            return account;\n        });\n        _Wallet_initializeAccountWithoutKey.set(this, (balance, acct, options) => {\n            const address = uncompressedPublicKeyToAddress(acct.publicKey);\n            const privateKey = utils_1.Data.from(acct.privateKey);\n            const account = Wallet.createAccount(balance, privateKey, address);\n            __classPrivateFieldGet(this, _Wallet_initializeAccount, \"f\").call(this, address, privateKey, options);\n            return account;\n        });\n        _Wallet_initializeAccount.set(this, (address, privateKey, options) => {\n            const { passphrase, lock: lockAccounts } = options;\n            const knownAccounts = this.knownAccounts;\n            this.addToKeyFileSync(address, privateKey, passphrase, lockAccounts);\n            const strAddress = address.toString();\n            knownAccounts.add(strAddress);\n            // if the `lock` option has been not been set, we're safe to add this\n            // account to unlockedAccounts\n            if (!lockAccounts) {\n                this.unlockedAccounts.set(strAddress, privateKey);\n            }\n        });\n        _Wallet_lockAccount.set(this, (lowerAddress) => {\n            this.lockTimers.delete(lowerAddress);\n            this.unlockedAccounts.delete(lowerAddress);\n            return true;\n        });\n        // create a RNG from our initial starting conditions (opts.mnemonic)\n        __classPrivateFieldSet(this, _Wallet_randomRng, (0, seedrandom_1.alea)(\"ganache \" + opts.mnemonic), \"f\");\n        const initialAccounts = __classPrivateFieldGet(this, _Wallet_initializeAccounts, \"f\").call(this, opts);\n        this.initialAccounts = Array.from(initialAccounts.values());\n        this.addresses = Array.from(initialAccounts.keys());\n        const l = this.initialAccounts.length;\n        const unlockedAccounts = this.unlockedAccounts;\n        //#region Unlocked Accounts\n        const givenUnlockedAccounts = opts.unlockedAccounts;\n        if (givenUnlockedAccounts) {\n            const ul = givenUnlockedAccounts.length;\n            for (let i = 0; i < ul; i++) {\n                let arg = givenUnlockedAccounts[i];\n                let address;\n                let privateKey;\n                switch (typeof arg) {\n                    case \"string\":\n                        // `toLowerCase` so we handle uppercase `0X` formats\n                        const addressOrIndex = arg.toLowerCase();\n                        if (addressOrIndex.indexOf(\"0x\") === 0) {\n                            address = addressOrIndex;\n                            const account = initialAccounts.get(address);\n                            if (account) {\n                                privateKey = account.privateKey;\n                            }\n                            else {\n                                // this wasn't one of our initial accounts, so make a priv key.\n                                privateKey = this.createFakePrivateKey(address);\n                                // add the account to the list of addresses because we want\n                                // `eth_accounts` to return this account.\n                                this.addresses.push(address);\n                            }\n                            break;\n                        }\n                        else {\n                            // try to convert the arg string to a number.\n                            // don't use parseInt because strings like `\"123abc\"` parse\n                            // to `123`, and there is probably an error on the user's side we'd\n                            // want to uncover.\n                            const index = arg - 0;\n                            // if we don't have a valid number, or the number isn't a valid JS\n                            // integer (no bigints or decimals, please), throw an error.\n                            if (!Number.isSafeInteger(index)) {\n                                throw new Error(`Invalid value in wallet.unlockedAccounts: ${arg}`);\n                            }\n                            arg = index;\n                            // not `break`ing here because I want this to fall through to the\n                            //  `\"number\"` case below.\n                            // Refactor it if you want.\n                            // break; // no break, please.\n                        }\n                    case \"number\":\n                        const account = this.initialAccounts[arg];\n                        if (account == null) {\n                            throw new Error(`Account at index ${arg} not found. Max index available is ${l - 1}.`);\n                        }\n                        address = account.address.toString().toLowerCase();\n                        privateKey = account.privateKey;\n                        break;\n                    default:\n                        throw new Error(`Invalid value specified in unlocked_accounts`);\n                }\n                if (unlockedAccounts.has(address))\n                    continue;\n                unlockedAccounts.set(address, privateKey);\n            }\n        }\n        //#endregion\n        //#region save accounts to disk\n        if (opts.accountKeysPath != null) {\n            const fileData = {\n                addresses: {},\n                private_keys: {}\n            };\n            unlockedAccounts.forEach((privateKey, address) => {\n                fileData.addresses[address] = address;\n                fileData.private_keys[address] = privateKey;\n            });\n            // WARNING: Do not turn this to an async method without\n            // making a Wallet.initialize() function and calling it via\n            // Provider.initialize(). No async methods in constructors.\n            // writeFileSync here is acceptable.\n            (0, fs_1.writeFileSync)(opts.accountKeysPath, JSON.stringify(fileData));\n        }\n        //#endregion\n    }\n    async encrypt(privateKey, passphrase) {\n        const random = __classPrivateFieldGet(this, _Wallet_randomBytes, \"f\").call(this, 32 + 16 + 16);\n        const salt = random.slice(0, 32); // first 32 bytes\n        const iv = random.slice(32, 32 + 16); // next 16 bytes\n        const uuid = random.slice(32 + 16); // last 16 bytes\n        const derivedKey = await scrypt(passphrase, salt, SCRYPT_PARAMS.dklen, {\n            ...SCRYPT_PARAMS,\n            N: SCRYPT_PARAMS.n\n        });\n        return this.finishEncryption(derivedKey, privateKey, salt, iv, uuid);\n    }\n    /**\n     * Syncronous version of the `encrypt` function.\n     * @param privateKey -\n     * @param passphrase -\n     */\n    encryptSync(privateKey, passphrase) {\n        const random = __classPrivateFieldGet(this, _Wallet_randomBytes, \"f\").call(this, 32 + 16 + 16);\n        const salt = random.slice(0, 32); // first 32 bytes\n        const iv = random.slice(32, 32 + 16); // next 16 bytes\n        const uuid = random.slice(32 + 16); // last 16 bytes\n        const derivedKey = scryptSync(passphrase, salt, SCRYPT_PARAMS.dklen, {\n            ...SCRYPT_PARAMS,\n            N: SCRYPT_PARAMS.n\n        });\n        return this.finishEncryption(derivedKey, privateKey, salt, iv, uuid);\n    }\n    finishEncryption(derivedKey, privateKey, salt, iv, uuid) {\n        const cipher = crypto_1.default.createCipheriv(CIPHER, derivedKey.slice(0, 16), iv);\n        const ciphertext = Buffer.concat([\n            cipher.update(privateKey.toBuffer()),\n            cipher.final()\n        ]);\n        const mac = (0, keccak_1.default)(\"keccak256\")\n            .update(Buffer.concat([derivedKey.slice(16, 32), ciphertext]))\n            .digest();\n        return {\n            crypto: {\n                cipher: CIPHER,\n                ciphertext: utils_1.Data.from(ciphertext),\n                cipherparams: {\n                    iv: utils_1.Data.from(iv)\n                },\n                kdf: \"scrypt\",\n                kdfParams: {\n                    ...SCRYPT_PARAMS,\n                    salt: utils_1.Data.from(salt)\n                },\n                mac: utils_1.Data.from(mac)\n            },\n            id: asUUID(uuid),\n            version: 3\n        };\n    }\n    async decrypt(keyfile, passphrase) {\n        const crypt = keyfile.crypto;\n        if (crypt.cipher !== CIPHER) {\n            throw new Error(`keyfile cypher must be \"${CIPHER}\"`);\n        }\n        if (crypt.kdf !== \"scrypt\") {\n            throw new Error(`keyfile kdf must be \"script\"`);\n        }\n        const kdfParams = crypt.kdfParams;\n        const salt = kdfParams.salt;\n        const mac = crypt.mac;\n        const ciphertext = crypt.ciphertext.toBuffer();\n        let derivedKey;\n        let localMac;\n        if (passphrase != null) {\n            try {\n                derivedKey = await scrypt(passphrase, salt.toBuffer(), kdfParams.dklen, { ...kdfParams, N: kdfParams.n });\n                localMac = (0, keccak_1.default)(\"keccak256\")\n                    .update(Buffer.concat([derivedKey.slice(16, 32), ciphertext]))\n                    .digest();\n            }\n            catch {\n                localMac = null;\n            }\n        }\n        if (!localMac || !mac.toBuffer().equals(localMac)) {\n            throw new Error(\"could not decrypt key with given passphrase\");\n        }\n        const decipher = crypto_1.default.createDecipheriv(crypt.cipher, derivedKey.slice(0, 16), crypt.cipherparams.iv.toBuffer());\n        const plaintext = decipher.update(ciphertext);\n        return plaintext;\n    }\n    /**\n     * Stores a mapping of addresses to either encrypted (if a passphrase is used\n     * or the user specified --lock option) or unencrypted private keys.\n     * @param address - The address whose private key is being stored.\n     * @param privateKey - The passphrase to store.\n     * @param passphrase - The passphrase to use to encrypt the private key. If\n     * passphrase is empty, the private key will not be encrypted.\n     * @param lock - Flag to specify that accounts should be encrypted regardless\n     * of if the passphrase is empty.\n     */\n    async addToKeyFile(address, privateKey, passphrase, lock) {\n        // NOTE: we are avoiding encrypting the keys for an account if the\n        // passphrase is blank purely for startup performance reasons.\n        if (passphrase || lock) {\n            this.keyFiles.set(address.toString(), {\n                encrypted: true,\n                key: await this.encrypt(privateKey, passphrase)\n            });\n        }\n        else {\n            this.keyFiles.set(address.toString(), {\n                encrypted: false,\n                key: privateKey.toBuffer()\n            });\n        }\n    }\n    /**\n     * Synchronus version of `addToKeyFile`.\n     * Stores a mapping of addresses to either encrypted (if a passphrase is used\n     * or the user specified --lock option) or unencrypted private keys.\n     * @param address - The address whose private key is being stored.\n     * @param privateKey - The passphrase to store.\n     * @param passphrase - The passphrase to use to encrypt the private key. If\n     * passphrase is empty, the private key will not be encrypted.\n     * @param lock - Flag to specify that accounts should be encrypted regardless\n     * of if the passphrase is empty.\n     */\n    addToKeyFileSync(address, privateKey, passphrase, lock) {\n        // NOTE: we are avoiding encrypting the keys for an account if the\n        // passphrase is blank purely for startup performance reasons.\n        if (passphrase || lock) {\n            this.keyFiles.set(address.toString(), {\n                encrypted: true,\n                key: this.encryptSync(privateKey, passphrase)\n            });\n        }\n        else {\n            this.keyFiles.set(address.toString(), {\n                encrypted: false,\n                key: privateKey.toBuffer()\n            });\n        }\n    }\n    /**\n     * Fetches the private key for a specific address. If the keyFile is encrypted\n     * for the address, the passphrase is used to decrypt.\n     * @param address - The address whose private key is to be fetched.\n     * @param passphrase - The passphrase used to decrypt the private key.\n     */\n    async getFromKeyFile(address, passphrase) {\n        const keyFile = this.keyFiles.get(address.toString());\n        if (keyFile === undefined || keyFile === null) {\n            throw new Error(\"no key for given address or file\");\n        }\n        if (keyFile.encrypted === true) {\n            return this.decrypt(keyFile.key, passphrase);\n        }\n        else {\n            // if the keyFile is not marked as encrypted, they should provide no\n            // passphrase. so we'll make it look like they gave the \"wrong\" passphrase\n            // by throwing the same error that's thrown when decrypting\n            if (passphrase) {\n                throw new Error('could not decrypt key with given passphrase (default passphrase for accounts created at startup is \"\")');\n            }\n            else {\n                return keyFile.key;\n            }\n        }\n    }\n    static createAccount(balance, privateKey, address) {\n        const account = new ethereum_utils_1.Account(address);\n        account.privateKey = privateKey;\n        account.balance = balance;\n        return account;\n    }\n    static createAccountFromPrivateKey(privateKey) {\n        const address = ethereum_address_1.Address.from((0, ethereumjs_util_1.privateToAddress)(privateKey.toBuffer()));\n        const account = new ethereum_utils_1.Account(address);\n        account.privateKey = privateKey;\n        return account;\n    }\n    createRandomAccount() {\n        // create some seeded deterministic psuedo-randomness based on the chain's\n        // initial starting conditions\n        const seed = __classPrivateFieldGet(this, _Wallet_randomBytes, \"f\").call(this, 128);\n        const acct = (0, hdkey_1.createAccountFromSeed)(seed);\n        const address = uncompressedPublicKeyToAddress(acct.publicKey);\n        const privateKey = utils_1.Data.from(acct.privateKey);\n        return Wallet.createAccount(utils_1.RPCQUANTITY_ZERO, privateKey, address);\n    }\n    async unlockAccount(address, passphrase, duration) {\n        const lowerAddress = address.toString();\n        const secretKey = await this.getFromKeyFile(address, passphrase);\n        const existingTimer = this.lockTimers.get(lowerAddress);\n        if (existingTimer) {\n            clearTimeout(existingTimer);\n        }\n        // a duration <= 0 will remain unlocked\n        const durationMs = (duration * 1000) | 0;\n        if (durationMs > 0) {\n            const timeout = setTimeout(__classPrivateFieldGet(this, _Wallet_lockAccount, \"f\"), durationMs, lowerAddress);\n            (0, utils_1.unref)(timeout);\n            this.lockTimers.set(lowerAddress, timeout);\n        }\n        this.unlockedAccounts.set(lowerAddress, utils_1.Data.from(secretKey));\n        return true;\n    }\n    async addUnknownAccount(address, passphrase) {\n        const lowerAddress = address.toString();\n        // if we \"know\" about this account, it cannot be added this way\n        if (this.knownAccounts.has(lowerAddress)) {\n            return false;\n        }\n        // this is an unknown account, so we do not have a private key. instead,\n        // we'll need to create a fake one.\n        const privateKey = this.createFakePrivateKey(lowerAddress);\n        await this.addToKeyFile(address, privateKey, passphrase, true);\n        this.knownAccounts.add(lowerAddress);\n        this.addresses.push(lowerAddress);\n        return true;\n    }\n    async removeKnownAccount(address, passphrase) {\n        const lowerAddress = address.toString();\n        // if we don't \"know\" about this account, it cannot be removed\n        if (!this.knownAccounts.has(lowerAddress)) {\n            return false;\n        }\n        const privateKey = await this.getFromKeyFile(address, passphrase);\n        // we don't actually care what the private key is, we just need to know that\n        // the passphrase they supplied is the right one. (empty string is a valid\n        // privateKey for added, previously unknown accounts)\n        if (privateKey != null) {\n            this.keyFiles.delete(lowerAddress);\n            this.knownAccounts.delete(lowerAddress);\n            this.addresses.splice(this.addresses.indexOf(lowerAddress), 1);\n            this.lockTimers.delete(lowerAddress);\n            this.unlockedAccounts.delete(lowerAddress);\n            return true;\n        }\n        else {\n            throw new Error(\"could not find private key for address/passphrase combination\");\n        }\n    }\n    createFakePrivateKey(address) {\n        let fakePrivateKey;\n        const addressBuf = utils_1.Data.from(address).toBuffer();\n        if (addressBuf.equals(utils_1.ACCOUNT_ZERO)) {\n            // allow signing with the 0x0 address...\n            // always sign with the same fake key, a 31 `0`s followed by a single\n            // `1`. The key is arbitrary. It just must not be all `0`s and must be\n            // deterministic.\n            // see: https://github.com/ethereumjs/ethereumjs-monorepo/issues/829#issue-674385636\n            fakePrivateKey = Buffer.allocUnsafe(32).fill(0, 0, 31);\n            fakePrivateKey[31] = 1;\n        }\n        else {\n            fakePrivateKey = Buffer.concat([addressBuf, addressBuf.slice(0, 12)]);\n        }\n        return utils_1.Data.from(fakePrivateKey);\n    }\n    lockAccount(lowerAddress) {\n        if (!this.unlockedAccounts.has(lowerAddress))\n            return false;\n        clearTimeout(this.lockTimers.get(lowerAddress));\n        return __classPrivateFieldGet(this, _Wallet_lockAccount, \"f\").call(this, lowerAddress);\n    }\n}\nexports.default = Wallet;\n_Wallet_randomRng = new WeakMap(), _Wallet_randomBytes = new WeakMap(), _Wallet_initializeAccounts = new WeakMap(), _Wallet_intializeAccountFromKey = new WeakMap(), _Wallet_initializeAccountWithoutKey = new WeakMap(), _Wallet_initializeAccount = new WeakMap(), _Wallet_lockAccount = new WeakMap();\n//# sourceMappingURL=wallet.js.map","\"use strict\";\n/*!\n * @ganache/ethereum-options\n *\n * @author David Murdoch <david@trufflesuite.com> (https://davidmurdoch.com)\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChainOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst HARDFORKS = [\n    \"constantinople\",\n    \"byzantium\",\n    \"petersburg\",\n    \"istanbul\",\n    \"muirGlacier\",\n    \"berlin\",\n    \"london\",\n    \"arrowGlacier\"\n];\nexports.ChainOptions = {\n    allowUnlimitedContractSize: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Allows unlimited contract sizes while debugging. Setting this to `true` will cause ganache to behave differently than production environments.\",\n        default: () => false,\n        legacyName: \"allowUnlimitedContractSize\",\n        cliType: \"boolean\"\n    },\n    asyncRequestProcessing: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"When set to `false` only one request will be processed at a time.\",\n        default: () => true,\n        legacyName: \"asyncRequestProcessing\",\n        cliType: \"boolean\"\n    },\n    chainId: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The currently configured chain id.\",\n        default: () => 1337,\n        legacyName: \"chainId\",\n        cliType: \"number\"\n    },\n    networkId: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The id of the network returned by the RPC method `net_version`.\",\n        default: () => Date.now(),\n        defaultDescription: \"System time at process start or Network ID of forked blockchain if configured.\",\n        legacyName: \"network_id\",\n        cliAliases: [\"i\", \"networkId\"],\n        cliType: \"number\"\n    },\n    time: {\n        normalize: rawInput => new Date(rawInput),\n        cliDescription: \"Date that the first block should start.\",\n        legacyName: \"time\",\n        cliAliases: [\"t\", \"time\"],\n        cliType: \"string\",\n        cliCoerce: (input) => {\n            // try parsing the input as a number, if it works use the number\n            // otherwise pass the string along\n            const asNum = input / 1;\n            if (isNaN(asNum)) {\n                return input;\n            }\n            else {\n                return asNum;\n            }\n        }\n    },\n    hardfork: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set the hardfork rules for the EVM.\",\n        default: () => \"london\",\n        legacyName: \"hardfork\",\n        cliAliases: [\"k\", \"hardfork\"],\n        cliType: \"string\",\n        cliChoices: HARDFORKS\n    },\n    vmErrorsOnRPCResponse: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Whether to report runtime errors from EVM code as RPC errors.\",\n        default: () => false,\n        legacyName: \"vmErrorsOnRPCResponse\",\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=chain-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.DatabaseOptions = {\n    db: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify an alternative database instance, like MemDOWN\",\n        disableInCLI: true,\n        legacyName: \"db\",\n        conflicts: [\"dbPath\"]\n    },\n    dbPath: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify a path to a directory to save the chain database.\",\n        legacyName: \"db_path\",\n        cliAliases: [\"db\", \"db_path\"],\n        cliType: \"string\",\n        conflicts: [\"db\"]\n    }\n};\n//# sourceMappingURL=database-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForkOptions = exports.KNOWN_NETWORKS = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst url_1 = require(\"url\");\nconst version = process.env.VERSION || \"DEV\";\n// we aren't going to treat block numbers as a bigint, so we don't want to\n// accept block numbers we can't add to\nconst MAX_BLOCK_NUMBER = Math.floor(Number.MAX_SAFE_INTEGER / 2);\nexports.KNOWN_NETWORKS = [\n    \"mainnet\",\n    \"ropsten\",\n    \"kovan\",\n    \"rinkeby\",\n    \"goerli\",\n    \"görli\"\n];\nconst reColonSplit = /:\\s?(?:.+)/;\nfunction coerceHeaders(headers, input) {\n    // split *1* time on the first colon, this also ignores leading whitespace\n    // from the value per RFC7230\n    const [name, value] = input.split(reColonSplit);\n    headers.push({ name, value });\n    return headers;\n}\nconst ALLOWED_PROTOCOLS = [\"ws:\", \"wss:\", \"http:\", \"https:\"];\nconst arrayToOxfordList = (arr, conjunction = \"and\") => {\n    const last = arr.pop();\n    switch (arr.length) {\n        case 0:\n            return \"\";\n        case 1:\n            return last;\n        case 2:\n            return arr[0] + ` ${conjunction} ` + last;\n        default:\n            return arr.join(\", \") + `, ${conjunction} ` + last;\n    }\n};\nexports.ForkOptions = {\n    // url's definition _must_ come before blockNumber, username, and password\n    // as the defaults are processed in order, and they rely on the `fork.url`\n    url: {\n        normalize: rawInput => {\n            // because `url` is an alias of `fork`, along with `provider` and\n            // `network` the runtime type isn't always going to be `\"string\"`\n            if (typeof rawInput !== \"string\" ||\n                exports.KNOWN_NETWORKS.includes(rawInput)) {\n                // if the string matches a network name ignore it\n                return;\n            }\n            let url = new url_1.URL(rawInput);\n            const path = url.pathname + url.search;\n            const lastIndex = path.lastIndexOf(\"@\");\n            // pull the blockNumber out of the URL\n            if (lastIndex !== -1) {\n                // remove everything after the last @\n                url = new url_1.URL(path.substr(0, lastIndex), url);\n                const blockNumber = path.substr(lastIndex + 1);\n                if (blockNumber && blockNumber !== ethereum_utils_1.Tag.latest) {\n                    // don't use parseInt because strings like `\"123abc\"` parse\n                    // to `123`, and there is probably an error on the user's side we'd\n                    // want to uncover.\n                    const asNum = blockNumber - 0;\n                    // don't allow invalid, negative, or decimals\n                    if (isNaN(asNum) ||\n                        asNum < 0 ||\n                        (asNum | 0) !== asNum ||\n                        asNum > MAX_BLOCK_NUMBER) {\n                        console.warn(`Ignoring invalid block number in fork url: \"${blockNumber}\". Block number must be an integer from [0 - ${MAX_BLOCK_NUMBER}].`);\n                    }\n                    else {\n                        url._blockNumber = asNum;\n                    }\n                }\n                if (!ALLOWED_PROTOCOLS.includes(url.protocol)) {\n                    throw new Error(`Invalid protocol for fork url: ${url.protocol}. Supported protocols are: ${arrayToOxfordList(ALLOWED_PROTOCOLS)}.`);\n                }\n            }\n            return url;\n        },\n        cliDescription: `Fork from another currently running Ethereum client at a given block. Input should be the URL of the node, e.g. \\`\"http://localhost:1337\"\\`. You can optionally specify the block to fork from using an @ sign: \\`\"http://localhost:1337@8675309\"\\`.\n\nYou can specify Basic Authentication credentials in the URL as well. e.g., \\`\"wss://user:password@example.com/\"\\`. If you need to use an Infura Project Secret, you would use it like this: \\`\"wss://:{YOUR-PROJECT-SECRET}@mainnet.infura.com/...\"\\`\n\nAlternatively, you can use the \\`fork.username\\` and \\`fork.password\\` options.`,\n        legacyName: \"fork\",\n        cliAliases: [\"f\", \"fork\"],\n        conflicts: [\"provider\", \"network\"]\n    },\n    provider: {\n        normalize: rawInput => {\n            // because `provider` is an alias of `fork`, along with `network` and\n            // `url` the runtime type isn't always going to match the TypeScript type.\n            // if rawInput is a string it will be handled by the `url` or `network`\n            // handlers.\n            if (typeof rawInput === \"string\" || // like `--fork http://url` (url shorthand)\n                (typeof rawInput === \"object\" &&\n                    (typeof rawInput.url === \"string\" || // like `--fork.url http://url`\n                        typeof rawInput.url === \"boolean\" || // like `--fork` (implied \"mainnet\" network shorthand)\n                        typeof rawInput.network === \"string\" || // like `--fork.network mainnet`\n                        typeof rawInput.network === \"boolean\")) // like `--fork.network true`\n            ) {\n                return;\n            }\n            else {\n                return rawInput;\n            }\n        },\n        cliDescription: \"Specify an EIP-1193 provider to use instead of a url.\",\n        disableInCLI: true,\n        legacyName: \"fork\",\n        conflicts: [\"url\", \"network\"]\n    },\n    network: {\n        normalize: rawInput => {\n            // because `network` is an alias of `fork`, along with `provider` and\n            // `url` the runtime type isn't always going to be `\"string\"`\n            if (typeof rawInput === \"string\" && exports.KNOWN_NETWORKS.includes(rawInput))\n                return rawInput;\n            if (\n            // handle `ganache --fork` case, which gets weird because both url\n            // and network can use the `--fork` flag (the `url` handler ignores\n            // non-strings, like `true` and strings that match our known networks)\n            typeof rawInput === \"object\") {\n                if (\"url\" in rawInput) {\n                    const { url } = rawInput;\n                    if (url === true) {\n                        return \"mainnet\";\n                    }\n                    else if (exports.KNOWN_NETWORKS.includes(url)) {\n                        return rawInput.url;\n                    }\n                }\n            }\n        },\n        cliDescription: `A network name to fork from; uses Infura's archive nodes.\n\nUse the shorthand command \\`ganache --fork\\` to automatically fork from Mainnet at the latest block.\n`,\n        cliChoices: exports.KNOWN_NETWORKS,\n        legacyName: \"fork\",\n        conflicts: [\"url\", \"provider\"]\n    },\n    blockNumber: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Block number the provider should fork from.\",\n        legacyName: \"fork_block_number\",\n        default: ({ url, provider, network }) => {\n            if (url) {\n                // use the url's _blockNumber, if present, otherwise use \"latest\"\n                if (url._blockNumber) {\n                    return url._blockNumber;\n                }\n                else {\n                    return ethereum_utils_1.Tag.latest;\n                }\n            }\n            else if (provider || network) {\n                return ethereum_utils_1.Tag.latest;\n            }\n            else {\n                return;\n            }\n        },\n        defaultDescription: `Latest block number`\n        //implies: [\"url\"]\n    },\n    preLatestConfirmations: {\n        normalize: helpers_1.normalize,\n        cliDescription: 'When the `fork.blockNumber` is set to \"latest\" (default), the number of blocks before the remote node\\'s \"latest\" block to fork from.',\n        default: () => 5,\n        defaultDescription: \"5\",\n        cliType: \"number\"\n    },\n    username: {\n        normalize: helpers_1.normalize,\n        cliDescription: `* Username to use for Basic Authentication. Does not require setting \\`fork.password\\`.\n    \nWhen combined with \\`fork.password\\`, is shorthand for \\`fork: { headers: { \"Authorization\": \"Basic {ENCODED-BASIC-HEADER}\" } }\\`\n\nIf the \\`fork.headers\\` option specifies an \"Authorization\" header, it will be be inserted _after_ this Basic token.`,\n        default: ({ url }) => {\n            // use the url's username, if present\n            if (url) {\n                if (url.username) {\n                    return url.username;\n                }\n            }\n        },\n        defaultDescription: \"\"\n        //implies: [\"url\"]\n    },\n    password: {\n        normalize: helpers_1.normalize,\n        cliDescription: `Password to use for Basic Authentication. Does not require setting \\`fork.username\\`.\n\nWhen combined with \\`fork.username\\`, is shorthand for \\`fork: { headers: { \"Authorization\": \"Basic {ENCODED-BASIC-HEADER}\" } }\\`\n\nIf the \\`fork.headers\\` option specifies an \"Authorization\" header, it will be be inserted _after_ this Basic token.`,\n        default: ({ url }) => {\n            // use the url's password, if present\n            if (url) {\n                if (url.password) {\n                    return url.password;\n                }\n            }\n        },\n        defaultDescription: \"\"\n        //implies: [\"url\"]\n    },\n    jwt: {\n        normalize: helpers_1.normalize,\n        cliDescription: `_Encoded_ JSON Web Token (JWT) used for authenticating to some servers.\n\nShorthand for \\`fork: { headers: { \"Authorization\": \"Bearer {YOUR-ENCODED-JWT}\" } }\\`\n\n If the \\`fork.headers\\` option specifies an \"Authorization\" header, it will be be inserted _after_ the JWT Bearer token.`\n        //implies: [\"url\"]\n    },\n    userAgent: {\n        normalize: helpers_1.normalize,\n        cliDescription: `The User-Agent header sent to the fork on each request.\n\nSent as Api-User-Agent when used in the browser.\n \nWill be overridden by a \\`\"User-Agent\"\\` defined in the \\`fork.headers\\` option, if provided.`,\n        default: () => {\n            return `Ganache/${version} (https://www.trufflesuite.com/ganache; ganache<at>trufflesuite.com)`;\n        }\n        // implies: [\"url\"]\n    },\n    origin: {\n        normalize: helpers_1.normalize,\n        cliDescription: `The Origin header sent to the fork on each request.\n\nIgnored in the browser.\n\nWill be overridden by an \\`\"Origin\"\\` value defined in the \\`fork.headers\\` option, if provided.`\n        //implies: [\"url\"]\n    },\n    headers: {\n        normalize: helpers_1.normalize,\n        cliDescription: `Headers to supply on each request to the forked provider.\n\nHeaders set here override headers set by other options, unless otherwise specified.\n\nDefaults to: \\`[\"User-Agent: Ganache/VERSION (https://www.trufflesuite.com/ganache; ganache<at>trufflesuite.com)\"]\\``,\n        cliType: \"array:string\",\n        implies: [\"url\"],\n        cliCoerce: rawInput => rawInput.reduce(coerceHeaders, [])\n    },\n    requestsPerSecond: {\n        normalize(rawValue) {\n            if (rawValue < 0) {\n                throw new Error(`fork.requestsPerSecond is invalid: \"${rawValue}\"; must be a positive number`);\n            }\n            return rawValue;\n        },\n        default: () => 0,\n        cliDescription: \"Restrict the number of requests per second sent to the fork provider. `0` means no limit is applied.\",\n        cliType: \"number\"\n        //implies: [\"url\"]\n    },\n    disableCache: {\n        normalize: helpers_1.normalize,\n        default: () => false,\n        cliDescription: \"Disables caching of all forking requests.\",\n        cliType: \"boolean\"\n    },\n    deleteCache: {\n        normalize: helpers_1.normalize,\n        default: () => false,\n        cliDescription: \"Deletes the persistent cache before starting.\",\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=fork-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = void 0;\nconst normalize = (rawInput) => rawInput;\nexports.normalize = normalize;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthereumOptionsConfig = exports.EthereumDefaults = void 0;\nconst chain_options_1 = require(\"./chain-options\");\nconst database_options_1 = require(\"./database-options\");\nconst logging_options_1 = require(\"./logging-options\");\nconst miner_options_1 = require(\"./miner-options\");\nconst wallet_options_1 = require(\"./wallet-options\");\nconst fork_options_1 = require(\"./fork-options\");\nconst options_1 = require(\"@ganache/options\");\nexports.EthereumDefaults = {\n    chain: chain_options_1.ChainOptions,\n    database: database_options_1.DatabaseOptions,\n    logging: logging_options_1.LoggingOptions,\n    miner: miner_options_1.MinerOptions,\n    wallet: wallet_options_1.WalletOptions,\n    fork: fork_options_1.ForkOptions\n};\nexports.EthereumOptionsConfig = new options_1.OptionsConfig(exports.EthereumDefaults);\n__exportStar(require(\"./chain-options\"), exports);\n__exportStar(require(\"./database-options\"), exports);\n__exportStar(require(\"./helpers\"), exports);\n__exportStar(require(\"./logging-options\"), exports);\n__exportStar(require(\"./miner-options\"), exports);\n__exportStar(require(\"./wallet-options\"), exports);\n__exportStar(require(\"./fork-options\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.LoggingOptions = {\n    debug: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set to `true` to log EVM opcodes.\",\n        default: () => false,\n        legacyName: \"debug\",\n        cliType: \"boolean\"\n    },\n    quiet: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set to `true` to disable logging.\",\n        default: () => false,\n        cliAliases: [\"q\", \"quiet\"],\n        cliType: \"boolean\"\n    },\n    logger: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"An object, like `console`, that implements a `log` function.\",\n        disableInCLI: true,\n        // disable the default logger if `quiet` is `true`\n        default: config => ({\n            log: config.quiet ? () => { } : console.log\n        }),\n        legacyName: \"logger\"\n    },\n    verbose: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Set to `true` to log all RPC requests and responses.\",\n        default: () => false,\n        legacyName: \"verbose\",\n        cliAliases: [\"v\", \"verbose\"],\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=logging-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinerOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\n/**\n * Attempts to convert strings that don't start with `0x` to a BigInt\n *\n * @param str - a string that represents a bigint, number, or hex number\n */\nconst toBigIntOrString = (str) => {\n    if (str.startsWith(\"0x\")) {\n        return str;\n    }\n    else {\n        return BigInt(str);\n    }\n};\nexports.MinerOptions = {\n    blockTime: {\n        normalize: rawInput => {\n            if (rawInput < 0) {\n                throw new Error(\"miner.blockTime must be 0 or a positive number.\");\n            }\n            return rawInput;\n        },\n        cliDescription: 'Sets the `blockTime` in seconds for automatic mining. A blockTime of `0` enables \"instamine mode\", where new executable transactions will be mined instantly.',\n        default: () => 0,\n        legacyName: \"blockTime\",\n        cliAliases: [\"b\", \"blockTime\"],\n        cliType: \"number\"\n    },\n    defaultGasPrice: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the default gas price in WEI for transactions if not otherwise specified.\",\n        default: () => utils_1.Quantity.from(2000000000),\n        legacyName: \"gasPrice\",\n        cliAliases: [\"g\", \"gasPrice\"],\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    blockGasLimit: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the block gas limit in WEI.\",\n        default: () => utils_1.Quantity.from(30000000),\n        legacyName: \"gasLimit\",\n        cliAliases: [\"l\", \"gasLimit\"],\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    defaultTransactionGasLimit: {\n        normalize: rawType => rawType === \"estimate\" ? utils_1.RPCQUANTITY_EMPTY : utils_1.Quantity.from(rawType),\n        cliDescription: 'Sets the default transaction gas limit in WEI. Set to \"estimate\" to use an estimate (slows down transaction execution by 40%+).',\n        default: () => utils_1.Quantity.from(90000),\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    difficulty: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the block difficulty.\",\n        default: () => utils_1.RPCQUANTITY_ONE,\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    callGasLimit: {\n        normalize: utils_1.Quantity.from,\n        cliDescription: \"Sets the transaction gas limit in WEI for `eth_call` and `eth_estimateGas` calls.\",\n        default: () => utils_1.Quantity.from(50000000),\n        legacyName: \"callGasLimit\",\n        cliType: \"string\",\n        cliCoerce: toBigIntOrString\n    },\n    instamine: {\n        normalize: helpers_1.normalize,\n        cliDescription: `Set the instamine mode to either \"eager\" (default) or \"strict\".\n * In \"eager\" mode a transaction will be included in a block before its hash is returned to the caller.\n * In \"strict\" mode a transaction's hash is returned to the caller before the transaction is included in a block.\n\\`instamine\\` has no effect if \\`blockTime\\` is *not* \\`0\\` (the default).`,\n        default: () => \"eager\",\n        legacyName: \"instamine\",\n        cliAliases: [\"instamine\"],\n        cliType: \"string\",\n        cliChoices: [\"eager\", \"strict\"]\n    },\n    coinbase: {\n        normalize: rawType => {\n            return typeof rawType === \"number\" ? rawType : ethereum_address_1.Address.from(rawType);\n        },\n        cliDescription: \"Sets the address where mining rewards will go.\",\n        default: () => ethereum_address_1.Address.from(utils_1.ACCOUNT_ZERO)\n    },\n    extraData: {\n        normalize: (extra) => {\n            const bytes = utils_1.Data.from(extra);\n            if (bytes.toBuffer().length > 32) {\n                throw new Error(`extra exceeds max length. ${bytes.toBuffer().length} > 32`);\n            }\n            return bytes;\n        },\n        cliDescription: \"Set the extraData block header field a miner can include.\",\n        default: () => utils_1.DATA_EMPTY,\n        cliType: \"string\"\n    },\n    priceBump: {\n        normalize: BigInt,\n        cliDescription: \"Minimum price bump percentage needed to replace a transaction that already exists in the transaction pool.\",\n        default: () => 10n,\n        cliType: \"string\"\n    }\n};\n//# sourceMappingURL=miner-options.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst seedrandom_1 = __importDefault(require(\"seedrandom\"));\nconst bip39_1 = require(\"bip39\");\nconst options_1 = require(\"@ganache/options\");\nconst unseededRng = (0, seedrandom_1.default)();\n/**\n * WARNING: to maintain compatibility with ganache v2 this RNG only generates\n * numbers from 0-254 instead of 0-255! Hence the name, `notVeryRandomBytes`\n * @param length -\n * @param rng -\n */\nfunction notVeryRandomBytes(length, rng) {\n    const buf = Buffer.allocUnsafe(length);\n    for (let i = 0; i < length; i++) {\n        buf[i] = (rng() * 255) | 0;\n    }\n    return buf;\n}\nconst randomAlphaNumericString = (() => {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const alphabetLength = alphabet.length;\n    return (length, rng) => {\n        let text = \"\";\n        for (let i = 0; i < length; i++) {\n            text += alphabet[(rng() * alphabetLength) | 0];\n        }\n        return text;\n    };\n})();\nexports.WalletOptions = {\n    accounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: `Account data in the form \\`<private_key>,<initial_balance>\\`, can be specified multiple times. Note that private keys are 64 characters long and must be entered as an 0x-prefixed hex string. Balance can either be input as an integer, or as a 0x-prefixed hex string with either form specifying the initial balance in wei.`,\n        legacyName: \"accounts\",\n        cliAliases: [\"account\"],\n        cliType: \"array:string\",\n        cliCoerce: rawInput => {\n            return rawInput.map(accountString => {\n                // split *1* time on the first comma\n                const [secretKey, balance] = accountString.split(/,(.+)/);\n                return {\n                    secretKey,\n                    balance: BigInt(balance)\n                };\n            });\n        },\n        conflicts: [\"totalAccounts\"]\n    },\n    totalAccounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Number of accounts to generate at startup.\",\n        default: config => (config.accounts == null ? 10 : 0),\n        legacyName: \"total_accounts\",\n        cliAliases: [\"a\", \"accounts\"],\n        cliType: \"number\",\n        conflicts: [\"accounts\"]\n    },\n    deterministic: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Use pre-defined, deterministic seed.\",\n        default: () => false,\n        cliAliases: [\"d\", \"deterministic\"],\n        cliType: \"boolean\",\n        conflicts: [\"mnemonic\", \"seed\"]\n    },\n    seed: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Seed to use to generate a mnemonic.\",\n        // The order of the options matter here! `wallet.deterministic`\n        // needs to be prior to `wallet.seed` for `config.deterministic`\n        // below to be set correctly\n        default: config => config.deterministic === true\n            ? options_1.DeterministicSeedPhrase\n            : randomAlphaNumericString(10, unseededRng),\n        defaultDescription: \"Random value, unless wallet.deterministic is specified\",\n        legacyName: \"seed\",\n        cliAliases: [\"s\", \"seed\"],\n        cliType: \"string\",\n        conflicts: [\"mnemonic\", \"deterministic\"]\n    },\n    mnemonic: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Use a specific HD wallet mnemonic to generate initial addresses.\",\n        // The order of the options matter here! `wallet.seed`\n        // needs to be prior to `wallet.mnemonic` for `config.seed`\n        // below to be set correctly\n        default: config => (0, bip39_1.entropyToMnemonic)(notVeryRandomBytes(16, (0, seedrandom_1.default)(config.seed))),\n        defaultDescription: \"Generated from wallet.seed\",\n        legacyName: \"mnemonic\",\n        cliAliases: [\"m\", \"mnemonic\"],\n        cliType: \"string\",\n        conflicts: [\"seed\", \"deterministic\"]\n    },\n    unlockedAccounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Array of addresses or address indexes specifying which accounts should be unlocked.\",\n        legacyName: \"unlocked_accounts\",\n        cliAliases: [\"u\", \"unlock\"],\n        cliType: \"array:string\"\n    },\n    lock: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Lock available accounts by default (good for third party transaction signing).\",\n        default: () => false,\n        legacyName: \"secure\",\n        cliAliases: [\"n\", \"secure\", \"lock\"],\n        cliType: \"boolean\"\n    },\n    passphrase: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Passphrase to use when locking accounts.\",\n        default: () => \"\",\n        cliAliases: [\"passphrase\"],\n        cliType: \"string\"\n    },\n    accountKeysPath: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specifies a file to save accounts and private keys to, for testing.\",\n        legacyName: \"account_keys_path\",\n        cliAliases: [\"account_keys_path\", \"acctKeys\"],\n        cliType: \"string\"\n    },\n    defaultBalance: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The default account balance, specified in ether.\",\n        default: () => 1000,\n        legacyName: \"default_balance_ether\",\n        cliAliases: [\"e\", \"defaultBalanceEther\"],\n        cliType: \"number\"\n    },\n    hdPath: {\n        normalize: (path) => {\n            return path.split(\"/\");\n        },\n        cliDescription: \"The hierarchical deterministic path to use when generating accounts.\",\n        default: () => [\"m\", \"44'\", \"60'\", \"0'\", \"0\"],\n        legacyName: \"hd_path\",\n        cliType: \"string\"\n    }\n};\n//# sourceMappingURL=wallet-options.js.map","\"use strict\";\n/*!\n * @ganache/ethereum-transaction\n *\n * @author David Murdoch\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/eip2930-access-list-transaction\"), exports);\n__exportStar(require(\"./src/eip1559-fee-market-transaction\"), exports);\n__exportStar(require(\"./src/base-transaction\"), exports);\n__exportStar(require(\"./src/hardfork\"), exports);\n__exportStar(require(\"./src/legacy-transaction\"), exports);\n__exportStar(require(\"./src/params\"), exports);\n__exportStar(require(\"./src/raw\"), exports);\n__exportStar(require(\"./src/rpc-transaction\"), exports);\n__exportStar(require(\"./src/runtime-transaction\"), exports);\n__exportStar(require(\"./src/transaction-receipt\"), exports);\n__exportStar(require(\"./src/transaction-factory\"), exports);\n__exportStar(require(\"./src/transaction-types\"), exports);\n__exportStar(require(\"./src/vm-transaction\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessLists = exports.isAccessList = void 0;\nconst tx_1 = require(\"@ethereumjs/tx\");\nvar tx_2 = require(\"@ethereumjs/tx\");\nObject.defineProperty(exports, \"isAccessList\", { enumerable: true, get: function () { return tx_2.isAccessList; } });\nconst utils_1 = require(\"@ganache/utils\");\nconst params_1 = require(\"./params\");\nclass AccessLists {\n    static getAccessListData(accessList) {\n        let AccessListJSON;\n        let bufferAccessList;\n        let slots = 0;\n        const accessListStorageKeyCost = params_1.Params.ACCESS_LIST_STORAGE_KEY_GAS;\n        const accessListAddressCost = params_1.Params.ACCESS_LIST_ADDRESS_GAS;\n        if (accessList && (0, tx_1.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            const newAccessList = [];\n            for (let i = 0; i < accessList.length; i++) {\n                const item = accessList[i];\n                const addressBuffer = utils_1.Data.from(item.address, 32).toBuffer();\n                const storageItems = [];\n                const storageKeysLength = item.storageKeys.length;\n                slots += storageKeysLength;\n                for (let index = 0; index < storageKeysLength; index++) {\n                    storageItems.push(utils_1.Data.from(item.storageKeys[index]).toBuffer());\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList ? accessList : [];\n            // build the JSON\n            const json = [];\n            for (let i = 0; i < bufferAccessList.length; i++) {\n                const data = bufferAccessList[i];\n                const address = utils_1.Data.from(data[0], 32).toString();\n                const storageKeys = [];\n                const storageKeysLength = data[1].length;\n                slots += storageKeysLength;\n                for (let item = 0; item < storageKeysLength; item++) {\n                    storageKeys.push(utils_1.Data.from(data[1][item], 32).toString());\n                }\n                const jsonItem = {\n                    address,\n                    storageKeys\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        const dataFee = BigInt(bufferAccessList.length * accessListAddressCost +\n            slots * accessListStorageKeyCost);\n        return {\n            AccessListJSON,\n            accessList: bufferAccessList,\n            dataFeeEIP2930: dataFee\n        };\n    }\n}\nexports.AccessLists = AccessLists;\n//# sourceMappingURL=access-lists.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = exports.calculateIntrinsicGas = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst params_1 = require(\"./params\");\nconst MAX_UINT64 = 1n << (64n - 1n);\n/**\n * Compute the 'intrinsic gas' for a message with the given data.\n * @param data - The transaction's data\n * @param hasToAddress - boolean,\n * @param common - The Common use to determine gas costs\n * @returns The absolute minimum amount of gas this transaction will consume,\n * or `-1` if the data in invalid (gas consumption would exceed `MAX_UINT64`\n * (`(2n ** 64n) - 1n`).\n */\nconst calculateIntrinsicGas = (data, hasToAddress, common) => {\n    const hardfork = common.hardfork();\n    // Set the starting gas for the raw transaction\n    let gas = params_1.Params.TRANSACTION_GAS;\n    // if it doesn't have a \"to\" address this is a contract creation and it costs\n    // `TRANSACTION_CREATION` more gas.\n    if (!hasToAddress)\n        gas += params_1.Params.TRANSACTION_CREATION;\n    if (data) {\n        const input = data.toBuffer();\n        // Bump the required gas by the amount of transactional data\n        const dataLength = input.byteLength;\n        if (dataLength > 0) {\n            const TRANSACTION_DATA_NON_ZERO_GAS = params_1.Params.TRANSACTION_DATA_NON_ZERO_GAS.get(hardfork);\n            const TRANSACTION_DATA_ZERO_GAS = params_1.Params.TRANSACTION_DATA_ZERO_GAS;\n            // Zero and non-zero bytes are priced differently\n            let nonZeroBytes = 0n;\n            for (const b of input) {\n                if (b !== 0) {\n                    nonZeroBytes++;\n                }\n            }\n            // Make sure we don't exceed uint64 for all data combinations.\n            // TODO: make sure these upper-bound checks are safe to remove, then\n            // remove if so.\n            // NOTE: This is an upper-bounds limit ported from geth that doesn't\n            // make sense for Ethereum, as exceeding the upper bound would require\n            // something like 200+ Petabytes of data.\n            // https://github.com/ethereum/go-ethereum/blob/cf856ea1ad96ac39ea477087822479b63417036a/core/state_transition.go#L106-L141\n            //\n            // explanation:\n            // `(MAX_UINT64 - gas) / TRANSACTION_DATA_NON_ZERO_GAS` is the maximum\n            // number of \"non-zero bytes\" geth can handle.\n            if ((MAX_UINT64 - gas) / TRANSACTION_DATA_NON_ZERO_GAS < nonZeroBytes) {\n                return -1n;\n            }\n            gas += nonZeroBytes * TRANSACTION_DATA_NON_ZERO_GAS;\n            const zeroBytes = BigInt(dataLength) - nonZeroBytes;\n            // explanation:\n            // `(MAX_UINT64 - gas) / TRANSACTION_DATA_ZERO_GAS` is the maximum number\n            // of \"zero bytes\" geth can handle after subtracting out the cost of\n            // the \"non-zero bytes\"\n            if ((MAX_UINT64 - gas) / TRANSACTION_DATA_ZERO_GAS < zeroBytes) {\n                return -1n;\n            }\n            gas += zeroBytes * TRANSACTION_DATA_ZERO_GAS;\n        }\n    }\n    return gas;\n};\nexports.calculateIntrinsicGas = calculateIntrinsicGas;\nclass BaseTransaction {\n    constructor(common, extra) {\n        this.common = common;\n        if (extra) {\n            this.setExtra(extra);\n        }\n    }\n    setExtra(raw) {\n        const [from, hash, blockHash, blockNumber, index, effectiveGasPrice] = raw;\n        this.from = ethereum_address_1.Address.from(from);\n        this.hash = utils_1.Data.from(hash, 32);\n        this.blockHash = utils_1.Data.from(blockHash, 32);\n        this.blockNumber = utils_1.Quantity.from(blockNumber);\n        this.index = utils_1.Quantity.from(index);\n        this.effectiveGasPrice = utils_1.Quantity.from(effectiveGasPrice);\n    }\n    calculateIntrinsicGas() {\n        const hasToAddress = this.to != null && !this.to.toBuffer().equals(utils_1.BUFFER_EMPTY);\n        return (0, exports.calculateIntrinsicGas)(this.data, hasToAddress, this.common);\n    }\n}\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=base-transaction.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP1559FeeMarketTransaction = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst runtime_transaction_1 = require(\"./runtime-transaction\");\nconst access_lists_1 = require(\"./access-lists\");\nconst signing_1 = require(\"./signing\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nfunction ecsign(msgHash, privateKey) {\n    const object = { signature: new Uint8Array(64), recid: null };\n    const status = secp256k1_1.default.ecdsaSign(object, msgHash, privateKey);\n    if (status === 0) {\n        const buffer = object.signature.buffer;\n        const r = Buffer.from(buffer, 0, 32);\n        const s = Buffer.from(buffer, 32, 32);\n        return { r, s, v: object.recid };\n    }\n    else {\n        throw new Error(\"The nonce generation function failed, or the private key was invalid\");\n    }\n}\nconst CAPABILITIES = [2718, 2930, 1559];\nclass EIP1559FeeMarketTransaction extends runtime_transaction_1.RuntimeTransaction {\n    constructor(data, common, extra) {\n        super(data, common, extra);\n        this.type = utils_1.Quantity.from(\"0x2\");\n        if (Array.isArray(data)) {\n            this.chainId = utils_1.Quantity.from(data[0]);\n            this.nonce = utils_1.Quantity.from(data[1]);\n            this.maxPriorityFeePerGas = utils_1.Quantity.from(data[2]);\n            this.maxFeePerGas = utils_1.Quantity.from(data[3]);\n            this.gas = utils_1.Quantity.from(data[4]);\n            this.to = data[5].length == 0 ? utils_1.RPCQUANTITY_EMPTY : ethereum_address_1.Address.from(data[5]);\n            this.value = utils_1.Quantity.from(data[6]);\n            this.data = utils_1.Data.from(data[7]);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data[8]);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.v = utils_1.Quantity.from(data[9]);\n            this.r = utils_1.Quantity.from(data[10]);\n            this.s = utils_1.Quantity.from(data[11]);\n            this.raw = [this.type.toBuffer(), ...data];\n            if (!extra) {\n                // TODO(hack): we use the presence of `extra` to determine if this data\n                // come from the \"database\" or not. Transactions that come from the\n                // database must not be validated since they may come from a fork.\n                if (common.chainId() !== this.chainId.toNumber()) {\n                    throw new ethereum_utils_1.CodedError(`Invalid chain id (${this.chainId.toNumber()}) for chain with id ${common.chainId()}.`, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n                }\n                const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, this.raw);\n                this.from = from;\n                this.serialized = serialized;\n                this.hash = hash;\n                this.encodedData = encodedData;\n                this.encodedSignature = encodedSignature;\n            }\n        }\n        else {\n            if (data.chainId) {\n                this.chainId = utils_1.Quantity.from(data.chainId);\n            }\n            else {\n                this.chainId = utils_1.Quantity.from(common.chainIdBN().toArrayLike(Buffer));\n            }\n            this.maxPriorityFeePerGas = utils_1.Quantity.from(data.maxPriorityFeePerGas);\n            this.maxFeePerGas = utils_1.Quantity.from(data.maxFeePerGas);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data.accessList);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.validateAndSetSignature(data);\n        }\n    }\n    maxGasPrice() {\n        return this.maxFeePerGas;\n    }\n    toJSON(_common) {\n        return {\n            type: this.type,\n            hash: this.hash,\n            chainId: this.chainId,\n            nonce: this.nonce,\n            blockHash: this.blockHash ? this.blockHash : null,\n            blockNumber: this.blockNumber ? this.blockNumber : null,\n            transactionIndex: this.index ? this.index : null,\n            from: this.from,\n            to: this.to.isNull() ? null : this.to,\n            value: this.value,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasPrice: this.effectiveGasPrice,\n            gas: this.gas,\n            input: this.data,\n            accessList: this.accessListJSON,\n            v: this.v,\n            r: this.r,\n            s: this.s\n        };\n    }\n    static fromTxData(data, common, extra) {\n        return new EIP1559FeeMarketTransaction(data, common, extra);\n    }\n    toVmTransaction() {\n        const from = this.from;\n        const sender = from.toBuffer();\n        const to = this.to.toBuffer();\n        const data = this.data.toBuffer();\n        return {\n            hash: () => utils_1.BUFFER_32_ZERO,\n            nonce: new ethereumjs_util_1.BN(this.nonce.toBuffer()),\n            maxPriorityFeePerGas: new ethereumjs_util_1.BN(this.maxPriorityFeePerGas.toBuffer()),\n            maxFeePerGas: new ethereumjs_util_1.BN(this.maxFeePerGas.toBuffer()),\n            gasLimit: new ethereumjs_util_1.BN(this.gas.toBuffer()),\n            to: to.length === 0\n                ? null\n                : { buf: to, equals: (a) => to.equals(a.buf) },\n            value: new ethereumjs_util_1.BN(this.value.toBuffer()),\n            data,\n            AccessListJSON: this.accessListJSON,\n            getSenderAddress: () => ({\n                buf: sender,\n                equals: (a) => sender.equals(a.buf),\n                toString() {\n                    return from.toString();\n                }\n            }),\n            /**\n             * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n             */\n            getBaseFee: () => {\n                const fee = this.calculateIntrinsicGas();\n                return new ethereumjs_util_1.BN(utils_1.Quantity.from(fee).toBuffer());\n            },\n            getUpfrontCost: (baseFee = new ethereumjs_util_1.BN(0)) => {\n                const { gas, maxPriorityFeePerGas, maxFeePerGas, value } = this;\n                const maxPriorityFeePerGasBN = new ethereumjs_util_1.BN(maxPriorityFeePerGas.toBuffer());\n                const maxFeePerGasBN = new ethereumjs_util_1.BN(maxFeePerGas.toBuffer());\n                const gasLimitBN = new ethereumjs_util_1.BN(gas.toBuffer());\n                const valueBN = new ethereumjs_util_1.BN(value.toBuffer());\n                const inclusionFeePerGas = ethereumjs_util_1.BN.min(maxPriorityFeePerGasBN, maxFeePerGasBN.sub(baseFee));\n                const gasPrice = inclusionFeePerGas.add(baseFee);\n                return gasLimitBN.mul(gasPrice).add(valueBN);\n            },\n            supports: (capability) => {\n                return CAPABILITIES.includes(capability);\n            }\n        };\n    }\n    /**\n     * sign a transaction with a given private key, then compute and set the `hash`.\n     *\n     * @param privateKey - Must be 32 bytes in length\n     */\n    signAndHash(privateKey) {\n        if (this.v != null) {\n            throw new Error(\"Internal Error: RuntimeTransaction `sign` called but transaction has already been signed\");\n        }\n        const typeBuf = this.type.toBuffer();\n        const raw = this.toEthRawTransaction(utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO);\n        const data = (0, rlp_1.encodeRange)(raw, 1, 9);\n        const dataLength = data.length;\n        const msgHash = (0, utils_1.keccak)(Buffer.concat([typeBuf, (0, rlp_1.digest)([data.output], dataLength)]));\n        const sig = ecsign(msgHash, privateKey);\n        this.v = utils_1.Quantity.from(sig.v);\n        this.r = utils_1.Quantity.from(sig.r);\n        this.s = utils_1.Quantity.from(sig.s);\n        raw[10] = this.v.toBuffer();\n        raw[11] = this.r.toBuffer();\n        raw[12] = this.s.toBuffer();\n        this.raw = raw;\n        const encodedSignature = (0, rlp_1.encodeRange)(raw, 10, 3);\n        // raw data is type concatenated with the rest of the data rlp encoded\n        this.serialized = Buffer.concat([\n            typeBuf,\n            (0, rlp_1.digest)([data.output, encodedSignature.output], dataLength + encodedSignature.length)\n        ]);\n        this.hash = utils_1.Data.from((0, utils_1.keccak)(this.serialized));\n        this.encodedData = data;\n        this.encodedSignature = encodedSignature;\n    }\n    toEthRawTransaction(v, r, s) {\n        return [\n            this.type.toBuffer(),\n            this.chainId.toBuffer(),\n            this.nonce.toBuffer(),\n            this.maxPriorityFeePerGas.toBuffer(),\n            this.maxFeePerGas.toBuffer(),\n            this.gas.toBuffer(),\n            this.to.toBuffer(),\n            this.value.toBuffer(),\n            this.data.toBuffer(),\n            this.accessList,\n            v,\n            r,\n            s\n        ];\n    }\n    computeIntrinsics(v, raw) {\n        return (0, signing_1.computeIntrinsicsFeeMarketTx)(v, raw);\n    }\n    updateEffectiveGasPrice(baseFeePerGas) {\n        const baseFeePerGasBigInt = baseFeePerGas.toBigInt();\n        const maxFeePerGas = this.maxFeePerGas.toBigInt();\n        const maxPriorityFeePerGas = this.maxPriorityFeePerGas.toBigInt();\n        const a = maxFeePerGas - baseFeePerGasBigInt;\n        const tip = a < maxPriorityFeePerGas ? a : maxPriorityFeePerGas;\n        this.effectiveGasPrice = utils_1.Quantity.from(baseFeePerGasBigInt + tip);\n    }\n}\nexports.EIP1559FeeMarketTransaction = EIP1559FeeMarketTransaction;\n//# sourceMappingURL=eip1559-fee-market-transaction.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP2930AccessListTransaction = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst runtime_transaction_1 = require(\"./runtime-transaction\");\nconst access_lists_1 = require(\"./access-lists\");\nconst signing_1 = require(\"./signing\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nfunction ecsign(msgHash, privateKey) {\n    const object = { signature: new Uint8Array(64), recid: null };\n    const status = secp256k1_1.default.ecdsaSign(object, msgHash, privateKey);\n    if (status === 0) {\n        const buffer = object.signature.buffer;\n        const r = Buffer.from(buffer, 0, 32);\n        const s = Buffer.from(buffer, 32, 32);\n        return { r, s, v: object.recid };\n    }\n    else {\n        throw new Error(\"The nonce generation function failed, or the private key was invalid\");\n    }\n}\nconst CAPABILITIES = [2718, 2930];\nclass EIP2930AccessListTransaction extends runtime_transaction_1.RuntimeTransaction {\n    constructor(data, common, extra) {\n        super(data, common, extra);\n        this.type = utils_1.Quantity.from(\"0x1\");\n        if (Array.isArray(data)) {\n            this.chainId = utils_1.Quantity.from(data[0]);\n            this.nonce = utils_1.Quantity.from(data[1]);\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data[2]);\n            this.gas = utils_1.Quantity.from(data[3]);\n            this.to = data[4].length == 0 ? utils_1.RPCQUANTITY_EMPTY : ethereum_address_1.Address.from(data[4]);\n            this.value = utils_1.Quantity.from(data[5]);\n            this.data = utils_1.Data.from(data[6]);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data[7]);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.accessListDataFee = accessListData.dataFeeEIP2930;\n            this.v = utils_1.Quantity.from(data[8]);\n            this.r = utils_1.Quantity.from(data[9]);\n            this.s = utils_1.Quantity.from(data[10]);\n            this.raw = [this.type.toBuffer(), ...data];\n            if (!extra) {\n                // TODO(hack): we use the presence of `extra` to determine if this data\n                // come from the \"database\" or not. Transactions that come from the\n                // database must not be validated since they may come from a fork.\n                if (common.chainId() !== this.chainId.toNumber()) {\n                    throw new ethereum_utils_1.CodedError(`Invalid chain id (${this.chainId.toNumber()}) for chain with id ${common.chainId()}.`, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n                }\n                const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, this.raw);\n                this.from = from;\n                this.serialized = serialized;\n                this.hash = hash;\n                this.encodedData = encodedData;\n                this.encodedSignature = encodedSignature;\n            }\n        }\n        else {\n            if (data.chainId) {\n                this.chainId = utils_1.Quantity.from(data.chainId);\n                if (this.common.chainId() !== this.chainId.toNumber()) {\n                    throw new ethereum_utils_1.CodedError(`Invalid chain id (${this.chainId.toNumber()}) for chain with id ${common.chainId()}.`, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n                }\n            }\n            else {\n                this.chainId = utils_1.Quantity.from(common.chainIdBN().toArrayLike(Buffer));\n            }\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data.gasPrice);\n            const accessListData = access_lists_1.AccessLists.getAccessListData(data.accessList);\n            this.accessList = accessListData.accessList;\n            this.accessListJSON = accessListData.AccessListJSON;\n            this.accessListDataFee = accessListData.dataFeeEIP2930;\n            this.validateAndSetSignature(data);\n        }\n    }\n    maxGasPrice() {\n        return this.gasPrice;\n    }\n    toJSON(_common) {\n        return {\n            hash: this.hash,\n            type: this.type,\n            chainId: this.chainId,\n            nonce: this.nonce,\n            blockHash: this.blockHash ? this.blockHash : null,\n            blockNumber: this.blockNumber ? this.blockNumber : null,\n            transactionIndex: this.index ? this.index : null,\n            from: this.from,\n            to: this.to.isNull() ? null : this.to,\n            value: this.value,\n            gas: this.gas,\n            gasPrice: this.gasPrice,\n            input: this.data,\n            accessList: this.accessListJSON,\n            v: this.v,\n            r: this.r,\n            s: this.s\n        };\n    }\n    static fromTxData(data, common, extra) {\n        return new EIP2930AccessListTransaction(data, common, extra);\n    }\n    toVmTransaction() {\n        const from = this.from;\n        const sender = this.from.toBuffer();\n        const to = this.to.toBuffer();\n        const data = this.data.toBuffer();\n        return {\n            hash: () => utils_1.BUFFER_32_ZERO,\n            nonce: new ethereumjs_util_1.BN(this.nonce.toBuffer()),\n            gasPrice: new ethereumjs_util_1.BN(this.gasPrice.toBuffer()),\n            gasLimit: new ethereumjs_util_1.BN(this.gas.toBuffer()),\n            to: to.length === 0\n                ? null\n                : { buf: to, equals: (a) => to.equals(a.buf) },\n            value: new ethereumjs_util_1.BN(this.value.toBuffer()),\n            data,\n            AccessListJSON: this.accessListJSON,\n            getSenderAddress: () => ({\n                buf: sender,\n                equals: (a) => sender.equals(a.buf),\n                toString() {\n                    return from.toString();\n                }\n            }),\n            /**\n             * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n             */\n            getBaseFee: () => {\n                const fee = this.calculateIntrinsicGas();\n                return new ethereumjs_util_1.BN(utils_1.Quantity.from(fee + this.accessListDataFee).toBuffer());\n            },\n            getUpfrontCost: () => {\n                const { gas, gasPrice, value } = this;\n                const c = gas.toBigInt() * gasPrice.toBigInt() + value.toBigInt();\n                return new ethereumjs_util_1.BN(utils_1.Quantity.from(c).toBuffer());\n            },\n            supports: (capability) => {\n                return CAPABILITIES.includes(capability);\n            }\n        };\n    }\n    /**\n     * sign a transaction with a given private key, then compute and set the `hash`.\n     *\n     * @param privateKey - Must be 32 bytes in length\n     */\n    signAndHash(privateKey) {\n        if (this.v != null) {\n            throw new Error(\"Internal Error: RuntimeTransaction `sign` called but transaction has already been signed\");\n        }\n        const typeBuf = this.type.toBuffer();\n        const raw = this.toEthRawTransaction(utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO, utils_1.BUFFER_ZERO);\n        const data = (0, rlp_1.encodeRange)(raw, 1, 8);\n        const dataLength = data.length;\n        const msgHash = (0, utils_1.keccak)(Buffer.concat([typeBuf, (0, rlp_1.digest)([data.output], dataLength)]));\n        const sig = ecsign(msgHash, privateKey);\n        this.v = utils_1.Quantity.from(sig.v);\n        this.r = utils_1.Quantity.from(sig.r);\n        this.s = utils_1.Quantity.from(sig.s);\n        raw[9] = this.v.toBuffer();\n        raw[10] = this.r.toBuffer();\n        raw[11] = this.s.toBuffer();\n        this.raw = raw;\n        const encodedSignature = (0, rlp_1.encodeRange)(raw, 9, 3);\n        // raw data is type concatenated with the rest of the data rlp encoded\n        this.serialized = Buffer.concat([\n            typeBuf,\n            (0, rlp_1.digest)([data.output, encodedSignature.output], dataLength + encodedSignature.length)\n        ]);\n        this.hash = utils_1.Data.from((0, utils_1.keccak)(this.serialized));\n        this.encodedData = data;\n        this.encodedSignature = encodedSignature;\n    }\n    toEthRawTransaction(v, r, s) {\n        return [\n            this.type.toBuffer(),\n            this.chainId.toBuffer(),\n            this.nonce.toBuffer(),\n            this.gasPrice.toBuffer(),\n            this.gas.toBuffer(),\n            this.to.toBuffer(),\n            this.value.toBuffer(),\n            this.data.toBuffer(),\n            this.accessList,\n            v,\n            r,\n            s\n        ];\n    }\n    computeIntrinsics(v, raw) {\n        return (0, signing_1.computeIntrinsicsAccessListTx)(v, raw);\n    }\n    updateEffectiveGasPrice() { }\n}\nexports.EIP2930AccessListTransaction = EIP2930AccessListTransaction;\n//# sourceMappingURL=eip2930-access-list-transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=hardfork.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LegacyTransaction = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereumjs_util_2 = require(\"ethereumjs-util\");\nconst runtime_transaction_1 = require(\"./runtime-transaction\");\nconst signing_1 = require(\"./signing\");\nclass LegacyTransaction extends runtime_transaction_1.RuntimeTransaction {\n    constructor(data, common, extra) {\n        super(data, common, extra);\n        this.type = utils_1.Quantity.from(\"0x0\");\n        if (Array.isArray(data)) {\n            this.nonce = utils_1.Quantity.from(data[0]);\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data[1]);\n            this.gas = utils_1.Quantity.from(data[2]);\n            this.to = data[3].length == 0 ? utils_1.RPCQUANTITY_EMPTY : ethereum_address_1.Address.from(data[3]);\n            this.value = utils_1.Quantity.from(data[4]);\n            this.data = utils_1.Data.from(data[5]);\n            this.v = utils_1.Quantity.from(data[6]);\n            this.r = utils_1.Quantity.from(data[7]);\n            this.s = utils_1.Quantity.from(data[8]);\n            this.raw = data;\n            if (!extra) {\n                // TODO(hack): Transactions that come from the database must not be\n                // validated since they may come from a fork.\n                const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, this.raw, this.common.chainId());\n                this.from = from;\n                this.serialized = serialized;\n                this.hash = hash;\n                this.encodedData = encodedData;\n                this.encodedSignature = encodedSignature;\n            }\n        }\n        else {\n            this.gasPrice = this.effectiveGasPrice = utils_1.Quantity.from(data.gasPrice);\n            this.validateAndSetSignature(data);\n        }\n    }\n    maxGasPrice() {\n        return this.gasPrice;\n    }\n    toJSON(common) {\n        const json = {\n            hash: this.hash,\n            type: this.type,\n            nonce: this.nonce,\n            blockHash: this.blockHash ? this.blockHash : null,\n            blockNumber: this.blockNumber ? this.blockNumber : null,\n            transactionIndex: this.index ? this.index : null,\n            from: this.from,\n            to: this.to.isNull() ? null : this.to,\n            value: this.value,\n            gas: this.gas,\n            gasPrice: this.gasPrice,\n            input: this.data,\n            v: this.v,\n            r: this.r,\n            s: this.s\n        };\n        if ((this.common || common).isActivatedEIP(2718)) {\n            json.type = this.type;\n        }\n        return json;\n    }\n    static fromTxData(data, common, extra) {\n        return new LegacyTransaction(data, common, extra);\n    }\n    static fromEIP2930AccessListTransaction(data, common) {\n        if (Array.isArray(data)) {\n            // remove 1st item, chainId, and 7th item, accessList\n            return new LegacyTransaction(data.slice(1, 7).concat(data.slice(8)), common);\n        }\n        return new LegacyTransaction(data, common);\n    }\n    toVmTransaction() {\n        const from = this.from;\n        const sender = from.toBuffer();\n        const to = this.to.toBuffer();\n        const data = this.data.toBuffer();\n        return {\n            hash: () => utils_1.BUFFER_32_ZERO,\n            nonce: new ethereumjs_util_2.BN(this.nonce.toBuffer()),\n            gasPrice: new ethereumjs_util_2.BN(this.gasPrice.toBuffer()),\n            gasLimit: new ethereumjs_util_2.BN(this.gas.toBuffer()),\n            to: to.length === 0\n                ? null\n                : { buf: to, equals: (a) => to.equals(a.buf) },\n            value: new ethereumjs_util_2.BN(this.value.toBuffer()),\n            data,\n            getSenderAddress: () => ({\n                buf: sender,\n                equals: (a) => sender.equals(a.buf),\n                toString() {\n                    return from.toString();\n                }\n            }),\n            /**\n             * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n             */\n            getBaseFee: () => {\n                const fee = this.calculateIntrinsicGas();\n                return new ethereumjs_util_2.BN(utils_1.Quantity.from(fee).toBuffer());\n            },\n            getUpfrontCost: () => {\n                const { gas, gasPrice, value } = this;\n                const c = gas.toBigInt() * gasPrice.toBigInt() + value.toBigInt();\n                return new ethereumjs_util_2.BN(utils_1.Quantity.from(c).toBuffer());\n            },\n            supports: (capability) => {\n                return false;\n            }\n        };\n    }\n    /**\n     * sign a transaction with a given private key, then compute and set the `hash`.\n     *\n     * @param privateKey - Must be 32 bytes in length\n     */\n    signAndHash(privateKey) {\n        if (this.v != null) {\n            throw new Error(\"Internal Error: RuntimeTransaction `sign` called but transaction has already been signed\");\n        }\n        const chainId = this.common.chainId();\n        const raw = this.toEthRawTransaction(utils_1.Quantity.from(chainId).toBuffer(), utils_1.BUFFER_EMPTY, utils_1.BUFFER_EMPTY);\n        const data = (0, rlp_1.encodeRange)(raw, 0, 6);\n        const dataLength = data.length;\n        const ending = (0, rlp_1.encodeRange)(raw, 6, 3);\n        const msgHash = (0, utils_1.keccak)((0, rlp_1.digest)([data.output, ending.output], dataLength + ending.length));\n        const sig = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey, chainId);\n        this.v = utils_1.Quantity.from(sig.v);\n        this.r = utils_1.Quantity.from(sig.r);\n        this.s = utils_1.Quantity.from(sig.s);\n        raw[6] = this.v.toBuffer();\n        raw[7] = this.r.toBuffer();\n        raw[8] = this.s.toBuffer();\n        this.raw = raw;\n        const encodedSignature = (0, rlp_1.encodeRange)(raw, 6, 3);\n        this.serialized = (0, rlp_1.digest)([data.output, encodedSignature.output], dataLength + encodedSignature.length);\n        this.hash = utils_1.Data.from((0, utils_1.keccak)(this.serialized));\n        this.encodedData = data;\n        this.encodedSignature = encodedSignature;\n    }\n    toEthRawTransaction(v, r, s) {\n        return [\n            this.nonce.toBuffer(),\n            this.gasPrice.toBuffer(),\n            this.gas.toBuffer(),\n            this.to.toBuffer(),\n            this.value.toBuffer(),\n            this.data.toBuffer(),\n            v,\n            r,\n            s\n        ];\n    }\n    computeIntrinsics(v, raw, chainId) {\n        return (0, signing_1.computeIntrinsicsLegacyTx)(v, raw, chainId);\n    }\n    updateEffectiveGasPrice() { }\n}\nexports.LegacyTransaction = LegacyTransaction;\n//# sourceMappingURL=legacy-transaction.js.map","\"use strict\";\n// NOTE these params may need to be changed at each hardfork\n// they can be tracked here: https://github.com/ethereumjs/ethereumjs-vm/blob/master/packages/common/src/hardforks/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Params = void 0;\nexports.Params = {\n    /**\n     *  Per transaction not creating a contract. NOTE: Not payable on data of calls between transactions.\n     */\n    TRANSACTION_GAS: 21000n,\n    /**\n     * Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.\n     * Ganache supports eth_call and debuging old transactions that should be run\n     * in the context of their original hardfork, so hardforks we don't support\n     * are listed here.\n     */\n    TRANSACTION_DATA_NON_ZERO_GAS: new Map([\n        [\"chainstart\", 68n],\n        [\"homestead\", 68n],\n        [\"dao\", 68n],\n        [\"tangerineWhistle\", 68n],\n        [\"spuriousDragon\", 68n],\n        [\"byzantium\", 68n],\n        [\"constantinople\", 68n],\n        [\"petersburg\", 68n],\n        [\"istanbul\", 16n],\n        [\"muirGlacier\", 16n],\n        [\"berlin\", 16n],\n        [\"london\", 16n],\n        [\"arrowGlacier\", 16n]\n    ]),\n    /**\n     * Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.\n     */\n    TRANSACTION_DATA_ZERO_GAS: 4n,\n    /**\n     * Fee for creation a transaction\n     */\n    TRANSACTION_CREATION: 32000n,\n    /**\n     * Gas cost per address in an EIP-2930 Access List transaction\n     */\n    ACCESS_LIST_ADDRESS_GAS: 2400,\n    /**\n     * Gas cost per storage key in an EIP-2930 Access List transaction\n     */\n    ACCESS_LIST_STORAGE_KEY_GAS: 1900\n};\n//# sourceMappingURL=params.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=raw.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=rpc-transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuntimeTransaction = exports.hasPartialSignature = exports.toValidLengthAddress = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst base_transaction_1 = require(\"./base-transaction\");\nconst transaction_receipt_1 = require(\"./transaction-receipt\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst toValidLengthAddress = (address, fieldName) => {\n    const buffer = utils_1.Data.from(address).toBuffer();\n    if (buffer.byteLength !== ethereum_address_1.Address.ByteLength) {\n        throw new Error(`The field ${fieldName} must have byte length of ${ethereum_address_1.Address.ByteLength}`);\n    }\n    return ethereum_address_1.Address.from(buffer);\n};\nexports.toValidLengthAddress = toValidLengthAddress;\nconst hasPartialSignature = (data) => {\n    return data[\"v\"] != null || data[\"r\"] != null || data[\"s\"] != null;\n};\nexports.hasPartialSignature = hasPartialSignature;\nconst ONE_BUFFER = utils_1.RPCQUANTITY_ONE.toBuffer();\n/**\n * A RuntimeTransaction can be changed; its hash is not finalized and it is not\n * yet part of a block.\n */\nclass RuntimeTransaction extends base_transaction_1.BaseTransaction {\n    constructor(data, common, extra) {\n        super(common, extra);\n        /**\n         * used by the miner to mark if this transaction is eligible for reordering or\n         * removal\n         */\n        this.locked = false;\n        this.validateAndSetSignature = (data) => {\n            // If we have v, r, or s validate and use them\n            if ((0, exports.hasPartialSignature)(data)) {\n                if (data.v == null || data.r == null || data.s == null) {\n                    throw new Error(\"Transaction signature is incomplete; v, r, and s are required.\");\n                }\n                // if we have a signature the `nonce` field is required\n                if (data.nonce == null) {\n                    throw new Error(\"Signed transaction is incomplete; nonce is required.\");\n                }\n                this.v = utils_1.Quantity.from(data.v, true);\n                this.r = utils_1.Quantity.from(data.r, true);\n                this.s = utils_1.Quantity.from(data.s, true);\n                // compute the `hash` and the `from` address\n                const raw = this.toEthRawTransaction(this.v.toBuffer(), this.r.toBuffer(), this.s.toBuffer());\n                this.raw = raw;\n                if (!this.from) {\n                    const { from, serialized, hash, encodedData, encodedSignature } = this.computeIntrinsics(this.v, raw, this.common.chainId());\n                    // if the user specified a `from` address in addition to the  `v`, `r`,\n                    //  and `s` values, make sure the `from` address matches\n                    if (data.from !== null) {\n                        const userFrom = (0, exports.toValidLengthAddress)(data.from, \"from\");\n                        if (!from.toBuffer().equals(userFrom.toBuffer())) {\n                            throw new Error(\"Transaction is signed and contains a `from` field, but the signature doesn't match.\");\n                        }\n                    }\n                    this.from = from;\n                    this.serialized = serialized;\n                    this.hash = hash;\n                    this.encodedData = encodedData;\n                    this.encodedSignature = encodedSignature;\n                }\n            }\n            else if (data.from != null) {\n                // we don't have a signature yet, so we just need to record the `from`\n                // address for now. The TransactionPool will fill in the `hash` and\n                // `raw` fields during signing\n                this.from = (0, exports.toValidLengthAddress)(data.from, \"from\");\n            }\n        };\n        let finalizer;\n        this.finalized = new Promise(resolve => {\n            finalizer = (...args) => process.nextTick(resolve, ...args);\n        });\n        this.finalizer = finalizer;\n        if (!Array.isArray(data)) {\n            // handle JSON\n            this.nonce = utils_1.Quantity.from(data.nonce, true);\n            this.gas = utils_1.Quantity.from(data.gas == null ? data.gasLimit : data.gas);\n            this.to =\n                data.to == null\n                    ? utils_1.RPCQUANTITY_EMPTY\n                    : (0, exports.toValidLengthAddress)(data.to, \"to\");\n            this.value = utils_1.Quantity.from(data.value || 0);\n            const dataVal = data.data == null\n                ? data.input == null\n                    ? \"0x\"\n                    : data.input\n                : data.data;\n            this.data = utils_1.Data.from(dataVal);\n        }\n    }\n    serializeForDb(blockHash, blockNumber, transactionIndex) {\n        // todo(perf):make this work with encodeRange and digest\n        const txAndExtraData = [\n            this.raw,\n            [\n                this.from.toBuffer(),\n                this.hash.toBuffer(),\n                blockHash.toBuffer(),\n                blockNumber.toBuffer(),\n                transactionIndex.toBuffer(),\n                this.effectiveGasPrice.toBuffer()\n            ]\n        ];\n        return (0, rlp_1.encode)(txAndExtraData);\n    }\n    /**\n     * Initializes the receipt and logs\n     * @param result -\n     * @returns RLP encoded data for use in a transaction trie\n     */\n    fillFromResult(result, cumulativeGasUsed) {\n        const vmResult = result.execResult;\n        const execException = vmResult.exceptionError;\n        let status;\n        if (execException) {\n            status = utils_1.BUFFER_ZERO;\n            this.execException = new ethereum_utils_1.RuntimeError(this.hash, result, ethereum_utils_1.RETURN_TYPES.TRANSACTION_HASH);\n        }\n        else {\n            status = ONE_BUFFER;\n        }\n        const receipt = (this.receipt = transaction_receipt_1.TransactionReceipt.fromValues(status, utils_1.Quantity.from(cumulativeGasUsed).toBuffer(), result.bloom.bitvector, (this.logs = vmResult.logs || []), result.gasUsed.toArrayLike(Buffer), result.createdAddress ? result.createdAddress.buf : null, this.type));\n        return receipt.serialize(false);\n    }\n    getReceipt() {\n        return this.receipt;\n    }\n    getLogs() {\n        return this.logs;\n    }\n    /**\n     * Returns a Promise that is resolved with the confirmation status and, if\n     * appropriate, an error property.\n     *\n     * Note: it is possible to be confirmed AND have an error\n     *\n     * @param event - \"finalized\"\n     */\n    once(_event) {\n        return this.finalized;\n    }\n    /**\n     * Mark this transaction as finalized, notifying all past and future\n     * \"finalized\" event subscribers.\n     *\n     * Note:\n     *\n     * @param status -\n     * @param error -\n     */\n    finalize(status, error = null) {\n        // resolves the `#finalized` promise\n        this.finalizer({ status, error });\n    }\n}\nexports.RuntimeTransaction = RuntimeTransaction;\n//# sourceMappingURL=runtime-transaction.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeIntrinsicsFeeMarketTx = exports.computeIntrinsicsAccessListTx = exports.computeIntrinsicsLegacyTx = exports.computeFromAddress = exports.publicKeyConvert = exports.ecdsaRecover = exports.isValidSigRecovery = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst secp256k1_1 = __importDefault(require(\"@ganache/secp256k1\"));\nconst intToBuffer = (value) => value === 0 ? utils_1.BUFFER_EMPTY : (0, utils_1.uintToBuffer)(value);\n/**\n * Copies `length` bytes from `source` to the `target`, filling remaining\n * bytes beyond `length - source.length` with `0`. Fills to the left.\n *\n * ```typescript\n * const source = Buffer.from([1, 2, 3]);\n * const target = Buffer.from([9, 9, 9, 9, 9, 9]);\n * copyOrFill(source, target, 1, 4);\n * // target.equals(Buffer.from([9, 0, 1, 2, 3, 9]));\n * //                               ^  ^  ^  ^\n * ```\n *\n * @param source - A Buffer to copy from.\n * @param target - A Buffer to copy into.\n * @param targetStart - The offset within `target` at which to begin writing.\n * @param length - The amount of bytes to copy or fill into the `target`.\n */\nfunction copyOrFill(source, target, targetStart, length) {\n    if (source.byteLength > length)\n        throw new Error(\"Invalid signature\");\n    // first, copy zeroes\n    const numZeroes = length - source.byteLength;\n    const endZeroes = targetStart + numZeroes;\n    let i = targetStart;\n    for (; i < endZeroes; i++) {\n        target[i] = 0;\n    }\n    // then copy the source into the target:\n    let end = targetStart + length;\n    const sourceOffset = targetStart + numZeroes;\n    for (; i < end; i++) {\n        target[i] = source[i - sourceOffset];\n    }\n}\nconst isValidSigRecovery = (recovery) => {\n    return recovery === 1 || recovery === 0;\n};\nexports.isValidSigRecovery = isValidSigRecovery;\n/**\n *\n * @param sharedBuffer - A Buffer, where bytes 0 - 97 are to be used by this function\n * @param r -\n * @param s -\n * @param msgHash -\n * @param recovery -\n */\nconst ecdsaRecover = (partialRlp, sharedBuffer, v, chainId, rBuf, sBuf) => {\n    let data;\n    let recid;\n    const eip155V = chainId * 2 + 35;\n    const isEip155 = v === eip155V || v === eip155V + 1;\n    if (isEip155) {\n        const chainBuf = intToBuffer(chainId);\n        const extras = [chainBuf, utils_1.BUFFER_EMPTY, utils_1.BUFFER_EMPTY];\n        const epilogue = (0, rlp_1.encodeRange)(extras, 0, 3);\n        data = (0, rlp_1.digest)([partialRlp.output, epilogue.output], partialRlp.length + epilogue.length);\n        recid = v - eip155V;\n    }\n    else {\n        data = (0, rlp_1.digest)([partialRlp.output], partialRlp.length);\n        recid = v - 27;\n    }\n    return _ecdsaRecover(data, sharedBuffer, rBuf, sBuf, recid);\n};\nexports.ecdsaRecover = ecdsaRecover;\nfunction _ecdsaRecover(data, sharedBuffer, rBuf, sBuf, recid) {\n    if (!(0, exports.isValidSigRecovery)(recid)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const message = (0, utils_1.keccak)(data);\n    const signature = sharedBuffer.slice(0, 64);\n    copyOrFill(rBuf, signature, 0, 32);\n    copyOrFill(sBuf, signature, 32, 32);\n    const output = sharedBuffer.slice(0, 33);\n    const success = secp256k1_1.default.ecdsaRecover(output, signature, recid, message);\n    if (success !== 0) {\n        throw new Error(\"Invalid Signature\");\n    }\n    return output;\n}\n/**\n *\n * @param sharedBuffer - A Buffer, bytes 0 - 65 will be overwritten\n * @param senderPubKey -\n */\nconst publicKeyConvert = (sharedBuffer, senderPubKey) => {\n    const publicKey = sharedBuffer.slice(0, 65);\n    const result = secp256k1_1.default.publicKeyConvert(publicKey, senderPubKey);\n    if (result !== 0) {\n        throw new Error(\"Invalid Signature\");\n    }\n    return publicKey;\n};\nexports.publicKeyConvert = publicKeyConvert;\n/**\n * A Buffer that can be reused by `computeFromAddress`.\n */\nconst SHARED_BUFFER = Buffer.allocUnsafe(65);\nconst computeFromAddress = (partialRlp, v, rBuf, sBuf, chainId) => {\n    const senderPubKey = (0, exports.ecdsaRecover)(partialRlp, SHARED_BUFFER, v, chainId, rBuf, sBuf);\n    const publicKey = (0, exports.publicKeyConvert)(SHARED_BUFFER, senderPubKey);\n    return ethereum_address_1.Address.from((0, utils_1.keccak)(publicKey.slice(1)).slice(-20));\n};\nexports.computeFromAddress = computeFromAddress;\nconst computeIntrinsicsLegacyTx = (v, raw, chainId) => {\n    const encodedData = (0, rlp_1.encodeRange)(raw, 0, 6);\n    const encodedSignature = (0, rlp_1.encodeRange)(raw, 6, 3);\n    const serialized = (0, rlp_1.digest)([encodedData.output, encodedSignature.output], encodedData.length + encodedSignature.length);\n    return {\n        from: (0, exports.computeFromAddress)(encodedData, v.toNumber(), raw[7], raw[8], chainId),\n        hash: utils_1.Data.from((0, utils_1.keccak)(serialized), 32),\n        serialized,\n        encodedData,\n        encodedSignature\n    };\n};\nexports.computeIntrinsicsLegacyTx = computeIntrinsicsLegacyTx;\nconst computeIntrinsicsAccessListTx = (v, raw) => {\n    const typeBuf = raw[0];\n    const encodedData = (0, rlp_1.encodeRange)(raw, 1, 8);\n    const encodedSignature = (0, rlp_1.encodeRange)(raw, 9, 3);\n    const serialized = Buffer.concat([\n        typeBuf,\n        (0, rlp_1.digest)([encodedData.output, encodedSignature.output], encodedData.length + encodedSignature.length)\n    ]);\n    const data = Buffer.concat([\n        typeBuf,\n        (0, rlp_1.digest)([encodedData.output], encodedData.length)\n    ]);\n    const senderPubKey = _ecdsaRecover(data, SHARED_BUFFER, raw[10], raw[11], v.toNumber());\n    const publicKey = (0, exports.publicKeyConvert)(SHARED_BUFFER, senderPubKey);\n    const from = ethereum_address_1.Address.from((0, utils_1.keccak)(publicKey.slice(1)).slice(-20));\n    return {\n        from: from,\n        hash: utils_1.Data.from((0, utils_1.keccak)(serialized), 32),\n        serialized,\n        encodedData,\n        encodedSignature\n    };\n};\nexports.computeIntrinsicsAccessListTx = computeIntrinsicsAccessListTx;\nconst computeIntrinsicsFeeMarketTx = (v, raw) => {\n    const typeBuf = raw[0];\n    const encodedData = (0, rlp_1.encodeRange)(raw, 1, 9);\n    const encodedSignature = (0, rlp_1.encodeRange)(raw, 10, 3);\n    const serialized = Buffer.concat([\n        typeBuf,\n        (0, rlp_1.digest)([encodedData.output, encodedSignature.output], encodedData.length + encodedSignature.length)\n    ]);\n    const data = Buffer.concat([\n        typeBuf,\n        (0, rlp_1.digest)([encodedData.output], encodedData.length)\n    ]);\n    const senderPubKey = _ecdsaRecover(data, SHARED_BUFFER, raw[11], raw[12], v.toNumber());\n    const publicKey = (0, exports.publicKeyConvert)(SHARED_BUFFER, senderPubKey);\n    const from = ethereum_address_1.Address.from((0, utils_1.keccak)(publicKey.slice(1)).slice(-20));\n    return {\n        from: from,\n        hash: utils_1.Data.from((0, utils_1.keccak)(serialized), 32),\n        serialized,\n        encodedData,\n        encodedSignature\n    };\n};\nexports.computeIntrinsicsFeeMarketTx = computeIntrinsicsFeeMarketTx;\n//# sourceMappingURL=signing.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = exports.TransactionType = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst legacy_transaction_1 = require(\"./legacy-transaction\");\nconst eip2930_access_list_transaction_1 = require(\"./eip2930-access-list-transaction\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst eip1559_fee_market_transaction_1 = require(\"./eip1559-fee-market-transaction\");\nconst UNTYPED_TX_START_BYTE = 0xc0; // all txs with first byte >= 0xc0 are untyped\nvar TransactionType;\n(function (TransactionType) {\n    TransactionType[TransactionType[\"Legacy\"] = 0] = \"Legacy\";\n    TransactionType[TransactionType[\"EIP2930AccessList\"] = 1] = \"EIP2930AccessList\";\n    TransactionType[TransactionType[\"EIP1559AccessList\"] = 2] = \"EIP1559AccessList\";\n})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));\nclass TransactionFactory {\n    constructor(raw, common) {\n        const [txData, extra] = (0, rlp_1.decode)(raw);\n        this.tx = TransactionFactory.fromDatabaseTx(txData, common, extra);\n    }\n    static _fromData(txData, txType, common, extra) {\n        // if tx type envelope isn't available yet on this HF,\n        // return legacy txs as is and convert typed txs to legacy\n        if (!common.isActivatedEIP(2718)) {\n            return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n        }\n        else if (!common.isActivatedEIP(1559)) {\n            if (txType === TransactionType.Legacy) {\n                return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n            }\n            else if (txType === TransactionType.EIP2930AccessList) {\n                if (common.isActivatedEIP(2930)) {\n                    return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData, common, extra);\n                }\n                else {\n                    // TODO: I believe this is unreachable with current architecture.\n                    // If 2718 is supported, so is 2930.\n                    throw new ethereum_utils_1.CodedError(`EIP 2930 is not activated.`, utils_1.JsonRpcErrorCode.INVALID_PARAMS);\n                }\n            }\n            else if (txType === TransactionType.EIP1559AccessList) {\n                throw new ethereum_utils_1.CodedError(`EIP 1559 is not activated.`, utils_1.JsonRpcErrorCode.INVALID_PARAMS);\n            }\n        }\n        // eip 1559, 2930, and 2718 are activated\n        else {\n            // we can assume that all database transactions came from us, so\n            // the type doesn't need to be normalized.\n            if (Array.isArray(txData)) {\n                if (txType === TransactionType.Legacy) {\n                    return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n                }\n                else if (txType === TransactionType.EIP2930AccessList) {\n                    return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData, common, extra);\n                }\n                else if (txType === TransactionType.EIP1559AccessList) {\n                    return eip1559_fee_market_transaction_1.EIP1559FeeMarketTransaction.fromTxData(txData, common, extra);\n                }\n            }\n            else {\n                const toEIP1559 = (txType === TransactionType.Legacy ||\n                    txType === TransactionType.EIP2930AccessList) &&\n                    txData.gasPrice === undefined;\n                if (txType === TransactionType.EIP1559AccessList || toEIP1559) {\n                    const tx = eip1559_fee_market_transaction_1.EIP1559FeeMarketTransaction.fromTxData(txData, common, extra);\n                    if (toEIP1559) {\n                        // they didn't specify the type as eip-1559 (type 2), so we are\n                        // upgrading it. BUT, there's still a chance they sent us this data,\n                        // so we don't want to overwrite it.\n                        if (!txData.maxFeePerGas) {\n                            tx.maxFeePerGas = utils_1.Quantity.from(null);\n                        }\n                        if (!txData.maxPriorityFeePerGas) {\n                            tx.maxPriorityFeePerGas = utils_1.RPCQUANTITY_GWEI;\n                        }\n                    }\n                    return tx;\n                }\n                else if (txType === TransactionType.Legacy) {\n                    return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n                }\n                else if (txType === TransactionType.EIP2930AccessList) {\n                    // if no access list is provided, we convert to legacy\n                    if (txData.accessList === undefined) {\n                        return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n                    }\n                    else {\n                        return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData, common, extra);\n                    }\n                }\n            }\n        }\n        throw new ethereum_utils_1.CodedError(`Tx instantiation with supplied type not supported`, utils_1.JsonRpcErrorCode.METHOD_NOT_FOUND);\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The rpc transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param common - Options to pass on to the constructor of the transaction\n     */\n    static fromRpc(txData, common, extra) {\n        const txType = this.typeOfRPC(txData);\n        return this._fromData(txData, txType, common, extra);\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The raw transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param common - Options to pass on to the constructor of the transaction\n     */\n    static fromDatabaseTx(txData, common, extra) {\n        const txType = this.typeOfRaw(txData);\n        switch (txType) {\n            case TransactionType.EIP1559AccessList:\n                return eip1559_fee_market_transaction_1.EIP1559FeeMarketTransaction.fromTxData(txData.slice(1), common, extra);\n            case TransactionType.Legacy:\n                return legacy_transaction_1.LegacyTransaction.fromTxData(txData, common, extra);\n            case TransactionType.EIP2930AccessList:\n                return eip2930_access_list_transaction_1.EIP2930AccessListTransaction.fromTxData(txData.slice(1), common, extra);\n            default:\n                throw new ethereum_utils_1.CodedError(`Transactions with supplied type ${txType} not supported`, utils_1.JsonRpcErrorCode.METHOD_NOT_FOUND);\n        }\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * When transaction types are activated (EIP 2718) the txData will be checked\n     * for a transaction envelope (first byte < 192) before determining the\n     * decoding strategy, otherwise it will be decoded as a Legacy Transaction. If\n     * the transaction contains a transaction envelop, but EIP 2718 is not active\n     * decoding will fail and an exception will be thrown.\n     *\n     * @param txData - The raw hex string transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param common - Options to pass on to the constructor of the transaction\n     */\n    static fromString(txData, common) {\n        let data = utils_1.Data.from(txData).toBuffer();\n        const type = data[0];\n        const txType = this.typeOf(type);\n        if (common.isActivatedEIP(2718)) {\n            let raw;\n            try {\n                raw = (0, rlp_1.decode)(txType === TransactionType.Legacy ? data : data.slice(1));\n            }\n            catch (e) {\n                throw new Error(\"Could not decode transaction: \" + e.message);\n            }\n            return this._fromData(raw, txType, common);\n        }\n        else {\n            let raw;\n            try {\n                raw = (0, rlp_1.decode)(data);\n            }\n            catch (e) {\n                throw new Error(\"Could not decode transaction: \" + e.message);\n            }\n            return this._fromData(raw, TransactionType.Legacy, common);\n        }\n    }\n    static typeOf(type) {\n        if (type === TransactionType.EIP1559AccessList ||\n            type === TransactionType.EIP2930AccessList) {\n            return type;\n        }\n        else if (type >= UNTYPED_TX_START_BYTE ||\n            type === TransactionType.Legacy ||\n            type === undefined) {\n            return TransactionType.Legacy;\n        }\n        else {\n            throw new Error(`Invalid transaction type: ${type}`);\n        }\n    }\n    static typeOfRaw(raw) {\n        // LegacyTransactions won't have the type up front to parse\n        if (raw.length === 9) {\n            return TransactionType.Legacy;\n        }\n        const type = raw[0][0];\n        return this.typeOf(type);\n    }\n    static typeOfRPC(rpc) {\n        if (!(\"type\" in rpc) || rpc.type === undefined) {\n            return TransactionType.Legacy;\n        }\n        else {\n            // The type must be a hex value\n            const txType = parseInt(rpc.type, 16);\n            return this.typeOf(txType);\n        }\n    }\n}\nexports.TransactionFactory = TransactionFactory;\n//# sourceMappingURL=transaction-factory.js.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _TransactionReceipt_gasUsed, _TransactionReceipt_init;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionReceipt = void 0;\nconst ethereum_utils_1 = require(\"@ganache/ethereum-utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst utils_1 = require(\"@ganache/utils\");\nconst utils_2 = require(\"@ganache/utils\");\nconst STATUSES = [utils_2.RPCQUANTITY_ZERO, utils_2.RPCQUANTITY_ONE];\nclass TransactionReceipt {\n    constructor(data) {\n        _TransactionReceipt_gasUsed.set(this, void 0);\n        _TransactionReceipt_init.set(this, (status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress = null, type = null) => {\n            this.raw = [status, cumulativeGasUsed, logsBloom, logs];\n            this.contractAddress = contractAddress;\n            __classPrivateFieldSet(this, _TransactionReceipt_gasUsed, gasUsed, \"f\");\n            this.txType = type;\n        });\n        if (data) {\n            const decoded = (0, rlp_1.decode)(data);\n            __classPrivateFieldGet(this, _TransactionReceipt_init, \"f\").call(this, decoded[0], decoded[1], decoded[2], decoded[3], decoded[4], decoded[5]);\n        }\n    }\n    static fromValues(status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress, type = null) {\n        const receipt = new TransactionReceipt();\n        __classPrivateFieldGet(receipt, _TransactionReceipt_init, \"f\").call(receipt, status, cumulativeGasUsed, logsBloom, logs, gasUsed, contractAddress, type);\n        return receipt;\n    }\n    serialize(all) {\n        if (this.encoded == null) {\n            this.encoded = (0, rlp_1.encodeRange)(this.raw, 0, 4);\n        }\n        if (all) {\n            // the database format includes gasUsed and the contractAddress:\n            const extras = [\n                __classPrivateFieldGet(this, _TransactionReceipt_gasUsed, \"f\"),\n                this.contractAddress\n            ];\n            const epilogue = (0, rlp_1.encodeRange)(extras, 0, 2);\n            return (0, rlp_1.digest)([this.encoded.output, epilogue.output], this.encoded.length + epilogue.length);\n        }\n        else {\n            // receipt trie format:\n            const serialized = (0, rlp_1.digest)([this.encoded.output], this.encoded.length);\n            return this.txType\n                ? Buffer.concat([this.txType.toBuffer(), serialized])\n                : serialized;\n        }\n    }\n    toJSON(block, transaction, common) {\n        const raw = this.raw;\n        const contractAddress = this.contractAddress.length === 0\n            ? null\n            : utils_1.Data.from(this.contractAddress);\n        const blockHash = block.hash();\n        const blockNumber = block.header.number;\n        const blockLog = ethereum_utils_1.BlockLogs.create(blockHash);\n        const transactionHash = transaction.hash;\n        const transactionIndex = transaction.index;\n        blockLog.blockNumber = blockNumber;\n        raw[3].forEach(l => blockLog.append(transactionIndex, transactionHash, l));\n        const logs = [...blockLog.toJSON()];\n        if (block.header.baseFeePerGas) {\n            transaction.updateEffectiveGasPrice(block.header.baseFeePerGas);\n        }\n        const json = {\n            transactionHash,\n            transactionIndex,\n            blockNumber,\n            blockHash,\n            from: transaction.from,\n            to: contractAddress ? null : transaction.to,\n            cumulativeGasUsed: utils_1.Quantity.from(raw[1]),\n            gasUsed: utils_1.Quantity.from(__classPrivateFieldGet(this, _TransactionReceipt_gasUsed, \"f\")),\n            contractAddress,\n            logs,\n            logsBloom: utils_1.Data.from(raw[2], 256),\n            status: STATUSES[raw[0][0]],\n            effectiveGasPrice: transaction.effectiveGasPrice\n        };\n        if (transaction.type && common.isActivatedEIP(2718)) {\n            json.type = transaction.type;\n        }\n        return json;\n    }\n}\nexports.TransactionReceipt = TransactionReceipt;\n_TransactionReceipt_gasUsed = new WeakMap(), _TransactionReceipt_init = new WeakMap();\n//# sourceMappingURL=transaction-receipt.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=vm-transaction.js.map","\"use strict\";\n/*!\n * @ganache/ethereum-utils\n *\n * @author David Murdoch <david@trufflesuite.com> (https://davidmurdoch.com)\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbortError = void 0;\nclass AbortError extends Error {\n    constructor() {\n        super(\"The user aborted a request.\");\n    }\n}\nexports.AbortError = AbortError;\n//# sourceMappingURL=abort-error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallError = void 0;\nconst errors_1 = require(\"./errors\");\nconst coded_error_1 = require(\"./coded-error\");\nconst utils_1 = require(\"@ganache/utils\");\nconst utils_2 = require(\"@ganache/utils\");\nclass CallError extends coded_error_1.CodedError {\n    constructor(result) {\n        const execResult = result.execResult;\n        const error = execResult.exceptionError.error;\n        let message = errors_1.VM_EXCEPTION + error;\n        super(message, utils_1.JsonRpcErrorCode.INVALID_INPUT);\n        coded_error_1.CodedError.captureStackTraceExtended.bind(this, message);\n        this.name = this.constructor.name;\n        const { returnValue } = execResult;\n        const reason = coded_error_1.CodedError.createRevertReason(returnValue);\n        this.message = reason ? message + \" \" + reason : message;\n        this.data = utils_2.Data.from(returnValue).toString();\n    }\n}\nexports.CallError = CallError;\n//# sourceMappingURL=call-error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodedError = void 0;\nconst ethereumjs_abi_1 = require(\"ethereumjs-abi\");\nconst REVERT_REASON = Buffer.from(\"08c379a0\", \"hex\"); // keccak(\"Error(string)\").slice(0, 4)\nclass CodedError extends Error {\n    constructor(message, code) {\n        super(message);\n        CodedError.captureStackTraceExtended.bind(this, message);\n        this.code = code;\n    }\n    static from(error, code) {\n        const codedError = new CodedError(error.message, code);\n        codedError.stack = error.stack;\n        return codedError;\n    }\n    static nonEnumerableProperty(value) {\n        // The field `enumerable` is `false` by default.\n        return {\n            value: value,\n            writable: true,\n            configurable: true\n        };\n    }\n    static captureStackTraceExtended(message) {\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        else {\n            // Generic way to set the error stack trace.\n            Object.defineProperty(this, \"stack\", CodedError.nonEnumerableProperty(Error(message).stack));\n            // Use the `+` operator with an empty string to implicitly type cast the\n            // `message` argument into a string.\n            Object.defineProperty(this, \"message\", CodedError.nonEnumerableProperty(message !== void 0 ? \"\" + message : \"\"));\n        }\n    }\n    static createRevertReason(returnValue) {\n        let reason;\n        if (returnValue.length > 4 &&\n            REVERT_REASON.compare(returnValue, 0, 4) === 0) {\n            try {\n                // it is possible for the `returnValue` to be gibberish that can't be\n                // decoded. See: https://github.com/trufflesuite/ganache/pull/452\n                reason = (0, ethereumjs_abi_1.rawDecode)([\"bytes\"], returnValue.slice(4))[0].toString();\n            }\n            catch {\n                // ignore error since reason string recover is impossible\n                reason = null;\n            }\n        }\n        else {\n            reason = null;\n        }\n        return reason;\n    }\n}\nexports.CodedError = CodedError;\n//# sourceMappingURL=coded-error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.INSUFFICIENT_FUNDS = exports.TRANSACTION_LOCKED = exports.VM_EXCEPTIONS = exports.VM_EXCEPTION = exports.GAS_LIMIT = exports.INTRINSIC_GAS_TOO_LOW = exports.REPLACED = exports.UNDERPRICED = exports.NONCE_TOO_LOW = exports.INVALID_SENDER = void 0;\n/**\n * Returned if the transaction contains an invalid signature.\n */\nexports.INVALID_SENDER = \"invalid sender\";\n/**\n * Returned if the nonce of a transaction is lower than the one present in the local chain.\n */\nexports.NONCE_TOO_LOW = \"nonce too low\";\n/**\n * Returned if a transaction's gas price is below the minimum configured for the transaction pool.\n */\nexports.UNDERPRICED = \"transaction underpriced\";\n/**\n * Returned if a transaction's gas price is below the minimum configured for the transaction pool.\n */\nexports.REPLACED = \"transaction replaced by better transaction\";\n/**\n * Returned if the transaction is specified to use less gas than required to start the invocation.\n */\nexports.INTRINSIC_GAS_TOO_LOW = \"intrinsic gas too low\";\n/**\n * Returned if a transaction's requested gas limit exceeds the maximum allowance of the current block.\n */\nexports.GAS_LIMIT = \"exceeds block gas limit\";\n/**\n * Prefix for a single VM Exception occuring when running a transaction or block\n */\nexports.VM_EXCEPTION = \"VM Exception while processing transaction: \";\n/**\n * Prefix for multiple VM Exceptions occuring when running transactions or a block\n */\nexports.VM_EXCEPTIONS = \"Multiple VM Exceptions while processing transactions: : \\n\\n\";\n/**\n * Returned if a replacement transaction is sent while the potentially replaced transaction is being mined.\n */\nexports.TRANSACTION_LOCKED = \"transaction can't be replaced, mining has already started. (please open an issue with reproduction steps: https://github.com/trufflesuite/ganache/issues/new)\";\n/**\n * Returned if a transaction may require more funds than than account currently has available.\n */\nexports.INSUFFICIENT_FUNDS = \"insufficient funds for gas * price + value\";\n//# sourceMappingURL=errors.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RuntimeError = exports.RETURN_TYPES = void 0;\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"@ganache/utils\");\nconst coded_error_1 = require(\"./coded-error\");\nconst utils_2 = require(\"@ganache/utils\");\nvar RETURN_TYPES;\n(function (RETURN_TYPES) {\n    RETURN_TYPES[RETURN_TYPES[\"TRANSACTION_HASH\"] = 0] = \"TRANSACTION_HASH\";\n    RETURN_TYPES[RETURN_TYPES[\"RETURN_VALUE\"] = 1] = \"RETURN_VALUE\";\n})(RETURN_TYPES = exports.RETURN_TYPES || (exports.RETURN_TYPES = {}));\nclass RuntimeError extends coded_error_1.CodedError {\n    constructor(transactionHash, result, returnType) {\n        const execResult = result.execResult;\n        const error = execResult.exceptionError.error;\n        let message = errors_1.VM_EXCEPTION + error;\n        super(message, utils_2.JsonRpcErrorCode.INVALID_INPUT);\n        coded_error_1.CodedError.captureStackTraceExtended.bind(this, message);\n        this.name = this.constructor.name;\n        const hash = transactionHash.toString();\n        const { returnValue } = execResult;\n        const reason = coded_error_1.CodedError.createRevertReason(returnValue);\n        this.message = reason ? message + \" \" + reason : message;\n        this.data = {\n            hash: hash,\n            programCounter: execResult.runState.programCounter,\n            result: returnType === RETURN_TYPES.TRANSACTION_HASH\n                ? hash\n                : utils_1.Data.from(returnValue || \"0x\").toString(),\n            reason: reason,\n            message: error\n        };\n    }\n}\nexports.RuntimeError = RuntimeError;\n//# sourceMappingURL=runtime-error.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./errors/coded-error\"), exports);\n__exportStar(require(\"./errors/errors\"), exports);\n__exportStar(require(\"./errors/runtime-error\"), exports);\n__exportStar(require(\"./errors/call-error\"), exports);\n__exportStar(require(\"./errors/abort-error\"), exports);\n__exportStar(require(\"./things/account\"), exports);\n__exportStar(require(\"./things/blocklogs\"), exports);\n__exportStar(require(\"./things/tags\"), exports);\n__exportStar(require(\"./things/trace-data\"), exports);\n__exportStar(require(\"./things/trace-storage-map\"), exports);\n__exportStar(require(\"./types/debug-storage\"), exports);\n__exportStar(require(\"./types/extract-values-from-types\"), exports);\n__exportStar(require(\"./types/filters\"), exports);\n__exportStar(require(\"./types/hex-datatypes\"), exports);\n__exportStar(require(\"./types/shh\"), exports);\n__exportStar(require(\"./types/subscriptions\"), exports);\n__exportStar(require(\"./types/trace-transaction\"), exports);\n__exportStar(require(\"./types/tuple-from-union\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst utils_2 = require(\"@ganache/utils\");\nclass Account {\n    constructor(address) {\n        this.stateRoot = ethereumjs_util_1.KECCAK256_RLP;\n        this.codeHash = ethereumjs_util_1.KECCAK256_NULL;\n        this.address = address;\n        this.balance = utils_2.RPCQUANTITY_EMPTY;\n        this.nonce = utils_2.RPCQUANTITY_EMPTY;\n    }\n    static fromBuffer(buffer) {\n        const account = Object.create(Account.prototype);\n        const raw = (0, rlp_1.decode)(buffer);\n        account.nonce = utils_1.Quantity.from(raw[0]);\n        account.balance = utils_1.Quantity.from(raw[1]);\n        account.stateRoot = raw[2];\n        account.codeHash = raw[3];\n        return account;\n    }\n    serialize() {\n        return (0, rlp_1.encode)([\n            this.nonce.toBuffer(),\n            this.balance.toBuffer(),\n            this.stateRoot,\n            this.codeHash\n        ]);\n    }\n}\nexports.Account = Account;\n//# sourceMappingURL=account.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockLogs = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst utils_2 = require(\"@ganache/utils\");\nconst rlp_1 = require(\"@ganache/rlp\");\nconst ethereum_address_1 = require(\"@ganache/ethereum-address\");\nconst _raw = Symbol(\"raw\");\nconst _logs = Symbol(\"logs\");\nconst filterByTopic = (expectedTopics, logTopics) => {\n    // Exclude log if its number of topics is less than the number expected\n    if (expectedTopics.length > logTopics.length)\n        return false;\n    // for every expectedTopic, we must much the log topic in the same position\n    return expectedTopics.every((expectedTopic, logPosition) => {\n        // a `null` topic means \"anything\"\n        if (expectedTopic === null)\n            return true;\n        let expectedTopicSet;\n        if (!Array.isArray(expectedTopic)) {\n            return logTopics[logPosition].equals(utils_1.Data.from(expectedTopic).toBuffer());\n        }\n        // an empty rule set means \"anything\"\n        if (expectedTopic.length === 0)\n            return true;\n        expectedTopicSet = expectedTopic;\n        const logTopic = logTopics[logPosition];\n        // \"OR\" logic, e.g., [[A, B]] means log topic in the first position matching either \"A\" OR \"B\":\n        return expectedTopicSet.some(expectedTopic => logTopic.equals(utils_1.Data.from(expectedTopic).toBuffer()));\n    });\n};\nclass BlockLogs {\n    constructor(data) {\n        if (data) {\n            const decoded = (0, rlp_1.decode)(data);\n            this[_raw] = decoded;\n        }\n    }\n    /**\n     *\n     * @param blockHash - Creates an BlogLogs entity with an empty internal logs\n     * array.\n     */\n    static create(blockHash) {\n        const blockLog = Object.create(BlockLogs.prototype);\n        blockLog[_raw] = [blockHash.toBuffer(), []];\n        return blockLog;\n    }\n    /**\n     * rlpEncode's the blockHash and logs array for db storage\n     */\n    serialize() {\n        return (0, rlp_1.encode)(this[_raw]);\n    }\n    /**\n     * Appends the data to the internal logs array\n     * @param transactionIndex -\n     * @param transactionHash -\n     * @param log -\n     */\n    append(\n    /*removed: boolean, */ transactionIndex, transactionHash, log) {\n        this[_raw][1].push([\n            utils_2.BUFFER_ZERO,\n            transactionIndex.toBuffer(),\n            transactionHash.toBuffer(),\n            log[0],\n            log[1],\n            log[2] // `data`\n        ]);\n    }\n    /**\n     * Returns the number of logs in the internal logs array.\n     */\n    get length() {\n        return this[_raw][1].length;\n    }\n    static fromJSON(json) {\n        if (!json || json.length === 0) {\n            return null;\n        }\n        const blockHash = json[0].blockHash;\n        const blockNumber = json[0].blockNumber;\n        const blockLogs = BlockLogs.create(utils_1.Data.from(blockHash, 32));\n        blockLogs.blockNumber = utils_1.Quantity.from(blockNumber);\n        json.forEach(log => {\n            const address = ethereum_address_1.Address.from(log.address);\n            const blockNumber = log.blockNumber;\n            const data = Array.isArray(log.data)\n                ? log.data.map(d => utils_1.Data.from(d).toBuffer())\n                : utils_1.Data.from(log.data).toBuffer();\n            const logIndex = log.logIndex;\n            const removed = log.removed === false ? utils_2.BUFFER_ZERO : utils_2.RPCQUANTITY_ONE.toBuffer();\n            const topics = Array.isArray(log.topics)\n                ? log.topics.map(t => utils_1.Data.from(t, 32).toBuffer())\n                : utils_1.Data.from(log.topics, 32).toBuffer();\n            const transactionHash = utils_1.Data.from(log.transactionHash, 32);\n            const transactionIndex = utils_1.Quantity.from(log.transactionIndex);\n            blockLogs.append(transactionIndex, transactionHash, [\n                address.toBuffer(),\n                topics,\n                data\n            ]);\n        });\n        return blockLogs;\n    }\n    toJSON() {\n        return this[_logs]().toJSON();\n    }\n    [_logs]() {\n        const blockNumber = this.blockNumber;\n        const raw = this[_raw];\n        const logs = raw[1];\n        const l = this.length;\n        const blockHash = utils_1.Data.from(raw[0]);\n        return {\n            toJSON() {\n                return {\n                    *[Symbol.iterator]() {\n                        for (let i = 0; i < l; i++) {\n                            yield BlockLogs.logToJSON(logs[i], utils_1.Quantity.from(i), blockHash, blockNumber);\n                        }\n                    }\n                };\n            },\n            *[Symbol.iterator]() {\n                for (let i = 0; i < l; i++) {\n                    const log = logs[i];\n                    const address = log[3];\n                    const topics = log[4];\n                    yield {\n                        address,\n                        topics,\n                        toJSON: () => BlockLogs.logToJSON(log, utils_1.Quantity.from(i), blockHash, blockNumber)\n                    };\n                }\n            }\n        };\n    }\n    /**\n     *\n     * @param log -\n     * @param logIndex - The index this log appears in the block\n     * @param blockHash - The hash of the block\n     * @param blockNumber - The block number\n     */\n    static logToJSON(log, logIndex, blockHash, blockNumber) {\n        const topics = log[4];\n        const data = log[5];\n        return {\n            address: ethereum_address_1.Address.from(log[3]),\n            blockHash,\n            blockNumber,\n            data: Array.isArray(data)\n                ? data.map(d => utils_1.Data.from(d, d.length))\n                : utils_1.Data.from(data, data.length),\n            logIndex,\n            removed: log[0].equals(utils_2.BUFFER_ZERO) ? false : true,\n            topics: Array.isArray(topics)\n                ? topics.map(t => utils_1.Data.from(t, 32))\n                : utils_1.Data.from(topics, 32),\n            transactionHash: utils_1.Data.from(log[2], 32),\n            transactionIndex: utils_1.Quantity.from(log[1])\n        };\n    }\n    /**\n     * Note: you must set `this.blockNumber: Quantity` first!\n     *\n     * Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic\n     * filters:\n     *  ▸ [] \"anything\"\n     *  ▸ [A] \"A in first position (and anything after)\"\n     *  ▸ [null, B] \"anything in first position AND B in second position (and anything after)\"\n     *  ▸ [A, B] \"A\" in first position AND B in second position (and anything after)\"\n     *  ▸ [[A, B], [A, B]] \"(A OR B) in first position AND (A OR B) in second position (and anything after)\"\n     * @param expectedAddresses -\n     * @param expectedTopics -\n     * @returns JSON representation of the filtered logs\n     */\n    *filter(expectedAddresses, expectedTopics) {\n        const logs = this[_logs]();\n        if (expectedAddresses.length !== 0) {\n            if (expectedTopics.length === 0) {\n                for (const log of logs) {\n                    if (expectedAddresses.some(address => address.equals(log.address)))\n                        yield log.toJSON();\n                }\n            }\n            else {\n                for (const log of logs) {\n                    if (!expectedAddresses.some(address => address.equals(log.address)))\n                        continue;\n                    if (filterByTopic(expectedTopics, log.topics))\n                        yield log.toJSON();\n                }\n            }\n        }\n        else if (expectedTopics.length !== 0) {\n            for (const log of logs) {\n                if (filterByTopic(expectedTopics, log.topics))\n                    yield log.toJSON();\n            }\n        }\n        else {\n            yield* logs.toJSON();\n        }\n    }\n}\nexports.BlockLogs = BlockLogs;\n//# sourceMappingURL=blocklogs.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tag = exports.InternalTag = void 0;\nvar InternalTag;\n(function (InternalTag) {\n    InternalTag[\"earliest\"] = \"earliest\";\n    InternalTag[\"latest\"] = \"latest\";\n    InternalTag[\"pending\"] = \"pending\";\n})(InternalTag = exports.InternalTag || (exports.InternalTag = {}));\nvar Tag;\n(function (Tag) {\n    Tag.latest = \"latest\";\n    Tag.earliest = \"earliest\";\n    Tag.pending = \"pending\";\n})(Tag = exports.Tag || (exports.Tag = {}));\n//# sourceMappingURL=tags.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceDataFactory = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst BYTE_LENGTH = 32;\n/**\n * Precomputed 32-byte prefixes to make stringification a faster\n */\nconst PREFIXES = [\n    \"\",\n    \"00\",\n    \"0000\",\n    \"000000\",\n    \"00000000\",\n    \"0000000000\",\n    \"000000000000\",\n    \"00000000000000\",\n    \"0000000000000000\",\n    \"000000000000000000\",\n    \"00000000000000000000\",\n    \"0000000000000000000000\",\n    \"000000000000000000000000\",\n    \"00000000000000000000000000\",\n    \"0000000000000000000000000000\",\n    \"000000000000000000000000000000\",\n    \"00000000000000000000000000000000\",\n    \"0000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000000000000000\",\n    \"000000000000000000000000000000000000000000000000000000000000\",\n    \"00000000000000000000000000000000000000000000000000000000000000\",\n    \"0000000000000000000000000000000000000000000000000000000000000000\"\n];\nconst TraceDataFactory = () => {\n    const traceDataLookup = new Map();\n    const TraceData = {\n        from: (value) => {\n            // Remove all leading zeroes from keys.\n            const key = (0, utils_1.bufferToMinHexKey)(value);\n            const existing = traceDataLookup.get(key);\n            if (existing) {\n                return existing;\n            }\n            let buffer;\n            let str;\n            const data = {\n                /**\n                 * Returns a 32-byte 0-padded Buffer\n                 */\n                toBuffer: () => {\n                    if (buffer) {\n                        return buffer;\n                    }\n                    const length = value.byteLength;\n                    if (length === BYTE_LENGTH) {\n                        buffer = value;\n                    }\n                    else {\n                        // convert the buffer into the appropriately sized buffer.\n                        const lengthDiff = BYTE_LENGTH - length;\n                        buffer = Buffer.allocUnsafe(BYTE_LENGTH).fill(0, 0, lengthDiff);\n                        value.copy(buffer, lengthDiff, 0, length);\n                    }\n                    return buffer;\n                },\n                /**\n                 * Returns a 32-byte hex-string representation\n                 */\n                toJSON: () => {\n                    if (str) {\n                        return str;\n                    }\n                    // convert a hex key like \"ab01\" into \"00...00ab01\"\n                    return (str = `${PREFIXES[BYTE_LENGTH - key.length / 2]}${key}`);\n                }\n            };\n            traceDataLookup.set(key, data);\n            return data;\n        }\n    };\n    return TraceData;\n};\nexports.TraceDataFactory = TraceDataFactory;\n//# sourceMappingURL=trace-data.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceStorageMap = void 0;\nclass TraceStorageMap extends Map {\n    toJSON() {\n        const obj = {};\n        for (const [key, value] of this) {\n            obj[key.toJSON()] = value;\n        }\n        return obj;\n    }\n}\nexports.TraceStorageMap = TraceStorageMap;\n//# sourceMappingURL=trace-storage-map.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=debug-storage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=extract-values-from-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterTypes = void 0;\nvar FilterTypes;\n(function (FilterTypes) {\n    FilterTypes[FilterTypes[\"log\"] = 0] = \"log\";\n    FilterTypes[FilterTypes[\"block\"] = 1] = \"block\";\n    FilterTypes[FilterTypes[\"pendingTransaction\"] = 2] = \"pendingTransaction\";\n})(FilterTypes = exports.FilterTypes || (exports.FilterTypes = {}));\n//# sourceMappingURL=filters.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=hex-datatypes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=shh.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=subscriptions.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=trace-transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tuple-from-union.js.map","\"use strict\";\n/*!\n * @ganache/filecoin-options\n *\n * @author Tim Coulter\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilecoinDefaults = exports.FilecoinOptionsConfig = void 0;\nconst src_1 = require(\"./src\");\nvar src_2 = require(\"./src\");\nObject.defineProperty(exports, \"FilecoinOptionsConfig\", { enumerable: true, get: function () { return src_2.FilecoinOptionsConfig; } });\nObject.defineProperty(exports, \"FilecoinDefaults\", { enumerable: true, get: function () { return src_2.FilecoinDefaults; } });\nexports.default = {\n    FilecoinDefaults: src_1.FilecoinDefaults,\n    FilecoinOptionsConfig: src_1.FilecoinOptionsConfig\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChainOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.ChainOptions = {\n    ipfsHost: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The IPFS simulator host name/address to listen on.\",\n        default: () => \"127.0.0.1\",\n        cliType: \"string\"\n    },\n    ipfsPort: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The IPFS simulator port.\",\n        default: () => 5001,\n        cliType: \"number\"\n    },\n    asyncRequestProcessing: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"When set to `false` only one request will be processed at a time.\",\n        default: () => true,\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=chain-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.DatabaseOptions = {\n    db: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify an alternative database instance, like MemDOWN\",\n        disableInCLI: true,\n        conflicts: [\"dbPath\"]\n    },\n    dbPath: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Specify a path to a directory to save the chain database.\",\n        cliAliases: [\"db\"],\n        cliType: \"string\",\n        conflicts: [\"db\"]\n    }\n};\n//# sourceMappingURL=database-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = void 0;\nconst normalize = (rawInput) => rawInput;\nexports.normalize = normalize;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilecoinOptionsConfig = exports.FilecoinDefaults = void 0;\nconst chain_options_1 = require(\"./chain-options\");\nconst database_options_1 = require(\"./database-options\");\nconst logging_options_1 = require(\"./logging-options\");\nconst miner_options_1 = require(\"./miner-options\");\nconst wallet_options_1 = require(\"./wallet-options\");\nconst options_1 = require(\"@ganache/options\");\nexports.FilecoinDefaults = {\n    chain: chain_options_1.ChainOptions,\n    database: database_options_1.DatabaseOptions,\n    logging: logging_options_1.LoggingOptions,\n    miner: miner_options_1.MinerOptions,\n    wallet: wallet_options_1.WalletOptions\n};\nexports.FilecoinOptionsConfig = new options_1.OptionsConfig(exports.FilecoinDefaults);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst logger = { log: console.log };\nexports.LoggingOptions = {\n    logger: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"An object, like `console`, that implements a `log` function.\",\n        disableInCLI: true,\n        default: () => logger\n    }\n};\n//# sourceMappingURL=logging-options.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MinerOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nexports.MinerOptions = {\n    blockTime: {\n        normalize: value => Math.max(0, value),\n        cliDescription: 'Sets the `blockTime` in seconds for automatic mining. A `blockTime` of `0` or a negative number enables \"instamine mode\", where new executable transactions will be mined instantly.',\n        default: () => 0,\n        cliType: \"number\"\n    },\n    mine: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Enable mining. Set to `false` to pause the miner.\",\n        default: () => true,\n        cliType: \"boolean\"\n    }\n};\n//# sourceMappingURL=miner-options.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletOptions = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst seedrandom_1 = __importDefault(require(\"seedrandom\"));\nconst options_1 = require(\"@ganache/options\");\nconst unseededRng = (0, seedrandom_1.default)();\nconst randomAlphaNumericString = (() => {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const alphabetLength = alphabet.length;\n    return (length, rng) => {\n        let text = \"\";\n        for (let i = 0; i < length; i++) {\n            text += alphabet[(rng() * alphabetLength) | 0];\n        }\n        return text;\n    };\n})();\nexports.WalletOptions = {\n    totalAccounts: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Number of accounts to generate at startup.\",\n        default: () => 10,\n        cliAliases: [\"a\"],\n        cliType: \"number\"\n    },\n    deterministic: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Use pre-defined, deterministic seed.\",\n        default: () => false,\n        cliAliases: [\"d\"],\n        cliType: \"boolean\",\n        conflicts: [\"seed\"]\n    },\n    seed: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"Seed to use to generate a mnemonic.\",\n        // The order of the options matter here! `wallet.deterministic`\n        // needs to be prior to `wallet.seed` for `config.deterministic`\n        // below to be set correctly\n        default: config => config.deterministic === true\n            ? options_1.DeterministicSeedPhrase\n            : randomAlphaNumericString(10, unseededRng),\n        cliAliases: [\"s\"],\n        cliType: \"string\",\n        conflicts: [\"deterministic\"]\n    },\n    defaultBalance: {\n        normalize: helpers_1.normalize,\n        cliDescription: \"The default account balance, specified in FIL.\",\n        default: () => 100,\n        cliAliases: [\"b\"],\n        cliType: \"number\"\n    }\n};\n//# sourceMappingURL=wallet-options.js.map","\"use strict\";\n/*!\n * @ganache/colors\n *\n * @author David Murdoch\n * @license MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/index\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TruffleColors = void 0;\nexports.TruffleColors = {\n    /**\n     * Ganache orange\n     */\n    porsche: \"#e4a663\",\n    /**\n     * Truffle blue/turquoise\n     */\n    turquoise: \"#3fe0c5\",\n    /**\n     * Infura orange\n     */\n    infura: \"#ff6b4a\"\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.provider = exports.server = exports._DefaultServerOptions = exports.ServerStatus = exports.Server = void 0;\nconst connector_loader_1 = __importDefault(require(\"./src/connector-loader\"));\nconst server_1 = __importDefault(require(\"./src/server\"));\nvar server_2 = require(\"./src/server\");\nObject.defineProperty(exports, \"Server\", { enumerable: true, get: function () { return server_2.Server; } });\nObject.defineProperty(exports, \"ServerStatus\", { enumerable: true, get: function () { return server_2.ServerStatus; } });\nObject.defineProperty(exports, \"_DefaultServerOptions\", { enumerable: true, get: function () { return server_2._DefaultServerOptions; } });\n/**\n * @public\n */\nconst Ganache = {\n    /**\n     * Creates a Ganache server instance that creates and\n     * serves an underlying Ganache provider. Initialization\n     * doesn't begin until `server.listen(...)` is called.\n     * `server.listen(...)` returns a promise that resolves\n     * when initialization is finished.\n     *\n     * @param options - Configuration options for the server;\n     * `options` includes provider based options as well.\n     * @returns A provider instance for the flavor\n     * `options.flavor` which defaults to `ethereum`.\n     */\n    server: (options) => new server_1.default(options),\n    /**\n     * Initializes a Web3 provider for a Ganache instance.\n     * This function starts an asynchronous task, but does not\n     * finish it by the time the function returns. Listen to\n     * `provider.on(\"connect\", () => {...})` or wait for\n     * `await provider.once(\"connect\")` for initialization to\n     * finish. You may start sending requests to the provider\n     * before initialization finishes however; these requests\n     * will start being consumed after initialization finishes.\n     *\n     * @param options - Configuration options for the provider.\n     * @returns A provider instance for the flavor\n     * `options.flavor` which defaults to `ethereum`.\n     */\n    provider: (options) => {\n        const loader = connector_loader_1.default.initialize(options);\n        return loader.connector.provider;\n    }\n};\n/**\n * @public\n */\nexports.server = Ganache.server;\n/**\n * @public\n */\nexports.provider = Ganache.provider;\n/**\n * @public\n */\nexports.default = Ganache;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@ganache/utils\");\nconst flavors_1 = require(\"@ganache/flavors\");\nconst flavors_2 = require(\"@ganache/flavors\");\nconst initialize = (options = {\n    flavor: flavors_1.DefaultFlavor,\n    chain: { asyncRequestProcessing: true }\n}) => {\n    const flavor = (options.flavor || flavors_1.DefaultFlavor);\n    // Set up our request coordinator to either use FIFO or or async request\n    // processing. The RequestCoordinator _can_ be used to coordinate the number\n    // of requests being processed, but we don't use it for that (yet), instead\n    // of \"all\" (0) or just 1 as we are doing here:\n    let asyncRequestProcessing;\n    if (\"chain\" in options && \"asyncRequestProcessing\" in options[\"chain\"]) {\n        asyncRequestProcessing = options[\"chain\"].asyncRequestProcessing;\n    }\n    else if (\"asyncRequestProcessing\" in options) {\n        asyncRequestProcessing = options[\"asyncRequestProcessing\"];\n    }\n    else {\n        asyncRequestProcessing = true;\n    }\n    const requestCoordinator = new utils_1.RequestCoordinator(asyncRequestProcessing ? 0 : 1);\n    // The Executor is responsible for actually executing the method on the\n    // chain/API. It performs some safety checks to ensure \"safe\" method\n    //  execution before passing it to a RequestCoordinator.\n    const executor = new utils_1.Executor(requestCoordinator);\n    const connector = (0, flavors_2.GetConnector)(flavor, options, executor);\n    // Purposely not awaiting on this to prevent a breaking change\n    // to the `Ganache.provider()` method\n    // TODO: remove the `connector.connect ? ` check and just use\n    // `connector.connect()` after publishing the `@ganache/filecoin` with the\n    // connector.connect interface\n    const connectPromise = connector.connect\n        ? connector.connect()\n        : connector.initialize();\n    // The request coordinator is initialized in a \"paused\" state; when the\n    // provider is ready we unpause.. This lets us accept queue requests before\n    // we've even fully initialized.\n    return {\n        connector,\n        promise: connectPromise.then(requestCoordinator.resume)\n    };\n};\n/**\n * Loads the connector specified by the given `flavor`\n */\nexports.default = {\n    initialize\n};\n//# sourceMappingURL=connector-loader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serverOptionsConfig = exports.serverDefaults = void 0;\nconst server_options_1 = require(\"./server-options\");\nconst options_1 = require(\"@ganache/options\");\nexports.serverDefaults = {\n    server: server_options_1.ServerOptions\n};\nexports.serverOptionsConfig = new options_1.OptionsConfig(exports.serverDefaults);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ServerOptions = void 0;\nconst flavors_1 = require(\"@ganache/flavors\");\nconst normalize = (rawInput) => rawInput;\nexports.ServerOptions = {\n    ws: {\n        normalize,\n        cliDescription: \"Enable a websocket server.\",\n        default: () => true,\n        legacyName: \"ws\",\n        cliType: \"boolean\"\n    },\n    wsBinary: {\n        normalize,\n        cliDescription: \"Whether or not websockets should response with binary data (ArrayBuffers) or strings.\",\n        default: () => \"auto\",\n        cliChoices: [\"true\", \"false\", \"auto\"]\n    },\n    rpcEndpoint: {\n        normalize,\n        cliDescription: \"Defines the endpoint route the HTTP and WebSocket servers will listen on.\",\n        default: (config, flavor) => {\n            switch (flavor) {\n                case flavors_1.FilecoinFlavorName:\n                    return \"/rpc/v0\";\n                case flavors_1.DefaultFlavor:\n                default:\n                    return \"/\";\n            }\n        },\n        defaultDescription: '\"/\" (Ethereum), \"/rpc/v0\" (Filecoin)'\n    }\n};\n//# sourceMappingURL=server-options.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Server_options, _Server_providerOptions, _Server_status, _Server_app, _Server_httpServer, _Server_listenSocket, _Server_connector, _Server_websocketServer, _Server_initializer;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = exports._DefaultServerOptions = exports.ServerStatus = void 0;\nconst options_1 = require(\"./options\");\nconst promise_allsettled_1 = __importDefault(require(\"promise.allsettled\"));\n// This `shim()` is necessary for `Promise.allSettled` to be shimmed\n// in `node@10`. We cannot use `allSettled([...])` directly due to\n// https://github.com/es-shims/Promise.allSettled/issues/5 without\n// upgrading Typescript. TODO: if Typescript is upgraded to 4.2.3+\n// then this line could be removed and `Promise.allSettled` below\n// could replaced with `allSettled`.\npromise_allsettled_1.default.shim();\nconst aggregate_error_1 = __importDefault(require(\"aggregate-error\"));\nconst uws_js_unofficial_1 = require(\"@trufflesuite/uws-js-unofficial\");\n// Set the \"silent\" config option so we don't output the \"uwebsockets\" header\n// we check for truthiness because `uws` is omitted from the browser build\nuws_js_unofficial_1._cfg &&\n    (0, uws_js_unofficial_1._cfg)(new Uint8Array([115, 105, 108, 101, 110, 116]));\nconst flavors_1 = require(\"@ganache/flavors\");\nconst connector_loader_1 = __importDefault(require(\"./connector-loader\"));\nconst ws_server_1 = __importDefault(require(\"./servers/ws-server\"));\nconst http_server_1 = __importDefault(require(\"./servers/http-server\"));\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst DEFAULT_HOST = \"127.0.0.1\";\n/**\n * Server ready state constants.\n *\n * These are bit flags. This means that you can check if the status is:\n *  * ready: `status === Status.ready` or `status & Status.ready !== 0`\n *  * opening: `status === Status.opening` or `status & Status.opening !== 0`\n *  * open: `status === Status.open` or `status & Status.open !== 0`\n *  * opening || open: `status & Status.openingOrOpen !== 0` or `status & (Status.opening | Status.open) !== 0`\n *  * closing: `status === Status.closing` or `status & Status.closing !== 0`\n *  * closed: `status === Status.closed` or `status & Status.closed !== 0`\n *  * closing || closed: `status & Status.closingOrClosed !== 0` or `status & (Status.closing | Status.closed) !== 0`\n */\nvar ServerStatus;\n(function (ServerStatus) {\n    /**\n     * The Server is in an unknown state; perhaps construction didn't succeed\n     */\n    ServerStatus[ServerStatus[\"unknown\"] = 0] = \"unknown\";\n    /**\n     * The Server has been constructed and is ready to be opened.\n     */\n    ServerStatus[ServerStatus[\"ready\"] = 1] = \"ready\";\n    /**\n     * The Server has started to open, but has not yet finished initialization.\n     */\n    ServerStatus[ServerStatus[\"opening\"] = 2] = \"opening\";\n    /**\n     * The Server is open and ready for connection.\n     */\n    ServerStatus[ServerStatus[\"open\"] = 4] = \"open\";\n    /**\n     * The Server is either opening or is already open\n     */\n    ServerStatus[ServerStatus[\"openingOrOpen\"] = 6] = \"openingOrOpen\";\n    /**\n     * The Server is in the process of closing.\n     */\n    ServerStatus[ServerStatus[\"closing\"] = 8] = \"closing\";\n    /**\n     * The Server is closed and not accepting new connections.\n     */\n    ServerStatus[ServerStatus[\"closed\"] = 16] = \"closed\";\n    /**\n     * The Server is either opening or is already open\n     */\n    ServerStatus[ServerStatus[\"closingOrClosed\"] = 24] = \"closingOrClosed\";\n})(ServerStatus = exports.ServerStatus || (exports.ServerStatus = {}));\n/**\n * For private use. May change in the future.\n * I don't don't think these options should be held in this `core` package.\n * @ignore\n * @internal\n */\nexports._DefaultServerOptions = options_1.serverDefaults;\n/**\n * @public\n */\nclass Server extends emittery_1.default {\n    constructor(providerAndServerOptions = {\n        flavor: flavors_1.DefaultFlavor\n    }) {\n        super();\n        _Server_options.set(this, void 0);\n        _Server_providerOptions.set(this, void 0);\n        _Server_status.set(this, ServerStatus.unknown);\n        _Server_app.set(this, null);\n        _Server_httpServer.set(this, null);\n        _Server_listenSocket.set(this, null);\n        _Server_connector.set(this, void 0);\n        _Server_websocketServer.set(this, null);\n        _Server_initializer.set(this, void 0);\n        __classPrivateFieldSet(this, _Server_options, options_1.serverOptionsConfig.normalize(providerAndServerOptions), \"f\");\n        __classPrivateFieldSet(this, _Server_providerOptions, providerAndServerOptions, \"f\");\n        __classPrivateFieldSet(this, _Server_status, ServerStatus.ready, \"f\");\n        // we need to start initializing now because `initialize` sets the\n        // `provider` property... and someone might want to do:\n        //   const server = Ganache.server();\n        //   const provider = server.provider;\n        //   await server.listen(8545)\n        const loader = connector_loader_1.default.initialize(__classPrivateFieldGet(this, _Server_providerOptions, \"f\"));\n        const connector = (__classPrivateFieldSet(this, _Server_connector, loader.connector, \"f\"));\n        // Since the ConnectorLoader starts an async promise that we intentionally\n        // don't await yet we keep the promise around for something else to handle\n        // later.\n        __classPrivateFieldSet(this, _Server_initializer, Promise.all([\n            loader.promise,\n            this.initialize(connector)\n        ]), \"f\");\n    }\n    get provider() {\n        return __classPrivateFieldGet(this, _Server_connector, \"f\").provider;\n    }\n    get status() {\n        return __classPrivateFieldGet(this, _Server_status, \"f\");\n    }\n    async initialize(connector) {\n        const _app = (__classPrivateFieldSet(this, _Server_app, (0, uws_js_unofficial_1.App)(), \"f\"));\n        if (__classPrivateFieldGet(this, _Server_options, \"f\").server.ws) {\n            __classPrivateFieldSet(this, _Server_websocketServer, new ws_server_1.default(_app, connector, __classPrivateFieldGet(this, _Server_options, \"f\").server), \"f\");\n        }\n        __classPrivateFieldSet(this, _Server_httpServer, new http_server_1.default(_app, connector, __classPrivateFieldGet(this, _Server_options, \"f\").server), \"f\");\n        await connector.once(\"ready\");\n    }\n    listen(port, host, callback) {\n        let hostname = null;\n        if (typeof host === \"function\") {\n            callback = host;\n            hostname = null;\n        }\n        const callbackIsFunction = typeof callback === \"function\";\n        const status = __classPrivateFieldGet(this, _Server_status, \"f\");\n        if (status === ServerStatus.closing) {\n            // if closing\n            const err = new Error(`Cannot start server while it is closing.`);\n            return callbackIsFunction\n                ? process.nextTick(callback, err)\n                : Promise.reject(err);\n        }\n        else if ((status & ServerStatus.openingOrOpen) !== 0) {\n            // if opening or open\n            const err = new Error(`Server is already open, or is opening, on port: ${port}.`);\n            return callbackIsFunction\n                ? process.nextTick(callback, err)\n                : Promise.reject(err);\n        }\n        __classPrivateFieldSet(this, _Server_status, ServerStatus.opening, \"f\");\n        const promise = Promise.allSettled([\n            __classPrivateFieldGet(this, _Server_initializer, \"f\"),\n            new Promise((resolve) => {\n                // Make sure we have *exclusive* use of this port.\n                // https://github.com/uNetworking/uSockets/commit/04295b9730a4d413895fa3b151a7337797dcb91f#diff-79a34a07b0945668e00f805838601c11R51\n                const LIBUS_LISTEN_EXCLUSIVE_PORT = 1;\n                hostname\n                    ? __classPrivateFieldGet(this, _Server_app, \"f\").listen(hostname, port, LIBUS_LISTEN_EXCLUSIVE_PORT, resolve)\n                    : __classPrivateFieldGet(this, _Server_app, \"f\").listen(port, LIBUS_LISTEN_EXCLUSIVE_PORT, resolve);\n            }).then(listenSocket => {\n                if (listenSocket) {\n                    __classPrivateFieldSet(this, _Server_status, ServerStatus.open, \"f\");\n                    __classPrivateFieldSet(this, _Server_listenSocket, listenSocket, \"f\");\n                }\n                else {\n                    __classPrivateFieldSet(this, _Server_status, ServerStatus.closed, \"f\");\n                    const err = new Error(`listen EADDRINUSE: address already in use ${hostname || DEFAULT_HOST}:${port}.`);\n                    throw err;\n                }\n            })\n        ]).then(async (promiseResults) => {\n            const errors = [];\n            if (promiseResults[0].status === \"rejected\") {\n                errors.push(promiseResults[0].reason);\n            }\n            if (promiseResults[1].status === \"rejected\") {\n                errors.push(promiseResults[1].reason);\n            }\n            if (errors.length === 0) {\n                this.emit(\"open\");\n            }\n            else {\n                __classPrivateFieldSet(this, _Server_status, ServerStatus.unknown, \"f\");\n                try {\n                    await this.close();\n                }\n                catch (e) {\n                    errors.push(e);\n                }\n                if (errors.length > 1) {\n                    throw new aggregate_error_1.default(errors);\n                }\n                else {\n                    throw errors[0];\n                }\n            }\n        });\n        if (callbackIsFunction) {\n            promise.then(() => callback(null)).catch(callback);\n        }\n        else {\n            return promise;\n        }\n    }\n    async close() {\n        if (__classPrivateFieldGet(this, _Server_status, \"f\") === ServerStatus.opening) {\n            // if opening\n            throw new Error(`Cannot close server while it is opening.`);\n        }\n        else if ((__classPrivateFieldGet(this, _Server_status, \"f\") & ServerStatus.closingOrClosed) !== 0) {\n            // if closing or closed\n            throw new Error(`Server is already closing or closed.`);\n        }\n        __classPrivateFieldSet(this, _Server_status, ServerStatus.closing, \"f\");\n        // clean up the websocket objects\n        const _listenSocket = __classPrivateFieldGet(this, _Server_listenSocket, \"f\");\n        __classPrivateFieldSet(this, _Server_listenSocket, null, \"f\");\n        // close the socket to prevent any more connections\n        if (_listenSocket !== null) {\n            (0, uws_js_unofficial_1.us_listen_socket_close)(_listenSocket);\n        }\n        // close all the connected websockets:\n        if (__classPrivateFieldGet(this, _Server_websocketServer, \"f\") !== null) {\n            __classPrivateFieldGet(this, _Server_websocketServer, \"f\").close();\n        }\n        // and do all http cleanup, if any\n        if (__classPrivateFieldGet(this, _Server_httpServer, \"f\") !== null) {\n            __classPrivateFieldGet(this, _Server_httpServer, \"f\").close();\n        }\n        // cleanup the connector, provider, etc.\n        if (__classPrivateFieldGet(this, _Server_connector, \"f\") !== null) {\n            await __classPrivateFieldGet(this, _Server_connector, \"f\").close();\n        }\n        __classPrivateFieldSet(this, _Server_status, ServerStatus.closed, \"f\");\n        __classPrivateFieldSet(this, _Server_app, null, \"f\");\n        await this.emit(\"close\");\n    }\n}\nexports.Server = Server;\n_Server_options = new WeakMap(), _Server_providerOptions = new WeakMap(), _Server_status = new WeakMap(), _Server_app = new WeakMap(), _Server_httpServer = new WeakMap(), _Server_listenSocket = new WeakMap(), _Server_connector = new WeakMap(), _Server_websocketServer = new WeakMap(), _Server_initializer = new WeakMap();\nexports.default = Server;\n//# sourceMappingURL=server.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _HttpServer_connector, _HttpServer_handlePost, _HttpServer_handleOptions;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst content_types_1 = __importDefault(require(\"./utils/content-types\"));\nconst http_response_codes_1 = __importDefault(require(\"./utils/http-response-codes\"));\nconst util_1 = require(\"util\");\nconst noop = () => { };\n/**\n * uWS doesn't let us use the request after the request method has completed.\n * But we can't set headers until after the statusCode is set. But we don't\n * know the status code until the provider returns asynchronously.\n * So this does request-related work immediately and returns a function to do the\n * rest of the work later.\n * @param method -\n * @param request -\n */\nfunction prepareCORSResponseHeaders(method, request) {\n    // https://fetch.spec.whatwg.org/#http-requests\n    const origin = request.getHeader(\"origin\");\n    const acrh = request.getHeader(\"access-control-request-headers\");\n    return (response) => {\n        const isCORSRequest = origin !== \"\";\n        if (isCORSRequest) {\n            // OPTIONS preflight requests need a little extra treatment\n            if (method === \"OPTIONS\") {\n                // we only allow POST requests, so it doesn't matter which method the request is asking for\n                response.writeHeader(\"Access-Control-Allow-Methods\", \"POST\");\n                // echo all requested access-control-request-headers back to the response\n                if (acrh !== \"\") {\n                    response.writeHeader(\"Access-Control-Allow-Headers\", acrh);\n                }\n                // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n                // minutes (this is the maximum time Chromium allows)\n                response.writeHeader(\"Access-Control-Max-Age\", \"600\"); // seconds\n            }\n            // From the spec: https://fetch.spec.whatwg.org/#http-responses\n            // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n            // but for any subsequent CORS requests it might not be. Support therefore\n            // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n            // header is added to all requests.\n            // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n            // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n            // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n            // returned even when no credentials are set in the browser this header must always be return on all requests.\n            // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n            //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n            //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n            response.writeHeader(\"Access-Control-Allow-Credentials\", \"true\");\n            // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n            // as the `Origin` header is also included for all requests whose method is neither\n            // `GET` nor `HEAD`.\"\n            // Explicitly set the origin instead of using *, since credentials\n            // can't be used in conjunction with *. This will always be set\n            /// for valid preflight requests.\n            response.writeHeader(\"Access-Control-Allow-Origin\", origin);\n        }\n    };\n}\nfunction sendResponse(response, statusCode, contentType, data, writeHeaders = noop) {\n    response.cork(() => {\n        response.writeStatus(statusCode);\n        writeHeaders(response);\n        if (contentType != null) {\n            response.writeHeader(\"Content-Type\", contentType);\n        }\n        if (data != null) {\n            response.end(data);\n        }\n        else {\n            response.end();\n        }\n    });\n}\nclass HttpServer {\n    constructor(app, connector, options) {\n        _HttpServer_connector.set(this, void 0);\n        _HttpServer_handlePost.set(this, (response, request) => {\n            // handle JSONRPC post requests...\n            const writeHeaders = prepareCORSResponseHeaders(\"POST\", request);\n            // TODO(perf): pre-allocate the buffer if we know the Content-Length\n            let buffer;\n            let aborted = false;\n            response.onAborted(() => {\n                aborted = true;\n            });\n            response.onData((message, isLast) => {\n                const chunk = Buffer.from(message);\n                if (isLast) {\n                    // we have to use any here because typescript isn't smart enough\n                    // to understand the ambiguity of RequestFormat and ReturnType\n                    // on the Connector interface must match up appropriately\n                    const connector = __classPrivateFieldGet(this, _HttpServer_connector, \"f\");\n                    let payload;\n                    try {\n                        const message = buffer\n                            ? Buffer.concat([buffer, chunk], buffer.length + chunk.length)\n                            : chunk;\n                        payload = connector.parse(message);\n                    }\n                    catch (e) {\n                        sendResponse(response, http_response_codes_1.default.BAD_REQUEST, content_types_1.default.PLAIN, \"400 Bad Request: \" + e.message, writeHeaders);\n                        return;\n                    }\n                    connector\n                        .handle(payload, request)\n                        .then(({ value }) => value)\n                        .then(result => {\n                        if (aborted) {\n                            // if the request has been aborted don't try sending (it'll\n                            // cause an `Unhandled promise rejection` if we try)\n                            return;\n                        }\n                        const data = connector.format(result, payload);\n                        if (util_1.types.isGeneratorObject(data)) {\n                            response.cork(() => {\n                                response.writeStatus(http_response_codes_1.default.OK);\n                                writeHeaders(response);\n                                response.writeHeader(\"Content-Type\", content_types_1.default.JSON);\n                                for (const datum of data) {\n                                    response.write(datum);\n                                }\n                                response.end();\n                            });\n                        }\n                        else {\n                            sendResponse(response, http_response_codes_1.default.OK, content_types_1.default.JSON, data, writeHeaders);\n                        }\n                    })\n                        .catch(error => {\n                        if (aborted) {\n                            // if the request has been aborted don't try sending (it'll\n                            // cause an `Unhandled promise rejection` if we try)\n                            return;\n                        }\n                        const data = connector.formatError(error, payload);\n                        sendResponse(response, http_response_codes_1.default.OK, content_types_1.default.JSON, data, writeHeaders);\n                    });\n                }\n                else {\n                    if (buffer) {\n                        buffer = Buffer.concat([buffer, chunk], buffer.length + chunk.length);\n                    }\n                    else {\n                        buffer = Buffer.concat([chunk], chunk.length);\n                    }\n                }\n            });\n        });\n        _HttpServer_handleOptions.set(this, (response, request) => {\n            // handle CORS preflight requests...\n            const writeHeaders = prepareCORSResponseHeaders(\"OPTIONS\", request);\n            // OPTIONS responses don't have a body, so respond with `204 No Content`...\n            sendResponse(response, http_response_codes_1.default.NO_CONTENT, null, null, writeHeaders);\n        });\n        __classPrivateFieldSet(this, _HttpServer_connector, connector, \"f\");\n        // JSON-RPC routes...\n        app\n            .post(options.rpcEndpoint, __classPrivateFieldGet(this, _HttpServer_handlePost, \"f\"))\n            .options(options.rpcEndpoint, __classPrivateFieldGet(this, _HttpServer_handleOptions, \"f\"));\n        // because Easter Eggs are fun...\n        app.get(\"/418\", response => {\n            sendResponse(response, http_response_codes_1.default.IM_A_TEAPOT, content_types_1.default.PLAIN, \"418 I'm a teapot\");\n        });\n        // fallback routes...\n        app.any(\"/*\", (response, request) => {\n            const connectionHeader = request.getHeader(\"connection\");\n            if (connectionHeader && connectionHeader.toLowerCase() === \"upgrade\") {\n                // if we got here it means the websocket server wasn't enabled but\n                // a client tried to connect via websocket. This is a Bad Request.\n                sendResponse(response, http_response_codes_1.default.BAD_REQUEST, content_types_1.default.PLAIN, \"400 Bad Request\");\n            }\n            else {\n                // all other requests don't mean anything to us, so respond with `404 Not Found`...\n                sendResponse(response, http_response_codes_1.default.NOT_FOUND, content_types_1.default.PLAIN, \"404 Not Found\");\n            }\n        });\n    }\n    close() {\n        // currently a no op.\n    }\n}\nexports.default = HttpServer;\n_HttpServer_connector = new WeakMap(), _HttpServer_handlePost = new WeakMap(), _HttpServer_handleOptions = new WeakMap();\n//# sourceMappingURL=http-server.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ContentTypes;\n(function (ContentTypes) {\n    ContentTypes[\"PLAIN\"] = \"text/plain\";\n    ContentTypes[\"JSON\"] = \"application/json\";\n})(ContentTypes || (ContentTypes = {}));\nexports.default = ContentTypes;\n//# sourceMappingURL=content-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HttpResponseCodes;\n(function (HttpResponseCodes) {\n    HttpResponseCodes[\"OK\"] = \"200\";\n    HttpResponseCodes[\"NO_CONTENT\"] = \"204\";\n    HttpResponseCodes[\"BAD_REQUEST\"] = \"400\";\n    HttpResponseCodes[\"NOT_FOUND\"] = \"404\";\n    HttpResponseCodes[\"METHOD_NOT_ALLOWED\"] = \"405\";\n    HttpResponseCodes[\"IM_A_TEAPOT\"] = \"418\";\n})(HttpResponseCodes || (HttpResponseCodes = {}));\nexports.default = HttpResponseCodes;\n//# sourceMappingURL=http-response-codes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar WebSocketCloseCodes;\n(function (WebSocketCloseCodes) {\n    /**\n     * Normal closure; the connection successfully completed whatever purpose for\n     * which it was created.\n     */\n    WebSocketCloseCodes[WebSocketCloseCodes[\"CLOSE_NORMAL\"] = 1000] = \"CLOSE_NORMAL\";\n    /**\n     * Indicates that an endpoint is \"going away\", such as a server going down or\n     * a browser having navigated away from a page.\n     */\n    // CLOSE_GOING_AWAY = 1001\n    // CLOSE_PROTOCOL_ERROR = 1002,\n    // CLOSE_ABNORMAL = 1006\n})(WebSocketCloseCodes || (WebSocketCloseCodes = {}));\nexports.default = WebSocketCloseCodes;\n//# sourceMappingURL=websocket-close-codes.js.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _WebsocketServer_connections;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MAX_PAYLOAD_SIZE = void 0;\nconst websocket_close_codes_1 = __importDefault(require(\"./utils/websocket-close-codes\"));\nconst util_1 = require(\"util\");\n// matches geth's limit of 15 MebiBytes: https://github.com/ethereum/go-ethereum/blob/3526f690478482a02a152988f4d31074c176b136/rpc/websocket.go#L40\nexports.MAX_PAYLOAD_SIZE = 15 * 1024 * 1024;\nclass WebsocketServer {\n    constructor(app, connector, options) {\n        _WebsocketServer_connections.set(this, new Map());\n        const connections = __classPrivateFieldGet(this, _WebsocketServer_connections, \"f\");\n        const wsBinary = options.wsBinary;\n        const autoBinary = wsBinary === \"auto\";\n        app.ws(options.rpcEndpoint, {\n            /* WS Options */\n            maxPayloadLength: exports.MAX_PAYLOAD_SIZE,\n            idleTimeout: 120,\n            // Note that compression is disabled (the default option)\n            // due to not being able to link against electron@12\n            // with compression included\n            /* Handlers */\n            open: (ws) => {\n                ws.closed = false;\n                connections.set(ws, new Set());\n            },\n            message: async (ws, message, isBinary) => {\n                // We have to use type any instead of ReturnType<typeof connector.parse>\n                // on `payload` because Typescript isn't smart enough to understand the\n                // ambiguity doesn't actually exist\n                let payload;\n                const useBinary = autoBinary ? isBinary : wsBinary;\n                try {\n                    payload = connector.parse(Buffer.from(message));\n                }\n                catch (err) {\n                    const response = connector.formatError(err, payload);\n                    ws.send(response, useBinary);\n                    return;\n                }\n                let data;\n                try {\n                    const { value } = await connector.handle(payload, ws);\n                    // The socket may have closed while we were waiting for the response\n                    // Don't bother trying to send to it if it was.\n                    if (ws.closed)\n                        return;\n                    const resultEmitter = value;\n                    const result = await resultEmitter;\n                    if (ws.closed)\n                        return;\n                    data = connector.format(result, payload);\n                    // if the result is an emitter listen to its `\"message\"` event\n                    // We check if `on` is a function rather than check if\n                    // `resultEmitter instanceof PromiEvent` because `@ganache/filecoin`\n                    // and `ganache` webpack `@ganache/utils` separately. This causes\n                    // instanceof to fail here. Since we know `resultEmitter` is MergePromiseT\n                    // we can safely assume that if `on` is a function, then we have a PromiEvent\n                    if (typeof resultEmitter[\"on\"] === \"function\") {\n                        const resultEmitterPromiEvent = resultEmitter;\n                        resultEmitterPromiEvent.on(\"message\", (result) => {\n                            // note: we _don't_ need to check if `ws.closed` here because when\n                            // `ws.closed` is set we remove this event handler anyway.\n                            const message = JSON.stringify({\n                                jsonrpc: \"2.0\",\n                                method: result.type,\n                                params: result.data\n                            });\n                            ws.send(message, isBinary);\n                        });\n                        // keep track of listeners to dispose off when the ws disconnects\n                        connections.get(ws).add(resultEmitterPromiEvent.dispose);\n                    }\n                }\n                catch (err) {\n                    // ensure the connector's `handle` fn doesn't throw outside of a Promise\n                    if (ws.closed)\n                        return;\n                    data = connector.formatError(err, payload);\n                }\n                if (util_1.types.isGeneratorObject(data)) {\n                    const localData = data;\n                    ws.cork(() => {\n                        const { value: first } = localData.next();\n                        // get the second fragment, if there is one\n                        // Note: we lag behind by one fragment because the last fragment\n                        // needs to be sent via the `sendLastFragment` method.\n                        // This value acts as a lookahead so we know if we are at the last\n                        // value or not.\n                        let { value: next, done } = localData.next();\n                        // if there wasn't a second fragment, just send it the usual way.\n                        if (done) {\n                            ws.send(first, useBinary);\n                        }\n                        else {\n                            // fragment send: https://github.com/uNetworking/uWebSockets.js/issues/635\n                            const shouldCompress = false;\n                            // send the first fragment\n                            ws.sendFirstFragment(first, useBinary, shouldCompress);\n                            // Now send the rest of the data piece by piece.\n                            let prev = next;\n                            for (next of localData) {\n                                ws.sendFragment(prev, shouldCompress);\n                                prev = next;\n                            }\n                            // finally, send the last fragment\n                            ws.sendLastFragment(next, shouldCompress);\n                        }\n                    });\n                }\n                else {\n                    ws.send(data, useBinary);\n                }\n            },\n            drain: (ws) => {\n                // This is there so tests can detect if a small amount of backpressure\n                // is happening and that things will still work if it does. We actually\n                // don't do anything to manage excessive backpressure.\n                // TODO: handle back pressure for real!\n                // options.logger.log(\"WebSocket backpressure: \" + ws.getBufferedAmount());\n            },\n            close: (ws) => {\n                ws.closed = true;\n                connections.get(ws).forEach(dispose => dispose());\n                connections.delete(ws);\n            }\n        });\n    }\n    close() {\n        __classPrivateFieldGet(this, _WebsocketServer_connections, \"f\").forEach((_, ws) => ws.end(websocket_close_codes_1.default.CLOSE_NORMAL, \"Server closed by client\"));\n    }\n}\nexports.default = WebsocketServer;\n_WebsocketServer_connections = new WeakMap();\n//# sourceMappingURL=ws-server.js.map","var map = {\n\t\"./uws_darwin_arm64_102.node\": 623,\n\t\"./uws_darwin_arm64_72.node\": 624,\n\t\"./uws_darwin_arm64_79.node\": 625,\n\t\"./uws_darwin_arm64_83.node\": 626,\n\t\"./uws_darwin_arm64_88.node\": 627,\n\t\"./uws_darwin_arm64_93.node\": 628,\n\t\"./uws_darwin_x64_102.node\": 629,\n\t\"./uws_darwin_x64_72.node\": 630,\n\t\"./uws_darwin_x64_79.node\": 631,\n\t\"./uws_darwin_x64_83.node\": 632,\n\t\"./uws_darwin_x64_88.node\": 633,\n\t\"./uws_darwin_x64_93.node\": 634,\n\t\"./uws_linux_x64_102.node\": 635,\n\t\"./uws_linux_x64_72.node\": 636,\n\t\"./uws_linux_x64_79.node\": 637,\n\t\"./uws_linux_x64_83.node\": 638,\n\t\"./uws_linux_x64_88.node\": 639,\n\t\"./uws_linux_x64_93.node\": 640,\n\t\"./uws_win32_x64_102.node\": 641,\n\t\"./uws_win32_x64_83.node\": 642,\n\t\"./uws_win32_x64_88.node\": 643,\n\t\"./uws_win32_x64_93.node\": 644\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 886;","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetConnector = exports.DefaultOptionsByName = exports.DefaultFlavor = exports.FilecoinFlavorName = exports.EthereumFlavorName = void 0;\nconst ethereum_1 = require(\"@ganache/ethereum\");\nconst ethereum_options_1 = require(\"@ganache/ethereum-options\");\nconst filecoin_options_1 = require(\"@ganache/filecoin-options\");\nconst colors_1 = require(\"@ganache/colors\");\nconst chalk_1 = __importDefault(require(\"chalk\"));\n// we need \"@ganache/options\" in order for TS to properly infer types for `DefaultOptionsByName`\nrequire(\"@ganache/options\");\nconst NEED_HELP = \"Need help? Reach out to the Truffle community at\";\nconst COMMUNITY_LINK = \"https://trfl.io/support\";\nexports.EthereumFlavorName = \"ethereum\";\nexports.FilecoinFlavorName = \"filecoin\";\nexports.DefaultFlavor = exports.EthereumFlavorName;\nexports.DefaultOptionsByName = {\n    [exports.EthereumFlavorName]: ethereum_options_1.EthereumDefaults,\n    [exports.FilecoinFlavorName]: filecoin_options_1.FilecoinDefaults\n};\nfunction GetConnector(flavor, providerOptions, executor) {\n    if (flavor === exports.DefaultFlavor) {\n        return new ethereum_1.Connector(providerOptions, executor);\n    }\n    try {\n        switch (flavor) {\n            case exports.FilecoinFlavorName: {\n                flavor = \"@ganache/filecoin\";\n                // TODO: remove the `typeof f.default != \"undefined\" ? ` check once the\n                // published filecoin plugin is updated to\n                const f = eval(\"require\")(flavor);\n                const Connector = typeof f.default != \"undefined\" ? f.default.Connector : f.Connector;\n                // @ts-ignore\n                return new Connector(providerOptions, executor);\n            }\n            default: {\n                // for future plugin compat\n                const { Connector } = require(flavor);\n                return new Connector(providerOptions, executor);\n            }\n        }\n    }\n    catch (e) {\n        if (e.message.includes(`Cannot find module '${flavor}'`)) {\n            // we print and exit rather than throw to prevent webpack output from being\n            // spat out for the line number\n            console.warn((0, chalk_1.default) `\\n\\n{red.bold ERROR:} Could not find Ganache flavor \"{bold filecoin}\" (${flavor}); ` +\n                `it probably\\nneeds to be installed.\\n` +\n                ` ▸ if you're using Ganache as a library run: \\n` +\n                (0, chalk_1.default) `   {blue.bold $ npm install ${flavor}}\\n` +\n                ` ▸ if you're using Ganache as a CLI run: \\n` +\n                (0, chalk_1.default) `   {blue.bold $ npm install --global ${flavor}}\\n\\n` +\n                (0, chalk_1.default) `{hex(\"${colors_1.TruffleColors.porsche}\").bold ${NEED_HELP}}\\n` +\n                (0, chalk_1.default) `{hex(\"${colors_1.TruffleColors.turquoise}\") ${COMMUNITY_LINK}}\\n\\n`);\n            process.exit(1);\n        }\n        else {\n            throw e;\n        }\n    }\n}\nexports.GetConnector = GetConnector;\n//# sourceMappingURL=index.js.map","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 877;\nmodule.exports = webpackEmptyContext;","export const debug = () => () => {};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/base\"), exports);\n__exportStar(require(\"./src/exclusive\"), exports);\n__exportStar(require(\"./src/definition\"), exports);\n__exportStar(require(\"./src/create\"), exports);\n__exportStar(require(\"./src/constants\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=base.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeterministicSeedPhrase = void 0;\n// Don't change! We need maintain original determinism since the beginning\nexports.DeterministicSeedPhrase = \"TestRPC is awesome!\";\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _OptionsConfig_defaults, _OptionsConfig_namespaces;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionsConfig = void 0;\nconst utils_1 = require(\"@ganache/utils\");\nconst checkForConflicts = (name, namespace, suppliedOptions, conflicts) => {\n    if (!conflicts)\n        return;\n    for (const conflict of conflicts) {\n        if (suppliedOptions.has(conflict)) {\n            throw new Error(`Values for both \"${namespace}.${name}\" and ` +\n                `\"${namespace}.${conflict}\" cannot ` +\n                `be specified; they are mutually exclusive.`);\n        }\n    }\n};\nfunction fill(defaults, options, target, namespace) {\n    const def = defaults[namespace];\n    const config = (target[namespace] = target[namespace] || {});\n    const flavor = options.flavor;\n    const suppliedOptions = new Set();\n    const keys = Object.keys(def);\n    if ((0, utils_1.hasOwn)(options, namespace)) {\n        const namespaceOptions = options[namespace];\n        for (let i = 0, l = keys.length; i < l; i++) {\n            const key = keys[i];\n            const propDefinition = def[key];\n            let value = namespaceOptions[key];\n            if (value !== undefined) {\n                const normalized = propDefinition.normalize(namespaceOptions[key]);\n                if (normalized !== undefined) {\n                    checkForConflicts(key, namespace, suppliedOptions, propDefinition.conflicts);\n                    config[key] = normalized;\n                    suppliedOptions.add(key);\n                }\n            }\n            else {\n                const legacyName = propDefinition.legacyName || key;\n                value = options[legacyName];\n                if (value !== undefined) {\n                    const normalized = propDefinition.normalize(value);\n                    if (normalized !== undefined) {\n                        checkForConflicts(key, namespace, suppliedOptions, propDefinition.conflicts);\n                        config[key] = normalized;\n                        suppliedOptions.add(key);\n                    }\n                }\n                else if ((0, utils_1.hasOwn)(propDefinition, \"default\")) {\n                    config[key] = propDefinition.default(config, flavor);\n                }\n            }\n        }\n    }\n    else {\n        for (let i = 0, l = keys.length; i < l; i++) {\n            const key = keys[i];\n            const propDefinition = def[key];\n            const legacyName = propDefinition.legacyName || key;\n            const value = options[legacyName];\n            if (value !== undefined) {\n                const normalized = propDefinition.normalize(value);\n                if (normalized !== undefined) {\n                    checkForConflicts(key, namespace, suppliedOptions, propDefinition.conflicts);\n                    config[key] = normalized;\n                    suppliedOptions.add(key);\n                }\n            }\n            else if ((0, utils_1.hasOwn)(propDefinition, \"default\")) {\n                config[key] = propDefinition.default(config, flavor);\n            }\n        }\n    }\n}\nclass OptionsConfig {\n    constructor(defaults) {\n        _OptionsConfig_defaults.set(this, void 0);\n        _OptionsConfig_namespaces.set(this, void 0);\n        __classPrivateFieldSet(this, _OptionsConfig_defaults, defaults, \"f\");\n        __classPrivateFieldSet(this, _OptionsConfig_namespaces, Object.keys(defaults), \"f\");\n    }\n    normalize(options) {\n        const defaults = __classPrivateFieldGet(this, _OptionsConfig_defaults, \"f\");\n        const out = {};\n        __classPrivateFieldGet(this, _OptionsConfig_namespaces, \"f\").forEach(namespace => {\n            fill(defaults, options, out, namespace);\n        });\n        return out;\n    }\n}\nexports.OptionsConfig = OptionsConfig;\n_OptionsConfig_defaults = new WeakMap(), _OptionsConfig_namespaces = new WeakMap();\n//# sourceMappingURL=create.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//#endregion Definition helpers\n//# sourceMappingURL=definition.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//#endregion\n//# sourceMappingURL=exclusive.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _PromiseQueue_queue, _PromiseQueue_tryResolve, _PromiseQueue_tryResolveChain;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst entry_1 = __importDefault(require(\"./src/entry\"));\nconst emitteryMethods = [\"emit\", \"once\"];\n/**\n * Creates a FIFO queue that ensures promises are _resolved_ in the order\n * they were added.\n *\n * This is different than a FIFO queue that _executes_ functions that\n * return promises; this queue is for the promises themselves.\n *\n * @example\n * ```javascript\n * const queue = new PromiseQueue();\n *\n * const slow = new Promise(resolve => setTimeout(resolve, 1000, \"slow\"));\n * const fast = Promise.resolve(\"fast\");\n *\n * await Promise.race([\n *   queue.add(slow),\n *   queue.add(fast)\n * ]); // returns \"slow\"\n *\n * // Additionally, the queued promise chain can be cleared via `queue.clear(value)`.\n * // This will cause the chain of promises to all resolve immediately with the\n * // given value. *\n * //\n * // * note: whatever the promise starting doing when it was created will still\n * // happen, no promises are aborted; rather, the return value is ignored.\n * ```\n */\nlet PromiseQueue = class PromiseQueue {\n    constructor() {\n        // TODO(perf): a singly linked list is probably a better option here\n        _PromiseQueue_queue.set(this, []);\n        _PromiseQueue_tryResolve.set(this, (queue, entry) => {\n            // if this is now the highest priority entry, resolve the outer\n            // Promise\n            if (entry === queue[0]) {\n                queue.shift();\n                entry.resolve(entry.value);\n                // then try resolving the rest\n                __classPrivateFieldGet(this, _PromiseQueue_tryResolveChain, \"f\").call(this, queue);\n            }\n            else {\n                entry.resolved = true;\n            }\n        });\n        /**\n         * Removes all _resolved_ promises from the front of the chain of promises.\n         */\n        _PromiseQueue_tryResolveChain.set(this, (queue) => {\n            let first = queue[0];\n            while (first && first.resolved) {\n                queue.shift();\n                first.resolve(first.value);\n                first = queue[0];\n            }\n            // if there is nothing left to do emit `\"idle\"`\n            if (queue.length === 0) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Returns true if there are promises pending in the queue\n     */\n    isBusy() {\n        return __classPrivateFieldGet(this, _PromiseQueue_queue, \"f\").length !== 0;\n    }\n    /**\n     * Adds the promise to the end of the queue.\n     * @param promise -\n     * @returns a promise that resolves with the given promise's result. If the\n     * queue was `clear`ed before the promise could be shifted off the return\n     * value will be the `value` passed to `clear`.\n     */\n    add(promise) {\n        const queue = __classPrivateFieldGet(this, _PromiseQueue_queue, \"f\");\n        const entry = new entry_1.default(promise, queue, __classPrivateFieldGet(this, _PromiseQueue_tryResolve, \"f\"));\n        queue.push(entry);\n        return entry.promise;\n    }\n    /**\n     * Clears all promises from the queue and sets their resolved values to the\n     * given value.\n     */\n    clear(value) {\n        // remove all entrys from the queue and mark them.\n        const cancelledQueue = __classPrivateFieldGet(this, _PromiseQueue_queue, \"f\").splice(0);\n        cancelledQueue.forEach(entry => {\n            entry.queue = cancelledQueue;\n            entry.value = value;\n        });\n    }\n};\n_PromiseQueue_queue = new WeakMap(), _PromiseQueue_tryResolve = new WeakMap(), _PromiseQueue_tryResolveChain = new WeakMap();\nPromiseQueue = __decorate([\n    emittery_1.default.mixin(Symbol.for(\"emittery\"), emitteryMethods)\n], PromiseQueue);\nexports.default = PromiseQueue;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Entry {\n    constructor(promise, queue, onSetteled) {\n        this.resolved = false;\n        this.value = promise;\n        this.queue = queue;\n        this.onSetteled = onSetteled;\n        const _onSetteled = () => this.onSetteled(this.queue, this);\n        promise.then(_onSetteled, _onSetteled);\n        this.promise = new Promise(resolve => {\n            this.resolve = resolve;\n        });\n    }\n}\nexports.default = Entry;\n//# sourceMappingURL=entry.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encodeLength = exports.encode = exports.digest = exports.encodeRange = exports.getLength = void 0;\nconst rlp_1 = require(\"rlp\");\nObject.defineProperty(exports, \"getLength\", { enumerable: true, get: function () { return rlp_1.getLength; } });\nconst utils_1 = require(\"@ganache/utils\");\n/**\n * Begin RLP encoding of `items`, from `start` until `length`. Call `RLP.digest` to\n * finish encoding.\n *\n * @param input -\n **/\nfunction encodeRange(items, start, length) {\n    let count = 0;\n    const end = start + length;\n    const output = [];\n    for (var i = start; i < end; i++) {\n        const item = items[i];\n        const encoded = encode(item);\n        count += encoded.length;\n        output.push(encoded);\n    }\n    return { length: count, output };\n}\nexports.encodeRange = encodeRange;\n/**\n * Finishes encoding started by `encodeRange`.\n *\n * @param ranges -\n * @returns returns a Buffer of encoded data\n */\nfunction digest(ranges, length) {\n    const encodedLength = encodeLength(length, 192);\n    const lengthEncodedLength = encodedLength.length;\n    const buf = Buffer.allocUnsafe(lengthEncodedLength + length);\n    encodedLength.copy(buf, 0, 0, lengthEncodedLength);\n    let offset = lengthEncodedLength;\n    for (let i = 0, l = ranges.length; i < l; i++) {\n        const range = ranges[i];\n        for (let j = 0, m = range.length; j < m; j++) {\n            const entry = range[j];\n            const size = entry.length;\n            entry.copy(buf, offset, 0, size);\n            offset += size;\n        }\n    }\n    return buf;\n}\nexports.digest = digest;\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * @param input -\n * @returns returns a Buffer of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        let length = 0;\n        const output = [];\n        for (let i = 0, l = input.length; i < l; i++) {\n            const enc = encode(input[i]);\n            length += enc.length;\n            output.push(enc);\n        }\n        const buf = Buffer.concat(output, length);\n        const encodedLength = encodeLength(length, 192);\n        return Buffer.concat([encodedLength, buf], encodedLength.length + length);\n    }\n    else {\n        if (input == null) {\n            const buf = Buffer.allocUnsafe(1);\n            buf[0] = 128;\n            return buf;\n        }\n        else {\n            const length = input.length;\n            if (length === 1 && input[0] < 128) {\n                return input;\n            }\n            else {\n                const encLength = encodeLength(length, 128);\n                return Buffer.concat([encLength, input], encLength.length + length);\n            }\n        }\n    }\n}\nexports.encode = encode;\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        const buf = Buffer.allocUnsafe(1);\n        buf[0] = len + offset;\n        return buf;\n    }\n    else {\n        const hexLength = (0, utils_1.uintToBuffer)(len);\n        const lLength = hexLength.length;\n        const firstByte = (0, utils_1.uintToBuffer)(offset + 55 + lLength);\n        return Buffer.concat([firstByte, hexLength], firstByte.length + lLength);\n    }\n}\nexports.encodeLength = encodeLength;\nfunction decode(input) {\n    return (0, rlp_1.decode)(input);\n}\nexports.decode = decode;\n//# sourceMappingURL=index.js.map","\"use strict\";\n/*!\n * @ganache/secp256k1\n *\n * @author David Murdoch\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nlet secp256k1;\ntry {\n    // TODO: find a better way :-)\n    // use `eval` to make `ganache`'s webpack ignore this\n    const nodeRequire = eval(\"require\");\n    const path = nodeRequire.resolve(\"secp256k1/package.json\");\n    const dir = (0, path_1.dirname)(path);\n    const nodeGypBuild = require(\"node-gyp-build\");\n    // load native secp256k1\n    const { Secp256k1 } = nodeGypBuild(dir);\n    secp256k1 = new Secp256k1();\n}\ncatch {\n    // on error use the JS fallback\n    secp256k1 = require(\"secp256k1/lib/elliptic\");\n}\nexports.default = secp256k1;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromiEvent = exports.JsonRpcErrorCode = exports.makeResponse = exports.makeRequest = exports.makeError = void 0;\n__exportStar(require(\"./src/types\"), exports);\n__exportStar(require(\"./src/utils\"), exports);\n__exportStar(require(\"./src/things/subscription\"), exports);\n__exportStar(require(\"./src/things/json-rpc/json-rpc-quantity\"), exports);\n__exportStar(require(\"./src/things/json-rpc/json-rpc-data\"), exports);\nvar jsonrpc_1 = require(\"./src/things/jsonrpc\");\nObject.defineProperty(exports, \"makeError\", { enumerable: true, get: function () { return jsonrpc_1.makeError; } });\nObject.defineProperty(exports, \"makeRequest\", { enumerable: true, get: function () { return jsonrpc_1.makeRequest; } });\nObject.defineProperty(exports, \"makeResponse\", { enumerable: true, get: function () { return jsonrpc_1.makeResponse; } });\nObject.defineProperty(exports, \"JsonRpcErrorCode\", { enumerable: true, get: function () { return jsonrpc_1.JsonRpcErrorCode; } });\nvar promievent_1 = require(\"./src/things/promievent\");\nObject.defineProperty(exports, \"PromiEvent\", { enumerable: true, get: function () { return __importDefault(promievent_1).default; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toBigIntBE = exports.toBufferBE = void 0;\nvar bigint_buffer_1 = require(\"@trufflesuite/bigint-buffer\");\nObject.defineProperty(exports, \"toBufferBE\", { enumerable: true, get: function () { return bigint_buffer_1.toBufferBE; } });\nObject.defineProperty(exports, \"toBigIntBE\", { enumerable: true, get: function () { return bigint_buffer_1.toBigIntBE; } });\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseJsonRpcType = exports.toBuffers = exports.toStrings = exports.bufCache = exports.strCache = void 0;\nconst utils_1 = require(\"../../utils\");\nconst utils_2 = require(\"../../utils\");\nconst constants_1 = require(\"../../utils/constants\");\nexports.strCache = new WeakMap();\nexports.bufCache = new WeakMap();\nexports.toStrings = new WeakMap();\nexports.toBuffers = new WeakMap();\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\nclass BaseJsonRpcType {\n    constructor(value) {\n        const self = this;\n        if (Buffer.isBuffer(value)) {\n            exports.toStrings.set(this, () => value.toString(\"hex\"));\n            exports.bufCache.set(this, value);\n            self[Symbol.toStringTag] = \"Buffer\";\n        }\n        else {\n            const type = typeof value;\n            switch (type) {\n                case \"number\":\n                    if (value % 1 !== 0) {\n                        throw new Error(\"`Cannot wrap a decimal value as a json-rpc type`\");\n                    }\n                    exports.toStrings.set(this, () => value.toString(16));\n                    exports.toBuffers.set(this, () => value === 0 ? constants_1.BUFFER_EMPTY : (0, utils_2.uintToBuffer)(value));\n                    break;\n                case \"bigint\":\n                    exports.toStrings.set(this, () => value.toString(16));\n                    exports.toBuffers.set(this, () => value === 0n ? constants_1.BUFFER_EMPTY : (0, utils_1.bigIntToBuffer)(value));\n                    break;\n                case \"string\": {\n                    // handle hex-encoded string\n                    if (value.indexOf(\"0x\") === 0) {\n                        exports.strCache.set(this, value.toLowerCase());\n                        exports.toBuffers.set(this, () => {\n                            let fixedValue = value.slice(2);\n                            if (fixedValue.length % 2 === 1) {\n                                fixedValue = \"0\" + fixedValue;\n                            }\n                            return Buffer.from(fixedValue, \"hex\");\n                        });\n                    }\n                    else {\n                        throw new Error(`cannot convert string value \"${value}\" into type \\`${this.constructor.name}\\`; strings must be hex-encoded and prefixed with \"0x\".`);\n                    }\n                    break;\n                }\n                default:\n                    // handle undefined/null\n                    if (value == null) {\n                        // This is a weird thing that returns undefined/null for a call\n                        // to toString().\n                        this.toString = () => value;\n                        exports.bufCache.set(this, constants_1.BUFFER_EMPTY);\n                        break;\n                    }\n                    throw new Error(`Cannot wrap a \"${type}\" as a json-rpc type`);\n            }\n            self[Symbol.toStringTag] = type;\n        }\n        this.value = value;\n    }\n    // used to make console.log debugging a little easier\n    [(Symbol.toStringTag, inspect)](_depth, _options) {\n        return this.value;\n    }\n    toString() {\n        let str = exports.strCache.get(this);\n        if (str === void 0) {\n            str = \"0x\" + exports.toStrings.get(this)();\n            exports.strCache.set(this, str);\n        }\n        return str;\n    }\n    toBuffer() {\n        let buf = exports.bufCache.get(this);\n        if (buf === void 0) {\n            buf = exports.toBuffers.get(this)();\n            exports.bufCache.set(this, buf);\n        }\n        return buf;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    isNull() {\n        return this.value == null;\n    }\n}\nexports.BaseJsonRpcType = BaseJsonRpcType;\n//# sourceMappingURL=json-rpc-base-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Data = void 0;\nconst json_rpc_base_types_1 = require(\"./json-rpc-base-types\");\nconst json_rpc_base_types_2 = require(\"./json-rpc-base-types\");\nfunction validateByteLength(byteLength) {\n    if (typeof byteLength !== \"number\" || byteLength < 0) {\n        throw new Error(`byteLength must be a number greater than 0`);\n    }\n}\nconst byteLengths = new WeakMap();\nclass Data extends json_rpc_base_types_1.BaseJsonRpcType {\n    constructor(value, byteLength) {\n        if (typeof value === \"bigint\") {\n            throw new Error(`Cannot create a ${typeof value} as a Data`);\n        }\n        super(value);\n        if (byteLength !== void 0) {\n            validateByteLength(byteLength);\n            byteLengths.set(this, byteLength | 0);\n        }\n    }\n    toString(byteLength) {\n        const str = json_rpc_base_types_2.strCache.get(this);\n        if (str !== void 0) {\n            return str;\n        }\n        else {\n            let str = json_rpc_base_types_2.toStrings.get(this)();\n            let length = str.length;\n            if (length % 2 === 1) {\n                length++;\n                str = `0${str}`;\n            }\n            if (byteLength !== void 0) {\n                validateByteLength(byteLength);\n            }\n            else {\n                byteLength = byteLengths.get(this);\n            }\n            if (byteLength !== void 0) {\n                const strLength = byteLength * 2;\n                const padBy = strLength - length;\n                if (padBy < 0) {\n                    // if our hex-encoded data is longer than it should be, truncate it:\n                    str = str.slice(0, strLength);\n                }\n                else if (padBy > 0) {\n                    // if our hex-encoded data is shorter than it should be, pad it:\n                    str = \"0\".repeat(padBy) + str;\n                }\n            }\n            return `0x${str}`;\n        }\n    }\n    static from(value, byteLength) {\n        return new Data(value, byteLength);\n    }\n}\nexports.Data = Data;\n//# sourceMappingURL=json-rpc-data.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quantity = void 0;\nconst utils_1 = require(\"../../utils\");\nconst json_rpc_base_types_1 = require(\"./json-rpc-base-types\");\n// TODO(perf): rewrite this stuff since it isn't really caching anything\nclass Quantity extends json_rpc_base_types_1.BaseJsonRpcType {\n    constructor() {\n        super(...arguments);\n        this._nullable = false;\n    }\n    static from(value, nullable = false) {\n        if (value instanceof Quantity)\n            return value;\n        const q = new Quantity(value);\n        q._nullable = nullable;\n        return q;\n    }\n    toString() {\n        // TODO(perf): memoize this stuff\n        if (Buffer.isBuffer(this.value)) {\n            let val = this.value.toString(\"hex\").replace(/^(?:0+(.+?))?$/, \"$1\");\n            if (val === \"\") {\n                if (this._nullable) {\n                    return null;\n                }\n                // RPC Quantities must represent `0` as `0x0`\n                return \"0x0\";\n            }\n            return `0x${val}`;\n        }\n        else if (this.value == null) {\n            return \"0x\";\n        }\n        else {\n            return super.toString();\n        }\n    }\n    toBuffer() {\n        // 0x0, 0x00, 0x000, etc should return BUFFER_EMPTY\n        if (Buffer.isBuffer(this.value)) {\n            // trim zeros from start\n            let best = 0;\n            for (best = 0; best < this.value.length; best++) {\n                if (this.value[best] !== 0)\n                    break;\n            }\n            if (best > 0) {\n                return this.value.slice(best);\n            }\n            else {\n                return this.value;\n            }\n        }\n        else if (typeof this.value === \"string\") {\n            let val = this.value.slice(2).replace(/^(?:0+(.+?))?$/, \"$1\");\n            if (val === \"\" || val === \"0\") {\n                return utils_1.BUFFER_EMPTY;\n            }\n        }\n        else if (this.value === 0 || this.value === 0n) {\n            return utils_1.BUFFER_EMPTY;\n        }\n        return super.toBuffer();\n    }\n    toBigInt() {\n        const value = this.value;\n        // TODO(perf): memoize this stuff\n        if (Buffer.isBuffer(value)) {\n            const bigInt = (0, utils_1.bufferToBigInt)(value);\n            return bigInt == null ? (this._nullable ? null : 0n) : bigInt;\n        }\n        else {\n            return value == null ? (this._nullable ? null : 0n) : BigInt(value);\n        }\n    }\n    toNumber() {\n        // TODO(perf): memoize this stuff\n        return typeof this.value === \"number\"\n            ? this.value\n            : Number(this.toBigInt());\n    }\n    valueOf() {\n        const value = this.value;\n        if (value === null) {\n            return value;\n        }\n        else if (value === undefined) {\n            return value;\n        }\n        else {\n            return this.toBigInt();\n        }\n    }\n}\nexports.Quantity = Quantity;\nexports.default = Quantity;\n//# sourceMappingURL=json-rpc-quantity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcErrorCode = exports.makeError = exports.makeResponse = exports.makeRequest = void 0;\nconst jsonrpc = \"2.0\";\nconst makeRequest = (json) => {\n    return {\n        id: json.id,\n        jsonrpc,\n        method: json.method,\n        params: json.params\n    };\n};\nexports.makeRequest = makeRequest;\nconst makeResponse = (id, result) => {\n    return {\n        id,\n        jsonrpc,\n        result\n    };\n};\nexports.makeResponse = makeResponse;\nconst makeError = (id, error, result) => {\n    // Error objects are weird, `message` isn't included in the property names,\n    // so it is pulled out separately.\n    const details = { message: error.message };\n    Object.getOwnPropertyNames(error).forEach(name => {\n        if (typeof name === \"string\") {\n            details[name] = error[name];\n        }\n    });\n    if (typeof details.code !== \"number\") {\n        details.code = -32700; // JSON-RPC Parse error\n    }\n    if (result !== undefined) {\n        return {\n            id,\n            jsonrpc,\n            error: details,\n            result\n        };\n    }\n    else {\n        return {\n            id,\n            jsonrpc,\n            error: details\n        };\n    }\n};\nexports.makeError = makeError;\nvar JsonRpcErrorCode;\n(function (JsonRpcErrorCode) {\n    /**\n     * Invalid JSON was received by the server.\n     * An error occurred on the server while parsing the JSON text.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"PARSE_ERROR\"] = -32700] = \"PARSE_ERROR\";\n    /**\n     * The JSON sent is not a valid Request object.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INVALID_REQUEST\"] = -32600] = \"INVALID_REQUEST\";\n    /**\n     * The method does not exist / is not available.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"METHOD_NOT_FOUND\"] = -32601] = \"METHOD_NOT_FOUND\";\n    /**\n     * Invalid method parameter(s).\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INVALID_PARAMS\"] = -32602] = \"INVALID_PARAMS\";\n    /**\n     * Internal JSON-RPC error.\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INTERNAL_ERROR\"] = -32603] = \"INTERNAL_ERROR\";\n    /**\n     * Missing or invalid parameters\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"INVALID_INPUT\"] = -32000] = \"INVALID_INPUT\";\n    /**\n     * Transaction creation failed\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"TRANSACTION_REJECTED\"] = -32003] = \"TRANSACTION_REJECTED\";\n    /**\n     * \tMethod is not implemented\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"METHOD_NOT_SUPPORTED\"] = -32004] = \"METHOD_NOT_SUPPORTED\";\n    /**\n     * \tRequest exceeds defined limit\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"LIMIT_EXCEEDED\"] = -32005] = \"LIMIT_EXCEEDED\";\n    /**\n     * Version of JSON-RPC protocol is not supported\n     */\n    JsonRpcErrorCode[JsonRpcErrorCode[\"JSON_RPC_VERSION_NOT_SUPPORTED\"] = -32006] = \"JSON_RPC_VERSION_NOT_SUPPORTED\";\n})(JsonRpcErrorCode = exports.JsonRpcErrorCode || (exports.JsonRpcErrorCode = {}));\n//# sourceMappingURL=jsonrpc.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar PromiEvent_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emittery_1 = __importDefault(require(\"emittery\"));\nconst emitteryMethods = [\n    \"clearListeners\",\n    \"once\",\n    \"on\",\n    \"emit\",\n    \"onAny\"\n];\n// A hack to fix Emittery's `mixin` type.\n// issue: https://github.com/sindresorhus/emittery/issues/79\nconst mixin = emittery_1.default.mixin.bind(emittery_1.default);\nlet PromiEvent = PromiEvent_1 = class PromiEvent extends Promise {\n    constructor(executor) {\n        super(executor);\n        /**\n         * Used to immediately clear all event listeners on the instance and prevent\n         * any additional binding or emission from the Emitter.\n         *\n         * Once disposed no listeners can be bound to this emitter.\n         *\n         * Note: `dispose` is pre-bound to the `this`, making it possible to pass the\n         * method around detached from it's context.\n         */\n        this.dispose = () => {\n            if (!this.clearListeners)\n                throw new Error(\"PromiEvent already disposed\");\n            this.clearListeners();\n            // Ensure that once disposed no listeners can be bound to this emitter.\n            const fn = () => {\n                throw new Error(\"PromiEvent bound after dispose\");\n            };\n            emitteryMethods\n                .filter(m => m !== \"emit\")\n                .forEach(methodName => {\n                Object.defineProperty(this, methodName, {\n                    enumerable: false,\n                    value: fn\n                });\n            });\n        };\n    }\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected - The callback to execute when the Promise is rejected.\n     * @returns A PromiEvent for the completion of the callback.\n     */\n    catch(onrejected) {\n        const prom = new PromiEvent_1((resolve, reject) => {\n            this.onAny((eventName, eventData) => {\n                return prom.emit(eventName, eventData);\n            });\n            const p = super.catch(onrejected);\n            p.then(resolve, reject);\n        });\n        return prom;\n    }\n    static resolve(value) {\n        return new PromiEvent_1(resolve => {\n            resolve(value);\n        });\n    }\n};\nPromiEvent = PromiEvent_1 = __decorate([\n    mixin(Symbol.for(\"emittery\"), emitteryMethods)\n], PromiEvent);\nexports.default = PromiEvent;\n//# sourceMappingURL=promievent.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=subscription.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Base implementation for an API.\n * All properties must be `async` callable or return a `Promise`\n */\nclass ApiBase {\n}\n//# sourceMappingURL=api.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=connector.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./connector\"), exports);\n__exportStar(require(\"./provider\"), exports);\n__exportStar(require(\"./api\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bigIntToBuffer = void 0;\nconst common_1 = require(\"../common\");\nconst uint_to_buffer_1 = require(\"./uint-to-buffer\");\nconst allocUnsafe = Buffer.allocUnsafe;\nlet _bigIntToBuffer;\n/**\n * Returns the number of bytes contained in this given `value`.\n * @param value -\n */\nfunction bigIntByteLength(value) {\n    let length = 1;\n    while ((value >>= 8n))\n        length++;\n    return length;\n}\nconst MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);\ntry {\n    // force fallback if only `toBufferBE` is missing (this can happen if toBufferBE isn't polyfilled for the browser,\n    // which, at the time of this writing... it isn't)\n    if (!common_1.toBufferBE)\n        throw new Error(\"Missing function `toBufferBE`!\");\n    _bigIntToBuffer = (value) => {\n        if (value <= MAX_SAFE_INTEGER) {\n            return (0, uint_to_buffer_1.uintToBuffer)(Number(value));\n        }\n        else {\n            const size = bigIntByteLength(value);\n            return (0, common_1.toBufferBE)(value, size);\n        }\n    };\n}\ncatch {\n    _bigIntToBuffer = (value) => {\n        if (value <= MAX_SAFE_INTEGER) {\n            // if this value can be handled as a JS number safely, convert it that way\n            return (0, uint_to_buffer_1.uintToBuffer)(Number(value));\n        }\n        else {\n            let length = bigIntByteLength(value);\n            const buf = allocUnsafe(length);\n            // process 1 byte at a time\n            do {\n                // truncate to right-most 32 bits and assign to buffer position `length`\n                buf[--length] = Number(value & 0xffffffffn);\n                // shift right-most byte off since we've used it\n                value >>= 8n;\n            } while (length);\n            return buf;\n        }\n    };\n}\n/**\n * Converts a bigint to a Buffer (Big Endian)\n */\nexports.bigIntToBuffer = _bigIntToBuffer;\n//# sourceMappingURL=bigint-to-buffer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferToBigInt = void 0;\nconst bigint_buffer_1 = require(\"@trufflesuite/bigint-buffer\");\n/**\n * note: this doesn't handle negative values\n * @param value - Buffer representation of a bigint, most-significant bit first (Big-endian)\n */\nfunction bufferToBigInt(value) {\n    // Parsed as BE.\n    // This doesn't handle negative values. We may need to add logic to handle\n    // it because it is possible values returned from the VM could be negative\n    // and stored in a buffer.\n    const length = value.byteLength;\n    if (length === 0) {\n        return null;\n    }\n    // Buffers that are 6 bytes or less can be converted with built-in methods\n    if (length <= 6) {\n        return BigInt(value.readUIntBE(0, length));\n    }\n    let view;\n    // Buffers that are 7 bytes need to be padded to 8 bytes\n    if (length === 7) {\n        const padded = new Uint8Array(8);\n        // set byte 0 to 0, and bytes 1-8 to the value's 7 bytes:\n        padded.set(value, 1);\n        view = new DataView(padded.buffer);\n    }\n    else if (length === 8) {\n        view = new DataView(value.buffer, value.byteOffset, length);\n    }\n    else {\n        // TODO: toBigIntBE is a native lib with no pure JS fallback yet.\n        return (0, bigint_buffer_1.toBigIntBE)(value);\n    }\n    return view.getBigUint64(0);\n}\nexports.bufferToBigInt = bufferToBigInt;\n//# sourceMappingURL=buffer-to-bigint.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferToMinHexKey = void 0;\nlet stringify;\nif (typeof Buffer.prototype.latin1Slice === \"function\") {\n    stringify = (buffer, start, end) => {\n        // this is just `buffer.toString(\"hex\")`, but it skips a bunch of checks\n        // that don't apply because our `start` and `end` just can't be out of\n        // bounds.\n        return buffer.hexSlice(start, end);\n    };\n}\nelse {\n    stringify = (buffer, start, end) => {\n        return buffer.slice(start, end).toString(\"hex\");\n    };\n}\n/**\n * Trims leading 0s from a buffer and returns a key representing the buffer's\n * trimmed value (`Buffer.from([0, 0, 12, 0])` => `1200`).\n *\n * @param buffer -\n */\nfunction bufferToMinHexKey(buffer) {\n    for (let i = 0, length = buffer.byteLength; i < length; i++) {\n        const value = buffer[i];\n        // once we find a non-zero value take the rest of the buffer as the key\n        if (value !== 0) {\n            if (i + 1 === length) {\n                // use a lookup table for single character lookups\n                return HEX_MAP[value];\n            }\n            else {\n                return stringify(buffer, i, length);\n            }\n        }\n    }\n    return \"\";\n}\nexports.bufferToMinHexKey = bufferToMinHexKey;\nconst HEX_MAP = [\n    \"00\",\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"0a\",\n    \"0b\",\n    \"0c\",\n    \"0d\",\n    \"0e\",\n    \"0f\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\",\n    \"1a\",\n    \"1b\",\n    \"1c\",\n    \"1d\",\n    \"1e\",\n    \"1f\",\n    \"20\",\n    \"21\",\n    \"22\",\n    \"23\",\n    \"24\",\n    \"25\",\n    \"26\",\n    \"27\",\n    \"28\",\n    \"29\",\n    \"2a\",\n    \"2b\",\n    \"2c\",\n    \"2d\",\n    \"2e\",\n    \"2f\",\n    \"30\",\n    \"31\",\n    \"32\",\n    \"33\",\n    \"34\",\n    \"35\",\n    \"36\",\n    \"37\",\n    \"38\",\n    \"39\",\n    \"3a\",\n    \"3b\",\n    \"3c\",\n    \"3d\",\n    \"3e\",\n    \"3f\",\n    \"40\",\n    \"41\",\n    \"42\",\n    \"43\",\n    \"44\",\n    \"45\",\n    \"46\",\n    \"47\",\n    \"48\",\n    \"49\",\n    \"4a\",\n    \"4b\",\n    \"4c\",\n    \"4d\",\n    \"4e\",\n    \"4f\",\n    \"50\",\n    \"51\",\n    \"52\",\n    \"53\",\n    \"54\",\n    \"55\",\n    \"56\",\n    \"57\",\n    \"58\",\n    \"59\",\n    \"5a\",\n    \"5b\",\n    \"5c\",\n    \"5d\",\n    \"5e\",\n    \"5f\",\n    \"60\",\n    \"61\",\n    \"62\",\n    \"63\",\n    \"64\",\n    \"65\",\n    \"66\",\n    \"67\",\n    \"68\",\n    \"69\",\n    \"6a\",\n    \"6b\",\n    \"6c\",\n    \"6d\",\n    \"6e\",\n    \"6f\",\n    \"70\",\n    \"71\",\n    \"72\",\n    \"73\",\n    \"74\",\n    \"75\",\n    \"76\",\n    \"77\",\n    \"78\",\n    \"79\",\n    \"7a\",\n    \"7b\",\n    \"7c\",\n    \"7d\",\n    \"7e\",\n    \"7f\",\n    \"80\",\n    \"81\",\n    \"82\",\n    \"83\",\n    \"84\",\n    \"85\",\n    \"86\",\n    \"87\",\n    \"88\",\n    \"89\",\n    \"8a\",\n    \"8b\",\n    \"8c\",\n    \"8d\",\n    \"8e\",\n    \"8f\",\n    \"90\",\n    \"91\",\n    \"92\",\n    \"93\",\n    \"94\",\n    \"95\",\n    \"96\",\n    \"97\",\n    \"98\",\n    \"99\",\n    \"9a\",\n    \"9b\",\n    \"9c\",\n    \"9d\",\n    \"9e\",\n    \"9f\",\n    \"a0\",\n    \"a1\",\n    \"a2\",\n    \"a3\",\n    \"a4\",\n    \"a5\",\n    \"a6\",\n    \"a7\",\n    \"a8\",\n    \"a9\",\n    \"aa\",\n    \"ab\",\n    \"ac\",\n    \"ad\",\n    \"ae\",\n    \"af\",\n    \"b0\",\n    \"b1\",\n    \"b2\",\n    \"b3\",\n    \"b4\",\n    \"b5\",\n    \"b6\",\n    \"b7\",\n    \"b8\",\n    \"b9\",\n    \"ba\",\n    \"bb\",\n    \"bc\",\n    \"bd\",\n    \"be\",\n    \"bf\",\n    \"c0\",\n    \"c1\",\n    \"c2\",\n    \"c3\",\n    \"c4\",\n    \"c5\",\n    \"c6\",\n    \"c7\",\n    \"c8\",\n    \"c9\",\n    \"ca\",\n    \"cb\",\n    \"cc\",\n    \"cd\",\n    \"ce\",\n    \"cf\",\n    \"d0\",\n    \"d1\",\n    \"d2\",\n    \"d3\",\n    \"d4\",\n    \"d5\",\n    \"d6\",\n    \"d7\",\n    \"d8\",\n    \"d9\",\n    \"da\",\n    \"db\",\n    \"dc\",\n    \"dd\",\n    \"de\",\n    \"df\",\n    \"e0\",\n    \"e1\",\n    \"e2\",\n    \"e3\",\n    \"e4\",\n    \"e5\",\n    \"e6\",\n    \"e7\",\n    \"e8\",\n    \"e9\",\n    \"ea\",\n    \"eb\",\n    \"ec\",\n    \"ed\",\n    \"ee\",\n    \"ef\",\n    \"f0\",\n    \"f1\",\n    \"f2\",\n    \"f3\",\n    \"f4\",\n    \"f5\",\n    \"f6\",\n    \"f7\",\n    \"f8\",\n    \"f9\",\n    \"fa\",\n    \"fb\",\n    \"fc\",\n    \"fd\",\n    \"fe\",\n    \"ff\"\n];\n//# sourceMappingURL=buffer-to-key.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KNOWN_CHAINIDS = exports.WEI = exports.RPCQUANTITY_GWEI = exports.RPCQUANTITY_ONE = exports.RPCQUANTITY_ZERO = exports.RPCQUANTITY_EMPTY = exports.DATA_EMPTY = exports.BUFFER_8_ZERO = exports.BUFFER_32_ZERO = exports.BUFFER_ZERO = exports.BUFFER_EMPTY = exports.ACCOUNT_ZERO = exports.BUFFER_256_ZERO = void 0;\nconst json_rpc_data_1 = require(\"../things/json-rpc/json-rpc-data\");\nconst json_rpc_quantity_1 = require(\"../things/json-rpc/json-rpc-quantity\");\nexports.BUFFER_256_ZERO = Buffer.allocUnsafe(256).fill(0);\nexports.ACCOUNT_ZERO = exports.BUFFER_256_ZERO.slice(0, 20);\nexports.BUFFER_EMPTY = Buffer.allocUnsafe(0);\nexports.BUFFER_ZERO = exports.BUFFER_256_ZERO.slice(0, 1);\nexports.BUFFER_32_ZERO = exports.BUFFER_256_ZERO.slice(0, 32);\nexports.BUFFER_8_ZERO = exports.BUFFER_256_ZERO.slice(0, 8);\nexports.DATA_EMPTY = json_rpc_data_1.Data.from(exports.BUFFER_EMPTY);\nexports.RPCQUANTITY_EMPTY = json_rpc_quantity_1.Quantity.from(exports.BUFFER_EMPTY, true);\nexports.RPCQUANTITY_ZERO = json_rpc_quantity_1.Quantity.from(exports.BUFFER_ZERO);\nexports.RPCQUANTITY_ONE = json_rpc_quantity_1.Quantity.from(1n);\nexports.RPCQUANTITY_GWEI = json_rpc_quantity_1.Quantity.from(1000000000);\nexports.WEI = 1000000000000000000n;\nexports.KNOWN_CHAINIDS = new Set([1, 3, 4, 5, 42]);\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Executor_requestCoordinator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Executor = void 0;\nconst has_own_1 = require(\"./has-own\");\nclass Executor {\n    /**\n     * The Executor handles execution of methods on the given API\n     */\n    constructor(requestCoordinator) {\n        _Executor_requestCoordinator.set(this, void 0);\n        __classPrivateFieldSet(this, _Executor_requestCoordinator, requestCoordinator, \"f\");\n    }\n    /**\n     * Executes the method with the given methodName on the API\n     * @param methodName - The name of the JSON-RPC method to execute.\n     * @param params - The params to pass to the JSON-RPC method.\n     */\n    execute(api, methodName, params) {\n        // The methodName is user-entered data and can be all sorts of weird hackery\n        // Make sure we only accept what we expect to avoid headache and heartache\n        if (typeof methodName === \"string\") {\n            // Only allow executing our *own* methods. We allow:\n            //  * functions added to the Instance by the class, e.g.,\n            //      class SomeClass {\n            //        method = () => {} // api.hasOwnProperty(\"method\") === true\n            //      }\n            //  * Or by the class' prototype:\n            //      class SomeClass {\n            //        method(){} // api.__proto__.hasOwnProperty(\"method\") === true\n            //      }\n            if (((0, has_own_1.hasOwn)(api.__proto__, methodName) && methodName !== \"constructor\") ||\n                (0, has_own_1.hasOwn)(api, methodName)) {\n                // cast methodName from `KnownKeys<T> & string` back to KnownKeys<T> so our return type isn't weird.\n                const fn = api[methodName];\n                // just double check, in case a API breaks the rules and adds non-fns\n                // to their API interface.\n                if (typeof fn === \"function\") {\n                    // queue up this method for actual execution:\n                    return __classPrivateFieldGet(this, _Executor_requestCoordinator, \"f\").queue(fn, api, params);\n                }\n            }\n        }\n        throw new Error(`The method ${methodName} does not exist/is not available`);\n    }\n}\nexports.Executor = Executor;\n_Executor_requestCoordinator = new WeakMap();\n//# sourceMappingURL=executor.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findInsertPosition = void 0;\n/**\n * AKA `upper_bound`\n *\n * The elements are compared using `comp`. The elements in the range must\n * already be sorted according to this same criterion (`comp`), or at least\n * partitioned with respect to val.\n *\n * The function optimizes the number of comparisons performed by comparing\n * non-consecutive elements of the sorted range.\n *\n * The index into the `array` returned by this function will always be greater than\n * the index of the last-occurrence of `val`.\n *\n * On average, logarithmic in the distance of the length of the array: Performs\n * approximately `log2(N)+1` element comparisons (where `N` is this length).\n *\n * @param array -\n * @param val - Value of the upper bound to search for in the range.\n * @param comp - A function that accepts two arguments (the first is always\n * `val`, and the second from the given `array`) and returns bool. The value\n * returned indicates whether the first argument is considered to go before the\n * second.\n *\n * @returns The index to the upper bound position for `val` in the range. If no\n * element in the range compares greater than `val`, the function returns\n * `array.length`.\n */\nfunction findInsertPosition(array, val, comp) {\n    // `count` tracks the number of elements that remain to be searched\n    let count = array.length;\n    // `insertPosition` tracks the best insert position for the element we know\n    // about _so far_\n    let insertPosition = 0;\n    // `offset` tracks the start position of the elements that remain to be\n    // searched\n    let offset = 0;\n    while (count > 0) {\n        // find the middle element between `offset` and `count`\n        const step = (count / 2) | 0; // ()`| 0` rounds towards 0)\n        offset += step;\n        // compare our val to the \"middle element\" (`array[offset]`)\n        if (!comp(val, array[offset])) {\n            // `val` should come _after_ the element at `array[offset]`.\n            //  * update our `insertPosition` to the index immediately after\n            //    `array[offset]`\n            //  * shrink our search range\n            // This narrows our search the elements to the right of `array[offset]`.\n            insertPosition = ++offset;\n            count -= step + 1;\n        }\n        else {\n            // `val` should come before the element at `array[offset]`:\n            // This narrows the search the elements to the left of `array[offset]`.\n            count = step;\n            offset = insertPosition;\n        }\n    }\n    return insertPosition;\n}\nexports.findInsertPosition = findInsertPosition;\n//# sourceMappingURL=find-insert-position.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasOwn = void 0;\nconst _hasOwn = {}.hasOwnProperty.call.bind({}.hasOwnProperty);\n/**\n * /**\n * Determines whether an object has a property with the specified name.\n *\n * Safe for use on user-supplied data.\n *\n * @param obj - The object that will be checked.\n * @param v - A property name.\n * @returns `true` if the object has a property with the specified name,\n * otherwise false.\n */\nconst hasOwn = (obj, prop) => {\n    return obj != null && _hasOwn(obj, prop);\n};\nexports.hasOwn = hasOwn;\n//# sourceMappingURL=has-own.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Heap = void 0;\nclass Heap {\n    /**\n     * Creates a priority-queue heap where the highest priority element,\n     * as determined by the `less` function, is at the tip/root of the heap.\n     * To read the highest priority element without removing it call peek(). To\n     * read and remove the element call `shift()`\n     * @param less - the comparator function\n     * @param refresher - the refresher function\n     */\n    constructor(less, refresher) {\n        this.length = 0;\n        this.array = [];\n        this.less = less;\n        this.refresher = refresher;\n    }\n    init(array) {\n        this.array = array;\n        const length = (this.length = array.length);\n        for (let i = ((length / 2) | 0) - 1; i >= 0;) {\n            this.down(i--, length);\n        }\n    }\n    /**\n     * Updates all entries by calling the Heap's `refresher` function for each\n     * item in the heap and then re-sorting.\n     * @param context -\n     */\n    /**\n     * Updates all entries by calling the Heap's `refresher` function for each\n     * item in the heap and then re-sorting.\n     * @param context -\n     */\n    refresh(context) {\n        const length = this.length;\n        const mid = (length / 2) | 0;\n        for (let i = mid; i < length; i++) {\n            this.refresher(this.array[i], context);\n        }\n        for (let i = mid - 1; i >= 0;) {\n            this.refresher(this.array[i], context);\n            this.down(i--, length);\n        }\n    }\n    /**\n     * Pushes a new element onto the heap\n     * @param value -\n     */\n    push(value) {\n        const i = this.length++;\n        this.array[i] = value;\n        this.up(i);\n    }\n    size() {\n        return this.length;\n    }\n    /**\n     * Return the current best element. Does not remove it\n     */\n    peek() {\n        return this.array[0];\n    }\n    clear() {\n        this.length = this.array.length = 0;\n    }\n    /**\n     * Removes and returns the element with the highest priority from the heap.\n     * The complexity is O(log n) where n = this.size().\n     * @returns the element with the highest priority. returns `undefined` if\n     * there are no more elements in the heap.\n     */\n    shift() {\n        const length = this.length;\n        // if we are empty or about to be empty...\n        if (length <= 1) {\n            if (length === 0)\n                return;\n            const element = this.array[0];\n            // finally, clear the array\n            this.clear();\n            return element;\n        }\n        // otherwise...\n        // remember the best element\n        const array = this.array;\n        const best = array[0];\n        const newLength = (this.length = length - 1);\n        // put our last element at the start of the heap\n        array[0] = array[newLength];\n        // then sort from the new first element to the second to last element\n        this.down(0, newLength);\n        return best;\n    }\n    /**\n     * Removes the highest priority element from the queue, replacing it with\n     * the new element. This is equivalent to, but faster than, calling\n     * `replace(0, newValue);`.\n     * If you call this on an empty heap (`this.size() === 0`) you may find\n     * unexpected behavior.\n     * @param newValue -\n     */\n    replaceBest(newValue) {\n        this.array[0] = newValue;\n        this.down(0, this.length);\n    }\n    /**\n     * Replaces the element at position `i` with the `newValue`. If the element at\n     * position `i` doesn't exist, or if `i < 0` or `i > this.size()` you may\n     * find unexpected behavior.\n     * @param i -\n     * @param newValue -\n     */\n    replace(i, newValue) {\n        this.array[i] = newValue;\n        this.fix(i);\n    }\n    /**\n     * Removes the element at position `i`.\n     * The complexity is O(log n) where n = this.size().\n     * @param i - the element to remove\n     */\n    remove(i) {\n        const newLength = --this.length;\n        if (newLength !== i) {\n            this.swap(i, newLength);\n            if (!this.down(i, newLength)) {\n                this.up(i);\n            }\n        }\n    }\n    /**\n     * Removes the element with the highest priority from the heap\n     * The complexity is O(log n) where n = this.size().\n     * @returns `true` when there are more elements in the queue, `false` when the\n     * last element was just removed. Calling `removeBest` when there are no more\n     * elements in the queue will return `true`. So don't do that.\n     */\n    removeBest() {\n        const array = this.array;\n        const length = this.length;\n        if (length === 1) {\n            // finally, clear the array\n            this.length = array.length = 0;\n            return false;\n        }\n        const newLength = --this.length;\n        // put our last element at the start of the heap\n        array[0] = array[newLength];\n        // then sort from the new first element to the second to last element\n        this.down(0, newLength);\n        return true;\n    }\n    /**\n     * Re-establishes the heap ordering after the element at index `i` changes\n     * its value. Changing the value of the element at index `i` and then\n     * calling fix is equivalent to, but faster than, calling\n     * `remove(i); push(newValue);`.\n     * The complexity is O(log n) where n = this.size().\n     * @param i -\n     */\n    fix(i) {\n        if (!this.down(i, this.length)) {\n            this.up(i);\n        }\n    }\n    up(j) {\n        const less = this.less.bind(null, this.array);\n        for (let i; (i = ((j - 1) / 2) | 0), i !== j && less(j, i); j = i) {\n            this.swap(i, j);\n        }\n    }\n    down(i0, l) {\n        const less = this.less.bind(null, this.array);\n        let i = i0;\n        for (let j1; (j1 = 2 * i + 1) < l;) {\n            let j = j1; // left child\n            let j2 = j1 + 1;\n            if (j2 < l && less(j2, j1)) {\n                j = j2; // = 2 * i + 2  // right child\n            }\n            if (!less(j, i)) {\n                break;\n            }\n            this.swap(i, j);\n            i = j;\n        }\n        return i > i0;\n    }\n    /**\n     * Swaps the elements in the heap\n     * @param i - The first element\n     * @param j - The second element\n     */\n    swap(i, j) {\n        const array = this.array;\n        const first = array[i];\n        array[i] = array[j];\n        array[j] = first;\n    }\n    /**\n     * Heap initialization helper for when you only know of a single item for the\n     * heap.\n     * @param item -\n     * @param less -\n     * @param refresher -\n     */\n    static from(item, less, refresher) {\n        const heap = new Heap(less, refresher);\n        heap.array = [item];\n        heap.length = 1;\n        return heap;\n    }\n}\nexports.Heap = Heap;\n//# sourceMappingURL=heap.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./bigint-to-buffer\"), exports);\n__exportStar(require(\"./buffer-to-bigint\"), exports);\n__exportStar(require(\"./executor\"), exports);\n__exportStar(require(\"./heap\"), exports);\n__exportStar(require(\"./request-coordinator\"), exports);\n__exportStar(require(\"./unref\"), exports);\n__exportStar(require(\"./has-own\"), exports);\n__exportStar(require(\"./uint-to-buffer\"), exports);\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./buffer-to-key\"), exports);\n__exportStar(require(\"./keccak\"), exports);\n__exportStar(require(\"./find-insert-position\"), exports);\n__exportStar(require(\"./random-number-generator\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keccak = void 0;\nconst keccak_1 = __importDefault(require(\"keccak\"));\nconst RATE = 1088;\nconst CAPACITY = 512;\nconst instance = (0, keccak_1.default)(\"keccak256\");\n/**\n * keccak256, but faster if you use it a lot.\n * @param buffer -\n */\nfunction keccak(buffer) {\n    instance._state.absorb(buffer);\n    const digest = instance._state.squeeze(32);\n    // reset and remove result from memory\n    instance._state.initialize(RATE, CAPACITY);\n    // make this re-usable\n    instance._finalized = false;\n    return digest;\n}\nexports.keccak = keccak;\n//# sourceMappingURL=keccak.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RandomNumberGenerator = void 0;\nconst seedrandom_1 = __importDefault(require(\"seedrandom\"));\nclass RandomNumberGenerator {\n    // I was planning on using `state` here to restore the RNG\n    // from a saved state (via the db on run or upon a revert),\n    // but this functionality was postponed. I'm keeping the arg\n    // here as it still applies and is valid code.\n    // https://github.com/trufflesuite/ganache/issues/756\n    constructor(seed, state) {\n        if (typeof seed === \"string\" && typeof state === \"undefined\") {\n            this.rng = seedrandom_1.default.alea(seed, { state: true });\n        }\n        else if (typeof state === \"object\") {\n            // We can ignore seed even if it was provided.\n            // The user is reseeding the rng from a prior state,\n            // so let's initialize accordingly\n            this.rng = seedrandom_1.default.alea(\"\", { state });\n        }\n        else {\n            const entropy = Math.random() * Date.now();\n            this.rng = seedrandom_1.default.alea(`${entropy}`, { state: true });\n        }\n    }\n    getNumber(upperExclusiveBound = 1) {\n        // I believe this check may be a tiny bit faster than\n        // always multiplying by 1\n        if (upperExclusiveBound !== 1) {\n            return this.rng() * upperExclusiveBound;\n        }\n        else {\n            return this.rng();\n        }\n    }\n    getNumbers(length, upperExclusiveBound = 1) {\n        const numbers = [];\n        for (let i = 0; i < length; i++) {\n            numbers.push(this.getNumber(upperExclusiveBound));\n        }\n        return numbers;\n    }\n    getBuffer(length) {\n        return Buffer.from(this.getNumbers(length, 256));\n    }\n    state() {\n        return this.rng.state();\n    }\n}\nexports.RandomNumberGenerator = RandomNumberGenerator;\n//# sourceMappingURL=random-number-generator.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _RequestCoordinator_paused, _RequestCoordinator_process;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestCoordinator = void 0;\nconst noop = () => { };\n/**\n * Responsible for managing global concurrent requests.\n */\nclass RequestCoordinator {\n    /**\n     * Promise-based FIFO queue.\n     * @param limit - The number of requests that can be processed at a time.\n     * Default value is is no limit (`0`).\n     */\n    constructor(limit) {\n        /**\n         * The pending requests. You can't do anything with this array.\n         */\n        this.pending = [];\n        /**\n         * The number of tasks currently being processed.\n         */\n        this.runningTasks = 0;\n        _RequestCoordinator_paused.set(this, true);\n        /**\n         * Pause processing. This will *not* cancel any promises that are currently\n         * running.\n         */\n        this.pause = () => {\n            __classPrivateFieldSet(this, _RequestCoordinator_paused, true, \"f\");\n        };\n        /**\n         * Resume processing.\n         */\n        this.resume = () => {\n            __classPrivateFieldSet(this, _RequestCoordinator_paused, false, \"f\");\n            __classPrivateFieldGet(this, _RequestCoordinator_process, \"f\").call(this);\n        };\n        _RequestCoordinator_process.set(this, () => {\n            // if we aren't paused and the number of things we're processing is under\n            // our limit and we have things to process: do it!\n            while (!this.paused &&\n                this.pending.length > 0 &&\n                (!this.limit || this.runningTasks < this.limit)) {\n                const current = this.pending.shift();\n                this.runningTasks++;\n                current()\n                    // By now, we've resolved the fn's `value` by sending it to the parent scope.\n                    // But over here, we're also waiting for this fn's _value_ to settle _itself_ (it might be a promise) before\n                    // continuing through the `pending` queue. Because we wait for it again here, it could potentially throw here,\n                    // in which case we just need to catch it and throw the result away. We could probably use\n                    // `Promise.allSettled([current()]).finally` to do this instead of the `current().catch(noop).finally`. /shrug\n                    .catch(noop)\n                    .finally(() => {\n                    this.runningTasks--;\n                    __classPrivateFieldGet(this, _RequestCoordinator_process, \"f\").call(this);\n                });\n            }\n        });\n        /**\n         * Insert a new function into the queue.\n         */\n        this.queue = (fn, thisArgument, argumentsList) => {\n            return new Promise((resolve, reject) => {\n                // const executor is `async` to force the return value into a Promise.\n                const executor = async () => {\n                    try {\n                        const value = Reflect.apply(fn, thisArgument, argumentsList || []);\n                        resolve({ value });\n                        return value;\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                };\n                this.pending.push(executor);\n                __classPrivateFieldGet(this, _RequestCoordinator_process, \"f\").call(this);\n            });\n        };\n        this.limit = limit;\n    }\n    get paused() {\n        return __classPrivateFieldGet(this, _RequestCoordinator_paused, \"f\");\n    }\n}\nexports.RequestCoordinator = RequestCoordinator;\n_RequestCoordinator_paused = new WeakMap(), _RequestCoordinator_process = new WeakMap();\n//# sourceMappingURL=request-coordinator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uintToBuffer = void 0;\nconst MAX_UINT32 = 0xffffffff;\n/**\n * This is just Node's `Buffer.allocUnsafe`. I'm documenting it extra here to\n * draw attention to it. It is much faster the `Buffer.alloc(size)` because it\n * doesn't initialize its memory first. It's safe for us to use below because we\n * guarantee that we will fill every octet ourselves.\n *\n * Allocates a new buffer of {size} octets, leaving memory not initialized, so\n * the contents of the newly created Buffer are unknown and may contain\n * sensitive data.\n *\n * @param {number} - size count of octets to allocate\n */\nconst allocUnsafe = Buffer.allocUnsafe;\n/**\n * Converts positive whole numbers that are 32 bits of fewer to a Buffer. Any\n * more bits and who knows what will happen!?!1?!\n *\n * @param num - A positive whole number less than 33 bits wide, i.e. a uint32.\n * @returns an optimally sized buffer holding `num` in big-endian order (LSB is\n * the _last_ value in the Buffer)\n */\nfunction uint32ToBuf(num) {\n    let buf;\n    /** `lsb` holds the Least Significant *byte* of `num`. It *technically* holds\n     * all of `num`'s bytes but because of how UInt8Arrays (and thus Buffers)\n     * work, only the least significant byte of each value gets used. */\n    const lsb = num;\n    // shift the first 8 least signficant bits off current num, if it's non-zero\n    // our value contains at least 2 bytes!\n    if ((num >>>= 8)) {\n        /** `second` now holds the second most least significant byte in its\n         * \"first\" (right most) 8 bits */\n        const second = num;\n        // shift the next 8 least signficant bits off current num, if it's non-zero\n        // our value contains at least 3 bytes!\n        if ((num >>>= 8)) {\n            /** `third` now holds the third most least significant byte in its\n             * \"first\" (right most) 8 bits */\n            const third = num;\n            if ((num >>>= 8)) {\n                // since we have all 4 bytes, create a 4 byte Buffer and fill it with\n                // our values!\n                buf = allocUnsafe(4);\n                // `num` here is just what is left after shifting off the 3 other bytes\n                // like we did above\n                buf[0] = num;\n                buf[1] = third;\n                buf[2] = second;\n                buf[3] = lsb;\n            }\n            else {\n                // since we only have 3 bytes, create a 3 byte Buffer and fill it with\n                // our values!\n                buf = allocUnsafe(3);\n                buf[0] = third;\n                buf[1] = second;\n                buf[2] = lsb;\n            }\n        }\n        else {\n            // since we only have 2 bytes, create a 2 byte Buffer and fill it with\n            // our values!\n            buf = allocUnsafe(2);\n            buf[0] = second;\n            buf[1] = lsb;\n        }\n    }\n    else {\n        // We only have 1 byte, create a 1 byte Buffer and fill it with our only\n        // value, lsb!\n        buf = allocUnsafe(1);\n        buf[0] = lsb;\n    }\n    // finally, return our optimally-sized Buffer!\n    return buf;\n}\n/**\n * Converts positive whole numbers less than or equal to\n * `Number.MAX_SAFE_INTEGER` to a Buffer. If your value is less than 2**32 you\n * should use `uint32ToBuf` instead.\n *\n * @param num - A positive whole number <= `Number.MAX_SAFE_INTEGER`\n * @returns an optimally sized buffer holding `num` in big-endian order (LSB is\n * the _last_ value in the Buffer)\n */\nfunction uintWideToBuf(num) {\n    // This function is similar to `uint32ToBuf`, but splits the number into its\n    // 32 lowest bits and its 32 highest bits. We have to do this because numeric\n    // Bitwise operations can only operate on 32 bit-wide values.\n    // There are some differences, but if you first grasp `uint32ToBuf`, you can\n    // handle this just fine.\n    let buf;\n    /** If we are in this function we are probably > 32 bits wide, so we need to\n     * first convert this value to BigInt in order to shift off those high bits.\n     * Now that I'm documenting this, we could probably just subtract `2**32` from\n     * `num` to avoid the conversion overhead (BigInts are slower than numbers) */\n    let hi = Number(BigInt(num) >> 32n);\n    const hiLsb = hi;\n    let offset = 0;\n    // the high bits determine the size of the Buffer, so we compute the high bits\n    // first\n    if ((hi >>>= 8)) {\n        const six = hi;\n        if ((hi >>>= 8)) {\n            const five = hi;\n            if ((hi >>>= 8)) {\n                buf = allocUnsafe(8);\n                buf[0] = hi; // msb\n                buf[1] = five;\n                buf[2] = six;\n                buf[3] = hiLsb;\n                offset = 7;\n            }\n            else {\n                buf = allocUnsafe(7);\n                buf[0] = five; // msb\n                buf[1] = six;\n                buf[2] = hiLsb;\n                offset = 6;\n            }\n        }\n        else {\n            buf = allocUnsafe(6);\n            buf[0] = six; // msb\n            buf[1] = hiLsb;\n            offset = 5;\n        }\n    }\n    else {\n        buf = allocUnsafe(5);\n        buf[0] = hiLsb; // msb\n        offset = 4;\n    }\n    // set the low bytes:\n    let lo = num & MAX_UINT32;\n    const lsb = lo;\n    if ((lo >>>= 8)) {\n        const two = lo;\n        if ((lo >>>= 8)) {\n            const one = lo;\n            buf[offset - 3] = lo >>>= 8;\n            buf[offset - 2] = one;\n            buf[offset - 1] = two;\n            buf[offset] = lsb;\n        }\n        else {\n            buf[offset - 3] = 0;\n            buf[offset - 2] = 0;\n            buf[offset - 1] = two;\n            buf[offset] = lsb;\n        }\n    }\n    else {\n        buf[offset - 3] = 0;\n        buf[offset - 2] = 0;\n        buf[offset - 1] = 0;\n        buf[offset] = lsb;\n    }\n    return buf;\n}\n/**\n * Converts a JavaScript number, treated as a Whole Number (0, 1, 2, 3, 4, ...)\n * less than 64 bits wide, to a Buffer.\n *\n * Numbers that are negative, fractional, or greater than 64 bits wide will\n * return very unexpected results. Numbers that are greater than\n * `Number.MAX_SAFE_INTEGER` will return unexpected results.\n *\n * @param num - A positive whole number <= `Number.MAX_SAFE_INTEGER`\n */\nfunction uintToBuffer(num) {\n    return num > MAX_UINT32 ? uintWideToBuf(num) : uint32ToBuf(num);\n}\nexports.uintToBuffer = uintToBuffer;\n//# sourceMappingURL=uint-to-buffer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unref = void 0;\n/**\n * In node, calling `unref(timer)` on a running timer ensures that the timer\n * does not require that the Node.js event remain active. If there is no other\n * activity keeping the event loop running, the process may exit before the\n * timer's callback is invoked.\n * @param timer -\n * @returns `true` if the timer could be `unref`ed, otherwise returns `false`\n */\nfunction unref(timer) {\n    if (typeof timer === \"object\" && typeof timer.unref === \"function\") {\n        timer.unref();\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexports.unref = unref;\n//# sourceMappingURL=unref.js.map"],"names":["Object","defineProperty","exports","value","Address","utils_1","Data","constructor","super","ByteLength","static","__createBinding","this","create","o","m","k","k2","undefined","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","BlockParams","INITIAL_BASE_FEE_PER_GAS","ELASTICITY","BASE_FEE_MAX_CHANGE_DENOMINATOR","Block","ethereum_transaction_1","rlp_1","runtime_block_1","utils_2","block_params_1","serialized","common","_common","deserialized","decode","_raw","_rawTransactions","totalDifficulty","header","makeHeader","_rawTransactionMetaData","_size","Quantity","from","toNumber","hash","_hash","keccak","encode","getTransactions","map","raw","index","extra","toBuffer","number","TransactionFactory","fromDatabaseTx","toJSON","includeFullTransactions","txFn","getTxFn","hashBuffer","jsonTxs","tx","updateEffectiveGasPrice","baseFeePerGas","size","transactions","uncles","include","rawHeader","txs","extraTxs","block","parentHeader","nextBaseFee","parentGasTarget","gasLimit","toBigInt","parentGasUsed","gasUsed","adjustedFeeDelta","blocks","maxPossibleBaseFee","calcNextBaseFeeBigInt","parentBlock","RuntimeBlock","getBlockSize","ethereumjs_util_1","serialize_1","block_1","BnExtra","BN","buf","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","timestamp","extraData","mixHash","nonce","length","coinbase","previousBlockTotalDifficulty","serializeBaseFeePerGas","ts","coinbaseBuffer","BUFFER_ZERO","finalize","transactionsTrie","receiptTrie","bloom","storageKeys","KECCAK256_RLP_ARRAY","BUFFER_EMPTY","BUFFER_32_ZERO","BUFFER_8_ZERO","forEach","push","serialize","serializedStart","encodeRange","serializedLength","encodeLength","middle","ending","uintToBuffer","digest","output","_EthereumApi_getId","_EthereumApi_filters","_EthereumApi_subscriptions","_EthereumApi_options","_EthereumApi_blockchain","_EthereumApi_wallet","__decorate","decorators","target","key","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","i","__classPrivateFieldSet","receiver","state","kind","f","TypeError","has","set","__classPrivateFieldGet","__importDefault","mod","__esModule","ethereum_utils_1","ethereum_block_1","eth_sig_util_1","wallet_1","gas_estimator_1","assert_arg_length_1","filter_parsing_1","ethereum_address_1","miner_1","async","autofillDefaultTransactionValues","eth_estimateGas","eth_maxPriorityFeePerGas","transaction","blockchain","options","gas","isNull","defaultLimit","defaultTransactionGasLimit","RPCQUANTITY_EMPTY","Tag","latest","gasPrice","defaultGasPrice","maxFeePerGas","calcNBlocksMaxBaseFee","maxPriorityFeePerGas","PROTOCOL_VERSION","RPC_MODULES","eth","net","rpc","web3","evm","personal","assertExceptionalTransactions","errors","baseError","data","execException","VM_EXCEPTIONS","toString","VM_EXCEPTION","message","err","Error","join","EthereumApi","wallet","id","Map","dbName","arg","vmErrorsOnRPCResponse","chain","strictMiner","instamine","blockNumber","mine","Capacity","FillBlock","Promise","resolve","off","on","equals","address","buffer","stateManager","vm","account","getAccount","toArrayLike","putAccount","Empty","seconds","milliseconds","Math","floor","increaseTime","time","t","getTime","setTime","snapshotId","revert","snapshot","passphrase","addy","addUnknownAccount","removeKnownAccount","threads","resumption","resume","pause","bytes","networkId","RPCQUANTITY_ZERO","generateVM","copy","reject","fromRpc","callGasLimit","runArgs","toVmTransaction","skipBalance","skipNonce","default","result","gasEstimate","Buffer","catch","_","getByHash","blockNum","getEffectiveNumber","rawBlock","getRawByBlockNumber","rawTransactions","getNumberFromHash","parseInt","uncleIndex","filterId","powHash","hashRate","clientID","isStarted","RPCQUANTITY_GWEI","addresses","chainId","accounts","getBalance","getCode","position","blockStateRoot","trie","setContext","posBuff","paddedPosBuff","allocUnsafe","fill","slice","addressBuf","addressData","addressStateRoot","transactionHash","transactionPool","find","transactionReceipts","dataHash","txHash","transactionPromise","receiptPromise","blockPromise","then","receipt","all","blockTime","logging","logger","log","fromString","isKnownAccount","knownAccounts","privateKey","unlockedAccounts","bind","queueTransaction","signAndHash","toLowerCase","messageHash","hashPersonalMessage","v","s","ecsign","toRpcSig","typedData","eth_signTypedData_v4","types","EIP712Domain","domain","primaryType","signTypedData_v4","eth_subscribe","subscriptionName","subscriptions","subscription","promiEvent","PromiEvent","unsubscribe","emit","type","JSON","parse","stringify","topics","parseFilterDetails","blockLogs","filter","CodedError","JsonRpcErrorCode","METHOD_NOT_FOUND","subscriptionId","delete","updates","FilterTypes","pendingTransaction","fromBlock","toBlock","parseFilterRange","eth_getLogs","getLogs","getNonce","input","baseFeePerGasBigInt","hasGasPrice","isActivatedEIP","hasMaxFeePerGas","hasMaxPriorityFeePerGas","BigInt","a","tip","simulatedTransaction","to","simulateTransaction","traceTransaction","blockHash","transactionIndex","contractAddress","startKey","maxResult","storageRangeAt","newAccount","createRandomAccount","strAddress","addToKeyFile","add","rawKey","createAccountFromPrivateKey","lockAccount","duration","unlockAccount","secretKey","getFromKeyFile","postData","processMap","res","arr","array","pending","executables","queued","origins","WeakMap","assertArgLength","_Blockchain_state","_Blockchain_miner","_Blockchain_blockBeingSavedPromise","_Blockchain_timer","_Blockchain_emitStepEvent","_Blockchain_database","_Blockchain_options","_Blockchain_instamine","_Blockchain_saveNewBlock","_Blockchain_emitNewBlock","_Blockchain_getTransactionLogOutput","_Blockchain_handleNewBlockData","_Blockchain_readyNextBlock","_Blockchain_isPaused","_Blockchain_commitAccounts","_Blockchain_initializeGenesisBlock","_Blockchain_timeAdjustment","_Blockchain_currentTime","_Blockchain_deleteBlockData","_Blockchain_snapshots","_Blockchain_traceTransaction","_Blockchain_prepareNextBlock","__setModuleDefault","__importStar","Status","os_1","database_1","emittery_1","common_1","vm_1","exceptions_1","account_manager_1","block_manager_1","blocklog_manager_1","transaction_manager_1","state_manager_1","index_1","trie_1","trie_2","precompiles_1","transaction_receipt_manager_1","provider_events_1","mcl_wasm_1","mclInitPromise","init","BLS12_381","setMapToMode","IRTF","verifyOrderG1","verifyOrderG2","makeTrie","db","root","fallback","ForkTrie","GanacheTrie","Blockchain","starting","batch","blockHeader","blockNumberQ","BlockLogs","timestampStr","Date","logOutput","serializeForDb","getReceipt","encodedReceipt","append","put","hashedKey","putBlock","updateLatestIndex","EOL","blockInfo","setImmediate","error","str","reason","blockData","previousBlock","previousHeader","previousNumber","blockGasLimit","calcNextBaseFee","started","maxTransactions","onlyOneBlock","nextBlock","paused","createVmFromStateTrie","stateTrie","allowUnlimitedContractSize","activatePrecompile","getBlock","activatePrecompiles","ForkStateManager","DefaultStateManager","_isInitialized","initialAccounts","fallbackBlock","minerOptions","checkpoint","acc","_cache","touchAccount","commit","genesis","KECCAK256_RLP","BUFFER_256_ZERO","rawBlockNumber","now","blocksToDelete","newLatestBlockNumber","revertMetaData","del","snaps","unsubscribeFromBlocks","newBlock","keys","currentDepth","storageStack","getCommonForBlockNumber","storage","structLogs","TraceData","TraceDataFactory","transactionEventContext","stepListener","event","next","makeStepEvent","gasLeft","gasUsedPreviousStep","memory","disableMemory","stack","disableStack","stackItem","structLog","depth","gasCost","op","opcode","name","pc","disableStorage","eventDepth","pop","TraceStorageMap","getContractStorage","flush","l","database","ejsContractAddress","context","runTx","removeListener","returnValue","targetBlock","uncleHeaders","initialize","fork","createCommon","hardfork","forCustomChain","KNOWN_CHAINIDS","comment","blockIndexes","firstBlockTime","earliest","txPool","minerOpts","nullResolved","mineAll","Single","wait","unref","setTimeout","once","clearListeners","e","stopping","stop","_threads","console","snapshots","timeAdjustment","current","rawValue","valueOf","snapshotIndex","Number","clear","currentHash","snapshotBlock","snapshotHeader","snapshotHash","splice","blockPromises","blockList","setStateRootSync","_trie","_storageTries","process","nextTick","status","hasToAddress","toBuf","calculateIntrinsicGas","transactionContext","ganacheStepEvent","caller","warmPrecompiles","addWarmedAddress","fromAccount","iaddn","txCost","balance","isub","runCall","execResult","runState","programCounter","exceptionError","VmError","ERROR","OUT_OF_GAS","CallError","transactionHashBuffer","txIndex","contractAddressBuffer","nextKey","storageTrie","startKeyBuffer","compare","b","createReadStream","findInsertPosition","getStorageKeys","toggleStepEvent","enable","clearTimeout","removeAllListeners","close","stopped","_Connector_provider","_Connector_handle","Connector","Provider","provider_1","bufferify_1","providerOptions","executor","BUFFERIFY_THRESHOLD","payload","connection","method","isHttp","METHOD_NOT_SUPPORTED","params","_requestRaw","provider","PARSE_ERROR","handle","Array","isArray","promises","format","results","makeError","makeResponse","json","bufferify","formatError","disconnect","_AccountManager_blockchain","AccountManager","getRaw","Account","fromBuffer","trieCopy","DATA_EMPTY","codeHash","KECCAK256_NULL","_BlockManager_blockchain","_BlockManager_common","_BlockManager_blockIndexes","manager_1","LATEST_INDEX_KEY","EMPTY_BUFFER","BlockManager","base","fromFallback","tagOrBlockNumber","isValidForkBlockNumber","request","rawFromJSON","bm","updateTaggedBlocks","blockExtra","txExtra","typedTx","toEthRawTransaction","getBlockByTag","tag","numBuf","secondaryKey","latestBlockNumber","createValueStream","limit","stream","_BlockLogManager_blockchain","BlockLogManager","fromJSON","logs","toBlockNumber","parseFilter","pendingLogsPromises","fromBlockNumber","blockLogsRange","filteredBlockLogs","_Manager_Type","_Manager_options","Manager","_TransactionManager_queue","_TransactionManager_paused","_TransactionManager_resumer","_TransactionManager_resolver","_TransactionManager_blockchain","transaction_pool_1","promise_queue_1","TransactionManager","factory","insertion","prepareTransaction","drain","isBusy","_TransactionReceiptManager_blockchain","TransactionReceiptManager","TransactionReceipt","RPCQUANTITY_ONE","cumulativeGasUsed","topic","fromValues","_Database_options","_Database_cleanupDirectory","_Database_closed","_Database_rootStore","_Database_cleanup","tmp_promise_1","levelup_1","leveldown_1","subleveldown_1","encoding_down_1","setGracefulCleanup","tmpOptions","prefix","unsafeCleanup","noop","Database","directory","levelupOptions","keyEncoding","valueEncoding","store","dbPath","dirInfo","dir","path","cleanup","leveldownOpts","open","fn","rootDb","originalPut","originalDel","prom","ret","write","wasClosed","ForkCache","cache_1","_lookupAccount","rlp","fromRlpSerializedAccount","Deferred","deferred","promise","_Fork_abortController","_Fork_handler","_Fork_options","_Fork_accounts","_Fork_hardfork","_Fork_setCommonFromChain","_Fork_setBlockDataFromChainAndOptions","_Fork_syncAccounts","Fork","abort_controller_1","http_handler_1","ws_handler_1","provider_handler_1","persistent_cache_1","url_1","fetchNetworkId","networkIdStr","fetchBlock","chainIdPromise","defaultHardfork","latestBlock","effectiveBlockNumber","max","preLatestConfirmations","isInteger","disableCache","latestBlockNumberHex","latestBlockNumberInt","fetchNonce","forkingOptions","url","network","protocol","WsHandler","signal","HttpHandler","ProviderHandler","normalizedNetwork","infuraKey","URL","cacheProm","deleteCache","PersistentCache","deleteDb","_e","fetchChainId","chainIdHex","cache","initCache","setCache","abort","selectValidForkBlockNumber","hf","hardforks","BaseHandler","rate_limiter_1","lru_cache_1","abortSignal","requestCache","fireForget","Set","requestsPerSecond","userAgent","origin","limiter","WINDOW_SECONDS","valueCache","headers","password","username","isInfura","host","endsWith","setAuthHeaders","setUserHeaders","persistentCache","jwt","authorization","permitMultiAuth","userHeaders","currentScheme","split","incomingScheme","authParams","getFromMemCache","cachedRequest","cachedValue","notFound","send","memCached","diskCached","getFromSlowCache","response","aborted","AbortError","hasOwn","finally","code","JSONRPC_PREFIX","http_1","https_1","base_handler_1","deferred_1","accept","_request","agent","Agent","keepAlive","scheduling","handleLengthedResponse","offset","messageLength","end","handleChunkedResponse","chunk","concat","hostname","port","pathname","search","requestOptions","queueRequest","req","isNaN","resStr","shortStr","msg","startsWith","warn","jsonrpc","strParams","ws_1","inFlightRequests","binaryType","connect","onclose","addEventListener","onmessage","onMessage","messageId","onopen","onerror","parts","totalLength","pieces","part","lengthBuffer","encoded","lengthLength","Ancestry","tree_1","parent","cacheLock","knownAncestors","closestKnownAncestor","resolver","node","Tree","deserialize","strKey","loadNextAncestor","getBlockByNumber","findClosestDescendants","findClosestAncestor","findRelated","resolveTargetAndClosestAncestor","setDbVersion","getBlockNumberFromParams","readStream","values","pair","height","candidateHeight","decodeKey","upTo","generator","gte","lt","encodeKey","reverse","first","return","version","recordedVersion","targetHeight","targetHash","closestAncestor","previousClosestAncestor","earliestBlock","earliestHash","earliestNumber","fs_1","env_paths_1","lexico","ancestry_1","helpers_1","_reBalancePromise","dbSuffix","getDbDirectory","destroy","rs","ancestorDb","tree","collection","keyHex","parentKeyHex","descendants","closestKnownDescendants","suffix","mkdir","recursive","cacheDb","ancestry","atomicBatch","findIndex","allKnownDescendants","ancestorsDescendants","descendantKey","descendantHeight","descendantValue","descendantNode","descendantRawBlock","reBalanceDescendantTree","startSize","maybeDescendant","some","parentTree","isOpen","bufKey","start","gt","hashBuf","_height","_key","dbKey","children","timeSince","LimitCounter","windowLength","counters","evict","lastEvict","updatedAt","increment","currentWindow","previousWindow","curr","prev","semaphore_1","limit_counter_1","sleep","ms","timer","removeEventListener","RateLimiter","requestLimit","windowSizeMs","sem","take","mustBackoff","counter","limitCounter","currWindow","prevWindow","currCount","prevCount","rate","nextCount","nextLimit","schedule","leave","LIMIT_EXCEEDED","backoffSeconds","backoff_seconds","allowed_rps","stateManager_1","opts","checkpoints","_getStorageTrie","checkpointDb_1","DELETED_VALUE","MetadataSingletons","LEVELDOWN_OPTIONS","isEqualKey","encodedKey","decodedKey","keyAddress","deletedKey","isPreForkBlock","accountFromFallback","codeProm","codeHex","storageFromFallback","compressed","replace","forkBlockNumber","metadata","CheckpointDB","metadataDb","_root","val","startBlockNumber","endBlockNumber","_leveldb","createKeyStream","createDelKey","selfAddress","encodedKeyStr","keyValueMap","entries","lte","lock","findPath","_deleteNode","delKey","metaDataPutPromise","keyWasDeleted","includeCheckpoints","secureTrie","isCheckpoint","deriveFromIndex","deriveFromPath","createAccountFromSeed","createAccountGeneratorFromSeedAndPath","crypto_1","secp256k1_1","HARDENED_OFFSET","MASTER_SECRET","seedBuffer","I","createHmac","update","chainCode","publicKey","makePublicKey","fullPath","child","test","hardened","childIndex","deriveChild","publicKeyCreate","hdPath","SHARED_BUFFER_4","isHardened","indexBuffer","writeUInt32BE","privateKeyLength","dataLength","IL","newPrivK","privateKeyTweakAdd","min","propertyKey","descriptor","original","apply","PARTS","SQUARE_BRACKET_PAIR","SQUARE_BRACKET_OPEN","SQUARE_BRACKET_CLOSE","CURLY_BRACKET_PAIR","CURLY_BRACKET_OPEN","CURLY_BRACKET_CLOSE","COMMA","QUOTE_PAIR","COLON","NULL","_EMPTY","toStr","stringToQuotedBuffer","utf8Write","nameOrIndex","numberToBuffer","isBuffer","bufferToQuotedBuffer","arrayToBuffer","chunkified","objectToBuffer","obj","yieldedOpen","yieldPrefix","quotedKey","bn","STIPEND","check","opname","isCall","isCallOrCallcode","isCreate","isTerminator","binSearch","callback","MAX","gasRefund","startingGas","range","lo","hi","isEnoughGas","vmerr","muln","addn","mid","divn","exactimate","steps","sysOps","allOps","preCompile","preCompileCheck","precompileCallDepth","collect","info","clone","isPrecompile","done","ops","systemOps","stepTracker","Context","fee","cost","sixtyFloorths","intermediateCost","sub","callingFee","compositeContext","addGas","gtn","iadd","setStart","setStop","getCost","transfer","ctx","addSixtyFloorth","sixtyFloorth","addRange","finalizeRange","isZero","innerCost","RuntimeError","RETURN_TYPES","RETURN_VALUE","estimate","actualUsed","sysops","opIndex","cursor","currentIndex","getTotal","SERIALIZED_PRECOMPILE","Uint8Array","PRECOMPILED_ACCOUNT","accountCache","makeAccount","merkle_patricia_tree_1","SecureTrie","_Miner_currentlyExecutingPrice","_Miner_origins","_Miner_pending","_Miner_isBusy","_Miner_paused","_Miner_resumer","_Miner_currentBlockBaseFeePerGas","_Miner_resolver","_Miner_emitStepEvent","_Miner_executables","_Miner_options","_Miner_vm","_Miner_createBlock","_Miner_priced","_Miner_mine","_Miner_mineTxs","_Miner_runTx","_Miner_removeBestAndOrigin","_Miner_reset","_Miner_setPricedHeap","_Miner_updatePricedHeap","_Miner_setCurrentBlockBaseFeePerGas","replace_from_heap_1","updateBloom","blockBloom","sortByPrice","effectiveGasPrice","refresher","item","Miner","createBlock","Heap","lastBlock","runtimeBlock","inProgress","keepMining","priced","blockTransactions","BaseTrie","finalizedBlockData","numTransactions","blockGasLeft","blockGasUsed","best","peek","locked","txKey","fillFromResult","bitvector","pendingOrigin","removeBest","Params","TRANSACTION_GAS","refresh","errorMessage","TRANSACTION_HASH","mapping","price","replaceFromHeap","source","replaceBest","normalizeEvent","originalMemory","memoryLength","sharedBuffer","codeAddress","memoryWordCount","returnStack","_EthereumProvider_options","_EthereumProvider_api","_EthereumProvider_executor","_EthereumProvider_wallet","_EthereumProvider_blockchain","_EthereumProvider_send","_EthereumProvider_logRequest","_EthereumProvider_legacySendPayloads","_EthereumProvider_legacySendPayload","api_1","ethereum_options_1","lodash_clonedeep_1","blockchain_1","fork_1","EthereumProvider","arg1","arg2","verbose","payloads","mainError","responses","EthereumOptionsConfig","normalize","parseCoinbase","hookEventSystem","onChange","listenerCount","listenerAdded","eventName","listenerRemoved","getOptions","getInitialAccounts","unlocked","sendAsync","args","rawResult","execute","_TransactionPool_options","_TransactionPool_priceBump","_TransactionPool_blockchain","_TransactionPool_accountPromises","_TransactionPool_validateTransaction","TriageOption","shouldReplace","replacee","replacerNonce","replacer","priceBump","TRANSACTION_LOCKED","TRANSACTION_REJECTED","replacerTip","replacerMaxFee","replaceeTip","replaceeMaxFee","UNDERPRICED","byNonce","TransactionPool","GAS_LIMIT","INVALID_INPUT","INTRINSIC_GAS_TOO_LOW","txNonce","transactorPromise","highestNonce","getNonceAndBalance","transactor","maxGasPrice","INSUFFICIENT_FUNDS","queuedOriginTransactions","transactionPlacement","FutureQueue","executableOriginTransactions","pendingArray","pendingTx","ReplacesPendingExecutable","REPLACED","pendingTxNonce","Executable","transactorNonce","queuedArray","queuedTx","ReplacesFutureTransaction","nextExpectedNonce","nextTx","_Wallet_randomRng","_Wallet_randomBytes","_Wallet_initializeAccounts","_Wallet_intializeAccountFromKey","_Wallet_initializeAccountWithoutKey","_Wallet_initializeAccount","_Wallet_lockAccount","hdkey_1","bip39_1","seedrandom_1","keccak_1","SCRYPT_PARAMS","dklen","n","CIPHER","scrypt","derivedKey","SHARED_BUFFER","uncompressedPublicKeyToAddress","uncompressedPublicKey","publicKeyConvert","asUUID","uuid","Wallet","keyFiles","lockTimers","rand","makeAccountAtIndex","mnemonicToSeedSync","mnemonic","balanceParts","defaultBalance","significand","fractionalStr","fractional","magnitude","defaultBalanceInWei","WEI","etherInWei","givenAccounts","accountsLength","givenAccount","acct","numberOfAccounts","totalAccounts","createAccount","lockAccounts","addToKeyFileSync","lowerAddress","alea","givenUnlockedAccounts","ul","addressOrIndex","indexOf","createFakePrivateKey","isSafeInteger","accountKeysPath","fileData","private_keys","writeFileSync","random","salt","iv","N","finishEncryption","encryptSync","scryptSync","cipher","createCipheriv","ciphertext","final","mac","crypto","cipherparams","kdf","kdfParams","keyfile","crypt","localMac","createDecipheriv","encrypted","encrypt","keyFile","decrypt","privateToAddress","seed","existingTimer","durationMs","timeout","fakePrivateKey","ACCOUNT_ZERO","ChainOptions","cliDescription","legacyName","cliType","asyncRequestProcessing","defaultDescription","cliAliases","rawInput","cliCoerce","asNum","cliChoices","DatabaseOptions","disableInCLI","conflicts","ForkOptions","KNOWN_NETWORKS","MAX_BLOCK_NUMBER","MAX_SAFE_INTEGER","reColonSplit","coerceHeaders","ALLOWED_PROTOCOLS","includes","lastIndex","lastIndexOf","substr","_blockNumber","conjunction","last","arrayToOxfordList","implies","reduce","EthereumDefaults","chain_options_1","database_options_1","logging_options_1","miner_options_1","wallet_options_1","fork_options_1","options_1","LoggingOptions","MinerOptions","WalletOptions","OptionsConfig","debug","quiet","config","toBigIntOrString","rawType","unseededRng","randomAlphaNumericString","alphabet","alphabetLength","rng","text","accountString","deterministic","DeterministicSeedPhrase","entropyToMnemonic","notVeryRandomBytes","AccessLists","isAccessList","tx_1","tx_2","params_1","accessList","AccessListJSON","bufferAccessList","slots","accessListStorageKeyCost","ACCESS_LIST_STORAGE_KEY_GAS","accessListAddressCost","ACCESS_LIST_ADDRESS_GAS","newAccessList","addressBuffer","storageItems","storageKeysLength","jsonItem","dataFeeEIP2930","BaseTransaction","MAX_UINT64","TRANSACTION_CREATION","byteLength","TRANSACTION_DATA_NON_ZERO_GAS","TRANSACTION_DATA_ZERO_GAS","nonZeroBytes","zeroBytes","setExtra","EIP1559FeeMarketTransaction","runtime_transaction_1","access_lists_1","signing_1","CAPABILITIES","RuntimeTransaction","accessListData","getAccessListData","accessListJSON","encodedData","encodedSignature","computeIntrinsics","chainIdBN","validateAndSetSignature","sender","getSenderAddress","getBaseFee","getUpfrontCost","baseFee","maxPriorityFeePerGasBN","maxFeePerGasBN","gasLimitBN","valueBN","mul","supports","capability","typeBuf","sig","msgHash","object","signature","recid","ecdsaSign","computeIntrinsicsFeeMarketTx","EIP2930AccessListTransaction","accessListDataFee","computeIntrinsicsAccessListTx","LegacyTransaction","ethereumjs_util_2","computeIntrinsicsLegacyTx","hasPartialSignature","toValidLengthAddress","base_transaction_1","transaction_receipt_1","fieldName","ONE_BUFFER","finalizer","userFrom","finalized","dataVal","txAndExtraData","vmResult","createdAddress","_event","computeFromAddress","ecdsaRecover","isValidSigRecovery","copyOrFill","targetStart","numZeroes","endZeroes","sourceOffset","recovery","_ecdsaRecover","rBuf","sBuf","partialRlp","eip155V","extras","epilogue","senderPubKey","TransactionType","legacy_transaction_1","eip2930_access_list_transaction_1","eip1559_fee_market_transaction_1","txData","txType","fromTxData","Legacy","EIP2930AccessList","EIP1559AccessList","toEIP1559","INVALID_PARAMS","typeOfRPC","_fromData","typeOfRaw","typeOf","_TransactionReceipt_gasUsed","_TransactionReceipt_init","STATUSES","decoded","blockLog","errors_1","coded_error_1","captureStackTraceExtended","createRevertReason","ethereumjs_abi_1","REVERT_REASON","codedError","writable","configurable","captureStackTrace","nonEnumerableProperty","rawDecode","NONCE_TOO_LOW","INVALID_SENDER","returnType","Symbol","_logs","filterByTopic","expectedTopics","logTopics","every","expectedTopic","logPosition","expectedTopicSet","logTopic","logIndex","removed","iterator","logToJSON","expectedAddresses","InternalTag","PREFIXES","traceDataLookup","bufferToMinHexKey","existing","lengthDiff","FilecoinDefaults","FilecoinOptionsConfig","src_1","src_2","ipfsHost","ipfsPort","TruffleColors","porsche","turquoise","infura","server","_DefaultServerOptions","ServerStatus","Server","connector_loader_1","server_1","server_2","Ganache","connector","flavors_1","flavors_2","flavor","DefaultFlavor","requestCoordinator","RequestCoordinator","Executor","GetConnector","connectPromise","serverOptionsConfig","serverDefaults","server_options_1","ServerOptions","ws","wsBinary","rpcEndpoint","FilecoinFlavorName","_Server_options","_Server_providerOptions","_Server_status","_Server_app","_Server_httpServer","_Server_listenSocket","_Server_connector","_Server_websocketServer","_Server_initializer","shim","aggregate_error_1","uws_js_unofficial_1","_cfg","ws_server_1","http_server_1","providerAndServerOptions","unknown","ready","loader","_app","App","listen","callbackIsFunction","closing","openingOrOpen","opening","allSettled","listenSocket","closed","promiseResults","closingOrClosed","_listenSocket","us_listen_socket_close","_HttpServer_connector","_HttpServer_handlePost","_HttpServer_handleOptions","content_types_1","http_response_codes_1","util_1","prepareCORSResponseHeaders","getHeader","acrh","writeHeader","sendResponse","statusCode","contentType","writeHeaders","cork","writeStatus","HttpServer","app","onAborted","onData","isLast","BAD_REQUEST","PLAIN","isGeneratorObject","OK","datum","NO_CONTENT","post","IM_A_TEAPOT","any","connectionHeader","NOT_FOUND","ContentTypes","HttpResponseCodes","WebSocketCloseCodes","_WebsocketServer_connections","MAX_PAYLOAD_SIZE","websocket_close_codes_1","WebsocketServer","connections","autoBinary","maxPayloadLength","idleTimeout","isBinary","useBinary","resultEmitter","resultEmitterPromiEvent","dispose","localData","shouldCompress","sendFirstFragment","sendFragment","sendLastFragment","CLOSE_NORMAL","webpackContext","webpackContextResolve","__webpack_require__","webpackContextKeys","module","DefaultOptionsByName","EthereumFlavorName","ethereum_1","filecoin_options_1","colors_1","chalk_1","NEED_HELP","COMMUNITY_LINK","eval","exit","webpackEmptyContext","_OptionsConfig_defaults","_OptionsConfig_namespaces","checkForConflicts","namespace","suppliedOptions","conflict","defaults","out","def","namespaceOptions","propDefinition","normalized","_PromiseQueue_queue","_PromiseQueue_tryResolve","_PromiseQueue_tryResolveChain","entry_1","PromiseQueue","queue","entry","shift","resolved","cancelledQueue","mixin","for","Entry","onSetteled","_onSetteled","getLength","enc","encodedLength","encLength","len","hexLength","lLength","firstByte","items","count","ranges","lengthEncodedLength","j","path_1","secp256k1","nodeRequire","dirname","nodeGypBuild","Secp256k1","makeRequest","jsonrpc_1","promievent_1","toBigIntBE","toBufferBE","bigint_buffer_1","BaseJsonRpcType","toBuffers","toStrings","bufCache","strCache","constants_1","inspect","self","toStringTag","bigIntToBuffer","fixedValue","_depth","_options","json_rpc_base_types_1","json_rpc_base_types_2","validateByteLength","byteLengths","strLength","padBy","repeat","_nullable","nullable","q","bigInt","bufferToBigInt","details","getOwnPropertyNames","PromiEvent_1","emitteryMethods","methodName","onrejected","onAny","eventData","uint_to_buffer_1","_bigIntToBuffer","bigIntByteLength","readUIntBE","view","padded","DataView","byteOffset","getBigUint64","latin1Slice","hexSlice","HEX_MAP","json_rpc_data_1","json_rpc_quantity_1","_Executor_requestCoordinator","has_own_1","api","__proto__","comp","insertPosition","step","_hasOwn","prop","less","down","up","element","newLength","newValue","fix","remove","swap","i0","j1","j2","heap","instance","_state","absorb","squeeze","_finalized","RandomNumberGenerator","entropy","getNumber","upperExclusiveBound","getNumbers","numbers","getBuffer","_RequestCoordinator_paused","_RequestCoordinator_process","runningTasks","thisArgument","argumentsList","MAX_UINT32","num","uintWideToBuf","hiLsb","six","five","lsb","two","one","uint32ToBuf","second","third"],"sourceRoot":""}